<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Linux 创建远程登陆用户</title>
    <url>/2021/12/13/Linux-%E5%88%9B%E5%BB%BA%E8%BF%9C%E7%A8%8B%E7%99%BB%E9%99%86%E7%94%A8%E6%88%B7/</url>
    <content><![CDATA[<h4 id="开启远程登陆"><a href="#开启远程登陆" class="headerlink" title="开启远程登陆"></a>开启远程登陆</h4><ul>
<li><p>修改 SSH 配置文件</p>
<p>修改配置文件 <code>/etc/ssh/sshd_config</code> 以下字段：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> /etc/ssh/sshd_config</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置允许远程登录</span></span><br><span class="line">PasswordAuthentication yes</span><br><span class="line">PermitRootLogin yes</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 新增 root 远程账户</span></span><br><span class="line">AllowUsers root</span><br><span class="line">AllowUsers &lt;user&gt;</span><br></pre></td></tr></table></figure>
<p>其中，<em><user></user></em> 为后续添加的其他远程登录账户。 </p>
</li>
<li><p>重启 SSH 服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service sshd restart</span><br></pre></td></tr></table></figure>
<p>重启完成之后即可借助远程连接工具连接到该远程服务器。</p>
</li>
</ul>
<span id="more"></span>
<h4 id="创建远程账户"><a href="#创建远程账户" class="headerlink" title="创建远程账户"></a>创建远程账户</h4><ul>
<li><p>创建本地用户</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">useradd -d /home/&lt;newuser&gt; -m &lt;newuser&gt;</span><br></pre></td></tr></table></figure>
<p>其中，</p>
<ul>
<li><p><code>-d</code> 表示该用户的家目录</p>
</li>
<li><p><code>-m</code> 表示创建该用户的家目录</p>
</li>
</ul>
</li>
<li><p>修改用户密码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">passwd &lt;newuser&gt;</span><br></pre></td></tr></table></figure>
<p>根据提示输入两次用户密码。</p>
</li>
<li><p>修改 SSH 配置文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> /etc/ssh/sshd_config</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 新增远程登录用户</span></span><br><span class="line">AllowUsers &lt;newuser&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>重启 SSH 服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service sshd restart</span><br></pre></td></tr></table></figure>
<p>操作完成后即可使用新账号登录远程服务器。</p>
</li>
</ul>
<h4 id="删除远程登录账户"><a href="#删除远程登录账户" class="headerlink" title="删除远程登录账户"></a>删除远程登录账户</h4><ul>
<li><p>修改 SSH 配置文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> /etc/ssh/sshd_config</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 禁用远程用户</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> AllowUsers &lt;user&gt;</span></span><br></pre></td></tr></table></figure>
<p>修改配置文件后记得重启 SSH 服务。</p>
</li>
<li><p>删除本地用户</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">userdel -r &lt;user&gt;</span><br></pre></td></tr></table></figure>
<p><code>userdel</code> 命令默认会删除 <em>/etc/passwd</em>、<em>/etc/shadow</em>、<em>/etc/group</em>、<em>/etc/gshadow</em> 四个文件里该账户和组的信息，使用 <code>-r</code> 选项递归删除该用户家目录下的用户数据。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>创建用户</tag>
        <tag>远程登录</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 部署 ThinkPHP 5.x 容器</title>
    <url>/2021/07/29/Docker-%E9%83%A8%E7%BD%B2-thinkphp5-x-%E5%AE%B9%E5%99%A8/</url>
    <content><![CDATA[<h3 id="构建-Dockerfile-文件"><a href="#构建-Dockerfile-文件" class="headerlink" title="构建 Dockerfile 文件"></a>构建 Dockerfile 文件</h3><p>在<a href="https://hypc.github.io/2018/10/19/docker-thinkphp/">使用 Docker 部署 thinkphp 项目</a>中，作者介绍了三点注意事项：</p>
<blockquote>
<ol>
<li>thinkphp 的入口文件在 public 目录下，所以需要将<code>VirtualHost</code>的<code>DocumentRoot</code>指向 public 目录；</li>
<li>thinkphp 需要设置伪静态，Apache 需要加载<code>mod_rewrite.so</code>模块；</li>
<li>下载相应版本的 thinkphp 放到项目根目录下。</li>
</ol>
</blockquote>
<p>并给出了如下的 Dockerfile 配置：</p>
<span id="more"></span>
<figure class="highlight docker"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> php:<span class="number">5.6</span>-apache</span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> THINKPHP_VERSION=<span class="number">5.0</span>.<span class="number">21</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> ln -s /etc/apache2/mods-available/rewrite.load /etc/apache2/mods-enabled/rewrite.load \</span></span><br><span class="line"><span class="bash">    &amp;&amp; sed -i <span class="string">&#x27;s/AllowOverride None/AllowOverride All/g&#x27;</span> /etc/apache2/apache2.conf \</span></span><br><span class="line"><span class="bash">    &amp;&amp; sed -i <span class="string">&#x27;s/\/var\/www\/html/\/var\/www\/html\/public/g&#x27;</span> /etc/apache2/sites-enabled/000-default.conf</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> curl -OL https://github.com/top-think/framework/archive/v<span class="variable">$THINKPHP_VERSION</span>.tar.gz \</span></span><br><span class="line"><span class="bash">    &amp;&amp; tar xvf v<span class="variable">$THINKPHP_VERSION</span>.tar.gz &amp;&amp; mv framework-<span class="variable">$THINKPHP_VERSION</span> thinkphp</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> . /var/www/html/</span></span><br></pre></td></tr></table></figure>
<p>不过需要注意到，在仓库 <a href="https://github.com/top-think/framework.git">https://github.com/top-think/framework.git</a> 中，<strong>只提供了 thinkphp 框架，并没有提供相应的 Web 开发框架</strong>，而这可以在仓库 <a href="https://gitee.com/liu21st/thinkphp.git">https://gitee.com/liu21st/thinkphp.git</a> 中找到。</p>
<p>据此，修改后的 Dockerfile 配置为：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> php:<span class="number">5.6</span>-apache</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> sed -i <span class="string">&#x27;s/deb.debian.org\|security.debian.org/mirrors.tuna.tsing.edu.cn/g&#x27;</span> /etc/apt/sources.list &amp;&amp; \</span></span><br><span class="line"><span class="bash">	apt update &amp;&amp; apt install -y git</span></span><br><span class="line">	</span><br><span class="line"><span class="keyword">ENV</span> THINKPHP_VERSION=<span class="number">5.0</span>.<span class="number">22</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> ln -s /etc/apache2/mods-available/rewrite.load /etc/apache2/mods-enabled/rewrite.load \</span></span><br><span class="line"><span class="bash">    &amp;&amp; sed -i <span class="string">&#x27;s/AllowOverride None/AllowOverride All/g&#x27;</span> /etc/apache2/apache2.conf \</span></span><br><span class="line"><span class="bash">    &amp;&amp; sed -i <span class="string">&#x27;s#/var/www/html#/var/www/html/tp5/public#g&#x27;</span> /etc/apache2/sites-enabled/000-default.conf</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> git <span class="built_in">clone</span> --depth 1 -b v<span class="variable">$THINKPHP_VERSION</span> https://gitee.com/liu21st/thinkphp.git ./tp5 &amp;&amp; \</span></span><br><span class="line"><span class="bash">    git <span class="built_in">clone</span> --depth 1 -b v<span class="variable">$THINKPHP_VERSION</span> https://gitee.com/liu21st/framework.git ./tp5/thinkphp</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> . /var/www/html/</span></span><br></pre></td></tr></table></figure>
<p>主要修改的地方有：</p>
<ul>
<li>第 3-4 行：将官方 apt 源修改为清华镜像源，并下载 git 工具</li>
<li>第 10 行：修改<code>DocumentRoot</code>指向的<code>public</code> 目录位置</li>
<li>第 12-13 行：拉取 ThinkPHP 5.0.22 的 <code>public</code> 等文件和 <code>thinkphp</code> 框架</li>
</ul>
<h3 id="创建并运行-ThinkPHP-容器"><a href="#创建并运行-ThinkPHP-容器" class="headerlink" title="创建并运行 ThinkPHP 容器"></a>创建并运行 ThinkPHP 容器</h3><p>基于 Dockerfile 文件，可以构建如下的 shell 脚本文件 <code>run-tp5.sh</code>：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">THINKPHP_VERSION=5.0.22</span><br><span class="line"></span><br><span class="line">if [[ -n $(docker image ls | grep -v local/thinkphp:v$&#123;THINKPHP_VERSION&#125;) ]]; then</span><br><span class="line">	echo &quot;create local image &#x27;local/thinkphp:v$&#123;THINKPHP_VERSION&#125;&#x27;&quot;</span><br><span class="line">	docker build -f &lt;path-to-Dockerfile&gt; -t local/thinkphp:v$&#123;THINKPHP_VERSION&#125; .</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [[ -n $(docker container ls | grep -v mytp5) ]]; then</span><br><span class="line">	echo &quot;create container &#x27;mytp5&#x27;&quot;</span><br><span class="line">	docker create -p 8080:80 --name mytp5 local/thinkphp:v$&#123;THINKPHP_VERSION&#125;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [[ -n $(docker ps | grep -v mytp5 )]]; then</span><br><span class="line">	echo &quot;run conatiner &#x27;mytp5&#x27;&quot;</span><br><span class="line">	docker start mytp5</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">echo &quot;container &#x27;mytp5&#x27; has started&quot;</span><br></pre></td></tr></table></figure>
<p><code>run-tp5.sh</code> 脚本主要做了三件事：</p>
<ol>
<li>基于 <code>Dockerfile</code> 文件在当前目录创建本地镜像 <code>local/thinkphp:v5.0.22</code></li>
<li>基于本地镜像 <code>local/thinkphp:v5.0.22</code> 创建容器 <code>mytp5</code>，并将容器内部端口 80 映射为外部端口 8080</li>
<li>运行容器 <code>mytp5</code></li>
</ol>
<p>容器启动后，运行命令 <code>docker exec -it mytp5 /bin/bash</code> 便可以进入容器内部，修改 ThinkPHP 容器配置。</p>
<p>在浏览器中访问地址<code>127.0.0.1:8080</code>，看到如下欢迎界面表明 ThinkPHP 服务部署成功。</p>
<p><img src="/2021/07/29/Docker-%E9%83%A8%E7%BD%B2-thinkphp5-x-%E5%AE%B9%E5%99%A8/thinkphp-5.0.22.png" alt></p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>如果在项目中用到了 <code>mysql</code> 等扩展，则需要使用 <code>docker-php-ext-install</code> 命令安装相应的扩展，在 Dockerfile 中添加如下代码：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装 postgresql 扩展</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get update &amp;&amp; apt-get install -y libpq-dev \</span></span><br><span class="line"><span class="bash">    &amp;&amp; docker-php-ext-configure pgsql -with-pgsql=/usr/<span class="built_in">local</span>/pgsql \</span></span><br><span class="line"><span class="bash">    &amp;&amp; docker-php-ext-install pdo pdo_pgsql</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装mysql扩展</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> docker-php-ext-install pdo pdo_mysql</span></span><br></pre></td></tr></table></figure>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ol>
<li><a href="https://hypc.github.io/2018/10/19/docker-thinkphp/">使用Docker部署thinkphp项目</a></li>
</ol>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>thinkPHP5.x</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 命令行配置 WiFi</title>
    <url>/2021/12/06/Linux-%E5%91%BD%E4%BB%A4%E8%A1%8C%E9%85%8D%E7%BD%AE-WIFI/</url>
    <content><![CDATA[<p>在 Linux 中，可以使用 <strong>NetworkManager</strong> 工具来管理网络，其在命令行下对应的命令是 <code>nmcli</code>。因此如果在图形界面中无法连接指定 WiFi，此时可在命令行中手动连接。</p>
<span id="more"></span>
<ol>
<li><p><span id="s1">查看网络设备列表</span></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo nmcli dev</span><br></pre></td></tr></table></figure>
<p>注意：如果列出的设备状态是 <strong>unmanaged</strong>，说明网络设备不受 <strong>NetworkManager</strong> 管理，此时可尝试清空 <em>/etc/network/interfaces</em> 下的网络设置，然后重启，重新查看网络设备。</p>
</li>
<li><p>开启 WiFi</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo nmcli r wifi on</span><br></pre></td></tr></table></figure>
</li>
<li><p>扫描附近的 WiFi 热点</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo nmcli dev wifi</span><br></pre></td></tr></table></figure>
</li>
<li><p>连接到指定的 WiFi 热点</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo nmcli dev wifi connect <span class="string">&quot;SSID&quot;</span> password <span class="string">&quot;PASSWORD&quot;</span> ifname &lt;if-dev&gt;</span><br></pre></td></tr></table></figure>
<p>注意：请将 <code>SSID</code> 和 <code>PASSWORD</code> 替换成实际的 WiFi 名称和密码，并将 <code>&lt;if-dev&gt;</code> 替换为在<a href="#s1">第一步</a>中显示的网络设备。</p>
</li>
</ol>
<p>完成上面四步后，电脑就可成功连接指定 WiFi 了，并且下次开机时，电脑也会自动连接该 WiFi。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>命令行</tag>
        <tag>WiFi 配置</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown 常用公式</title>
    <url>/2021/09/05/Markdown-%E5%B8%B8%E7%94%A8%E5%85%AC%E5%BC%8F/</url>
    <content><![CDATA[<h4 id="常见公式"><a href="#常见公式" class="headerlink" title="常见公式"></a>常见公式</h4><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">符号</th>
<th>规则</th>
<th style="text-align:left">符号</th>
<th style="text-align:left">规则</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">$T^{\prime}$</td>
<td><code>T^&#123;\prime&#125;</code></td>
<td style="text-align:left">$\oplus$</td>
<td style="text-align:left"><code>\oplus</code></td>
</tr>
<tr>
<td style="text-align:left">$\gets$</td>
<td><code>\gets</code></td>
<td style="text-align:left">$\to$</td>
<td style="text-align:left"><code>\to</code></td>
</tr>
<tr>
<td style="text-align:left">$\times$</td>
<td><code>\times</code></td>
<td style="text-align:left">$\div$</td>
<td style="text-align:left"><code>\div</code></td>
</tr>
<tr>
<td style="text-align:left">$\sim$</td>
<td><code>\sim</code></td>
<td style="text-align:left">$\approx$</td>
<td style="text-align:left"><code>\approx</code></td>
</tr>
<tr>
<td style="text-align:left">$\ll$</td>
<td><code>\ll</code></td>
<td style="text-align:left">$\gg$</td>
<td style="text-align:left"><code>\gg</code></td>
</tr>
<tr>
<td style="text-align:left">$\lll$</td>
<td><code>\lll</code></td>
<td style="text-align:left">$\mathop{\lll}\limits_{32}$</td>
<td style="text-align:left"><code>\mathop&#123;\lll&#125;\limits_&#123;32&#125;</code></td>
</tr>
<tr>
<td style="text-align:left"></td>
<td></td>
<td style="text-align:left"></td>
</tr>
</tbody>
</table>
</div>
]]></content>
      <categories>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>公式符号</tag>
      </tags>
  </entry>
  <entry>
    <title>SM4 与 AES 算法 S 盒的关系</title>
    <url>/2021/09/06/SM4-AES-S%E7%9B%92%E7%BB%93%E6%9E%84%E5%85%B3%E7%B3%BB/</url>
    <content><![CDATA[<h4 id="SM4-Sbox-结构"><a href="#SM4-Sbox-结构" class="headerlink" title="SM4-Sbox 结构"></a>SM4-Sbox 结构</h4><p>SM4-Sbox 查找表如图 1 所示。对于 S 盒的每 8 位输入，将前 4 位作为行，后 4 位作为列，输出即为查找表对应的元素。</p>
<p><img src="/2021/09/06/SM4-AES-S%E7%9B%92%E7%BB%93%E6%9E%84%E5%85%B3%E7%B3%BB/SM4-Sbox.png" alt="image-20210906173135105"></p>
<p align="center">图 1 SM4-Sbox 结构</p>

<span id="more"></span>
<p>经过 LiuF 等人<a href="#ref1"><sup>[1]</sup></a>的分析验证，SM4-Sbox 的代数表达式为：</p>
<script type="math/tex; mode=display">
S_{SM4}(x) = A_{SM4}*I_{SM4}(A_{SM4}*x+C_{SM4})+C_{SM4} \tag{1}</script><p>其中，非线性运算 $I_{SM4}(x)$ 为有限域 $GF(2^8)$ 上的求逆运算，所用的素多项式为：</p>
<script type="math/tex; mode=display">
F(x) = x^8 + x^7 + x^6 + x^5 + x^4 + x^2 + 1</script><p>列向量 $C_{SM4}$ 为：</p>
<script type="math/tex; mode=display">
C_{SM4}=\begin{pmatrix}
1 & 1 & 0 & 1 & 0 & 0 & 1 & 1
\end{pmatrix}^{\mathrm{T}}</script><p>循环矩阵 $A_{SM4}$ 为：</p>
<script type="math/tex; mode=display">
A_{SM4}=\begin{pmatrix}
1 & 1 & 0 & 1 & 0 & 0 & 1 & 1 \\
1 & 1 & 1 & 0 & 1 & 0 & 0 & 1 \\
1 & 1 & 1 & 1 & 0 & 1 & 0 & 0 \\
0 & 1 & 1 & 1 & 1 & 0 & 1 & 0 \\
0 & 0 & 1 & 1 & 1 & 1 & 0 & 1 \\
1 & 0 & 0 & 1 & 1 & 1 & 1 & 0 \\
0 & 1 & 0 & 0 & 1 & 1 & 1 & 1 \\
1 & 0 & 1 & 0 & 0 & 1 & 1 & 1
\end{pmatrix}</script><blockquote>
<p>对于 S 盒的 8 位输入 $x \in Z_2^8$ ，将其表示为 8 位列向量 $x = (x_0,x_1,x_2,x_3,x_4,x_5,x_6,x_7)^\mathrm{T}$ ，随后将其带入 S 盒代数表达式参与 $GF(2)$ 上的运算即可。</p>
</blockquote>
<h4 id="AES-Sbox-结构"><a href="#AES-Sbox-结构" class="headerlink" title="AES-Sbox 结构"></a>AES-Sbox 结构</h4><p>AES-Sbox 查找表如图 2 所示。对于 S 盒的每 8 位输入，将前 4 位作为行，后 4 位作为列，输出即为查找表对应的元素。</p>
<p><img src="/2021/09/06/SM4-AES-S%E7%9B%92%E7%BB%93%E6%9E%84%E5%85%B3%E7%B3%BB/AES-Sbox.png" alt="image-20210906173135105"></p>
<p align="center">图 2 AES-Sbox 查找表</p>

<p>根据 AES 标准文档<a href="#ref2"><sup>[2]</sup></a>，AES-Sbox 的代数表达式为：</p>
<script type="math/tex; mode=display">
S_{AES}(x) = A_{AES}*I_{AES}(x)+C_{AES} \tag{2}</script><p>其中，非线性运算 $I_{AES}(x)$ 为有限域 $GF(2^8)$ 上的求逆运算，所用的不可约多项式为：</p>
<script type="math/tex; mode=display">
m(x) = x^8 + x^4 + x^3 + x + 1</script><p>列向量 $C_{AES}$ 为：</p>
<script type="math/tex; mode=display">
C_{AES} = \begin{pmatrix}
 0 & 1 & 1 & 0 & 0 & 0 & 1 & 1
\end{pmatrix}^\mathrm{T}</script><p>循环矩阵 $A_{AES}$ 为：</p>
<script type="math/tex; mode=display">
A_{AES} = \begin{pmatrix}
0 & 0 & 0 & 1 & 1 & 1 & 1 & 1 \\
0 & 0 & 1 & 1 & 1 & 1 & 1 & 0 \\
0 & 1 & 1 & 1 & 1 & 1 & 0 & 0 \\
1 & 1 & 1 & 1 & 1 & 0 & 0 & 0 \\
1 & 1 & 1 & 1 & 0 & 0 & 0 & 1 \\
1 & 1 & 1 & 0 & 0 & 0 & 1 & 1 \\
1 & 1 & 0 & 0 & 0 & 1 & 1 & 1 \\
1 & 0 & 0 & 0 & 1 & 1 & 1 & 1
\end{pmatrix}</script><h4 id="SM4-与-AES-算法-S-盒的关系"><a href="#SM4-与-AES-算法-S-盒的关系" class="headerlink" title="SM4 与 AES 算法 S 盒的关系"></a>SM4 与 AES 算法 S 盒的关系</h4><p>由于 SM4 算法与 AES 算法的 S 盒均位于有限域 $GF(2^8)$ ，因此，两者的 S 盒存在某种映射关系，使得 SM4 算法与 AES 算法之间的 S 盒可以互相替换。</p>
<p>假设映射矩阵 $T_{S2A}$ 将 SM4 有限域中的元素映射到 AES 有限域中，那么根据 SM4-Sbox 的代数表达式，有：</p>
<script type="math/tex; mode=display">
\begin{aligned}
S_{SM4} &= A_{SM4} * I_{SM4}(A_{SM4} * x + C_{SM4}) + C_{SM4} \\
        &= A_{SM4} * I_{SM4}(T_{S2A}^{-1}*T_{S2A}*\{A_{SM4} * x + C_{SM4}\}) + C_{SM4} \\
        &= A_{SM4} * T_{S2A}^{-1}* I_{AES}(T_{S2A}*\{A_{SM4} * x + C_{SM4}\}) + C_{SM4} \\
\end{aligned} \tag{3}</script><p>注意上式是如何从第 2 步变换到第 3 步的，根据文献<a href="#ref1"><sup>[1]</sup></a>可知，有限域中的求逆运算关于映射矩阵是同构的，因此把逆矩阵 $T_{S2A}^{-1}$ 从 $I_{SM4}$ 中提取出来后，此时求逆运算是在 AES 有限域上的元素进行运算的，因此在第 3 步中求逆运算由 $I_{SM4}$ 变成了 $I_{AES}$ 。</p>
<p>由 AES-Sbox 代数表达式可知：</p>
<script type="math/tex; mode=display">
I_{AES}(x) = A_{AES}^{-1} * \{S_{AES}(x) + C_{AES}\}</script><p>将其带入公式 (3) 中，可得：</p>
<script type="math/tex; mode=display">
\begin{aligned}
S_{SM4} &= A_{SM4} * T_{S2A}^{-1}* I_{AES}(T_{S2A}*\{A_{SM4} * x + C_{SM4}\}) + C_{SM4} \\
        &= A_{SM4} *  T_{S2A}^{-1}* A_{AES}^{-1} * \{S_{AES}(T_{S2A}*\{A_{SM4} * x + C_{SM4}\}) \\
        &\quad + C_{AES}\} + C_{SM4}
\end{aligned} \tag{4}</script><p>令 </p>
<script type="math/tex; mode=display">
\begin{cases}
M_1 = T_{S2A} \ast A_{SM4}, M_2 = A_{SM4} \ast T_{S2A}^{-1} \ast A_{AES}^{-1} \\
C_1 = T_{S2A} \ast C_{SM4},  C_2 = M_2 \ast C_{AES} + C_{SM4}
\end{cases}</script><p>，则有：</p>
<script type="math/tex; mode=display">
S_{SM4}(x) = M_2 * S_{AES}(M_1 * x + C_1) + C_2 \tag{5}</script><p>至此，我们便得到了 SM4 与 AES 算法两者 S 盒的变换关系。</p>
<h4 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h4><p><div id="ref1"></div> [1] Liu F, Ji W, Hu L, Ding JT. Analysis of the SMS4 block cipher. Australasian Conference on Information Security and Privacy. Springer, Berlin, Heidelberg, 2007: 158-170.</p>
<p><div id="ref2"></div> [2] Pub N F. 197: Advanced encryption standard (AES). Federal information processing standards publication, 2001, 197(441): 0311.</p>
]]></content>
      <categories>
        <category>国密算法</category>
      </categories>
      <tags>
        <tag>SM4 算法</tag>
        <tag>AES 算法</tag>
        <tag>S 盒</tag>
        <tag>有限域</tag>
      </tags>
  </entry>
  <entry>
    <title>SM4 分组密码算法简介</title>
    <url>/2021/09/05/SM4-%E5%AF%86%E7%A0%81%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<p>SM4 算法是我国商用分组密码算法，被广泛用于无线网络数据加密传输中。SM4 算法的密钥长度和分组长度均为 128 比特，解密算法是加密算法的逆运算，只需将轮密钥逆序输入即可得到明文。SM4 与 AES 算法的比较如表 1 所示。</p>
<span id="more"></span>
<p align="center">表 1 SM4 与 AES 算法比较</p>

<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">算法</th>
<th style="text-align:center">加密轮数</th>
<th style="text-align:center">密钥长度（比特）</th>
<th style="text-align:center">分组长度（比特）</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">SM4</td>
<td style="text-align:center">32</td>
<td style="text-align:center">128</td>
<td style="text-align:center">128</td>
</tr>
<tr>
<td style="text-align:center">AES-128</td>
<td style="text-align:center">10</td>
<td style="text-align:center">128</td>
<td style="text-align:center">128</td>
</tr>
<tr>
<td style="text-align:center">AES-192</td>
<td style="text-align:center">12</td>
<td style="text-align:center">192</td>
<td style="text-align:center">128</td>
</tr>
<tr>
<td style="text-align:center">AES-256</td>
<td style="text-align:center">14</td>
<td style="text-align:center">256</td>
<td style="text-align:center">128</td>
</tr>
</tbody>
</table>
</div>
<h4 id="SM4-加密算法"><a href="#SM4-加密算法" class="headerlink" title="SM4 加密算法"></a>SM4 加密算法</h4><p>为了方便说明，本文定义 $Z_2^m$ 表示 $m$ 比特向量，符号 $\oplus$ 表示异或运算。设明文输入为 $X = \left(X_0,X_1,X_2,X_3\right) \in \left(Z_2^{32}\right)^4$ ，密文输出为 $Y = \left(Y_0,Y_1,Y_2,Y_3\right) \in \left(Z_2^{32}\right)^4$ ，轮密钥为 $rk_i \in Z_2^{32}, i=0,1,\dots,31$ ，则 SM4 加密算法表示为：</p>
<script type="math/tex; mode=display">
\begin{aligned}
X_{i+4} &= F\left(X_i,X_{i+1},X_{i+2},X_{i+3},rk_i\right) \\
       &= X_i \oplus T\left(X_{i+1} \oplus X_{i+2} \oplus X_{i+3} \oplus rk_i \right) \quad i=0,1,\dots,31\\ \\
Y &= \left(Y_0,Y_1,Y_2,Y_3\right) = \left(X_{35},X_{34},X_{33},X_{32}\right)
\end{aligned}</script><p>其中，$T$ 是一个 $Z_2^{32} \to Z_2^{32}$ 的合成变换，包含线性变换 $L$ 和 非线性变换 $\tau$ ，即：$T(x) = L(\tau(x))$ 。</p>
<ol>
<li><p>非线性变换 $\tau$ 由 4 个并行的 8 进 8 出的 S 盒查表组成，设输入为 $x=(x_0,x_1,x_2,x_3) \in (Z_2^8)^4$ ，输出为 $y=(y_0,y_1,y_2,y_3) \in (Z_2^8)^4$ ，则：</p>
<script type="math/tex; mode=display">
(y_0,y_1,y_2,y_3) = \tau(x)=(S(x_0),S(x_1),S(x_2),S(x_3))</script><p>对于 S 盒的 8 位输入，将前 4 位作为行，后 4 位作为列，输出即为查找表中对应行列所对应的    值。S 盒如图 1 所示：</p>
<p><img src="/2021/09/05/SM4-%E5%AF%86%E7%A0%81%E7%AE%97%E6%B3%95/S 盒.png" alt="image-20210905154433201"></p>
<p align="center">图 1 S 盒</p>
</li>
<li><p>线性变换 $L$ 接收非线性变换 $\tau$ 的输出作为输入，设线性变换 $L$ 的输出为 $z \in Z_2^{32}$ ，则：</p>
<script type="math/tex; mode=display">
z=L(y) = y \oplus (y \lll 2) \oplus (y \lll 10) \oplus (y \lll 18) \oplus (y \lll 24)</script><p>其中，$\lll$ 表示循环左移，如 $y \lll 2$ 表示将 $y$ 循环左移 2 位。</p>
</li>
</ol>
<h4 id="SM4-密钥扩展算法"><a href="#SM4-密钥扩展算法" class="headerlink" title="SM4 密钥扩展算法"></a>SM4 密钥扩展算法</h4><p>SM4 算法使用密钥扩展算法对初始密钥进行扩展生成各轮子密钥。令初始密钥表示为 $MK=(MK_0,MK_1,MK_2,MK_3) \in (Z_2^{32})^4$ ，则按如下方式生成 32 轮子密钥：</p>
<script type="math/tex; mode=display">
\begin{aligned}
(K_0,K_1,K_2,K_3) &= (MK_0 \oplus FK_0,MK_1 \oplus FK_1,MK_2 \oplus FK_2,MK_3 \oplus FK_3) \\
rk_i = K_{i+4} &= K_i \oplus T^{\prime}(K_{i+1} \oplus K_{i+2} \oplus K_{i+3} \oplus CK_i) \quad i=0,1,\dots,31
\end{aligned}</script><p>其中：</p>
<ol>
<li><p>$T^{\prime} = L^{\prime}(\tau(\cdot))$ ，$L^{\prime}$ 表示为：</p>
<script type="math/tex; mode=display">
L^{\prime}(B) = B \oplus (B \lll 13) \oplus (B \lll 23)</script></li>
<li><p>$FK$ 是系统参数，取值为：</p>
<script type="math/tex; mode=display">FK_0 = (A3B1BAC6), FK_1 = (56AA3350)</script><script type="math/tex; mode=display">FK_2 = (677D9197),FK_3 = (B27022DC)</script></li>
<li><p>$CK$ 是固定参数，其构造方法为：</p>
<p>设 $CK_{i}$ 的第 $j$ 个字节为 $ck_{i,j} i=0,1,\dots,31; j=0,1,2,3$ ，即 $CK_i = (ck_{i,0}, ck_{i,1}, ck_{i,2}, ck_{i,3}) \in (Z_2^8)^4$ ，那么有：</p>
<script type="math/tex; mode=display">
ck_{i,j} = (4*i+j)*7 (mod 256)</script><p>根据此计算方法，可以计算出所有的 $CK$ 值，即：</p>
<blockquote>
<p>00070E15, 1C232A31, 383F464D, 545B6269,</p>
<p>70777E85, 8C939AA1, A8AFB6BD, C4CBD2D9,</p>
<p>E0E7EEF5, FC030A11, 181F262D, 343B4249,</p>
<p>50575E65, 6C737A81, 888F969D, A4ABB2B9,</p>
<p>C0C7CED5, DCE3EAF1, F8FF060D, 141B2229,</p>
<p>30373E45, 4C535A61, 686F767D, 848B9299,</p>
<p>A0A7AEB5, BCC3CAD1, D8DFE6ED, F4FB0209,</p>
<p>10171E25, 2C333A41, 484F565D, 646B7279</p>
</blockquote>
</li>
</ol>
<h4 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h4><p>[1] <a href="/download/SM4分组密码算法.pdf">SM4 分组密码算法</a></p>
]]></content>
      <categories>
        <category>国密算法</category>
      </categories>
      <tags>
        <tag>SM4 算法</tag>
        <tag>分组密码算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 介绍</title>
    <url>/2021/07/29/hexo-%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h4 id="使用-Github-空间搭建-Hexo-技术博客"><a href="#使用-Github-空间搭建-Hexo-技术博客" class="headerlink" title="使用 Github 空间搭建 Hexo 技术博客"></a>使用 Github 空间搭建 Hexo 技术博客</h4><ol>
<li><a href="https://blog.csdn.net/wugenqiang/article/details/88373385">使用 Github 空间搭建 Hexo 技术博客</a></li>
<li><a href="https://blog.csdn.net/qq_41907993/article/details/104387191?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_title~default-1.readhide&amp;spm=1001.2101.3001.4242">个人博客搭建——基于HEXO框架</a></li>
</ol>
<h4 id="使用-Gitee-空间搭建-Hexo-技术博客"><a href="#使用-Gitee-空间搭建-Hexo-技术博客" class="headerlink" title="使用 Gitee 空间搭建 Hexo 技术博客"></a>使用 Gitee 空间搭建 Hexo 技术博客</h4><ol>
<li><a href="https://telcruel.gitee.io/2020/02/13/Hexo/">Hexo + Gitee 博客搭建</a></li>
</ol>
<span id="more"></span>
<h4 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h4><ol>
<li><a href="https://wugenqiang.github.io/articles/hexo-do-optimization.html">Hexo+NexT+Gemini 搭建博客拥抱舒爽</a></li>
<li><a href="http://yearito.cn/posts/hexo-theme-beautify.html">Hexo 搭建个人博客系列：主题美化篇</a></li>
<li><a href="https://www.cnblogs.com/TechSnail/p/12933623.html">Hexo进阶设置</a></li>
</ol>
<h4 id="Hexo-添加本地文件下载"><a href="#Hexo-添加本地文件下载" class="headerlink" title="Hexo 添加本地文件下载"></a>Hexo 添加本地文件下载</h4><ol>
<li><a href="https://www.dazhuanlan.com/fanhuajiantu/topics/1376769">Hexo中添加本地文件下载</a></li>
</ol>
<h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><ol>
<li><a href="https://novnan.github.io/Hexo/hexo-draft/">Hexo 文章保存为草稿</a></li>
<li><a href="https://sophistt.github.io/2020/07/22/mathjax-render-error-in-hexo/">Hexo Mathjax 公式渲染</a></li>
</ol>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>github 博客</tag>
        <tag>gitee 博客</tag>
      </tags>
  </entry>
  <entry>
    <title>NEON 指令速查</title>
    <url>/2022/04/10/NEON-%E6%8C%87%E4%BB%A4%E9%80%9F%E6%9F%A5/</url>
    <content><![CDATA[<h4 id="NEON-指令速查"><a href="#NEON-指令速查" class="headerlink" title="NEON 指令速查"></a>NEON 指令速查</h4><p>以下是 NEON 指令，所在头文件为 <code>&lt;arm_neon.h&gt;</code>。包含部分 NEON 与 SSE 对应关系。</p>
<span id="more"></span>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __ARM_NEON__</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">error</span> You must enable NEON instructions (e.g. -mfloat-abi=softfp -mfpu=neon) to use arm_neon.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">(1) 正常指令：生成大小相同且类型通常与操作数向量相同的结果向量；</span></span><br><span class="line"><span class="comment">(2) 长指令：对双字向量操作数执行运算，生成四字向量的结果。所生成的元素一般是操作数元素宽度的两倍，</span></span><br><span class="line"><span class="comment">并属于同一类型；</span></span><br><span class="line"><span class="comment">(3) 宽指令：一个双字向量操作数和一个四字向量操作数执行运算，生成四字向量结果。所生成的元素和第一个</span></span><br><span class="line"><span class="comment">操作数的元素是第二个操作数元素宽度的两倍；</span></span><br><span class="line"><span class="comment">(4) 窄指令：四字向量操作数执行运算，并生成双字向量结果，所生成的元素一般是操作数元素宽度的一半，</span></span><br><span class="line"><span class="comment">(5) 饱和指令：当超过数据类型指定的范围则自动限制在该范围内。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************************Addition*************************/</span></span><br><span class="line"><span class="comment">/*--1、Vector add(正常指令): vadd -&gt; ri = ai + bi; r, a, b have equal lane sizes--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vadd_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a, <span class="keyword">int8x8_t</span> __b)</span></span>;<span class="comment">//_mm_add_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vadd_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b)</span></span>;<span class="comment">//_mm_add_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vadd_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b)</span></span>;<span class="comment">//_mm_add_epi32</span></span><br><span class="line"><span class="function"><span class="keyword">int64x1_t</span> <span class="title">vadd_s64</span> <span class="params">(<span class="keyword">int64x1_t</span> __a, <span class="keyword">int64x1_t</span> __b)</span></span>;<span class="comment">//_mm_add_epi64</span></span><br><span class="line"><span class="comment">//_mm_add_ps, SSE, use only low 64 bits</span></span><br><span class="line"><span class="function"><span class="keyword">float32x2_t</span> <span class="title">vadd_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a, <span class="keyword">float32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vadd_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">uint8x8_t</span> __b)</span></span>;<span class="comment">//_mm_add_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vadd_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">uint16x4_t</span> __b)</span></span>;<span class="comment">//_mm_add_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vadd_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">uint32x2_t</span> __b)</span></span>;<span class="comment">//_mm_add_epi32</span></span><br><span class="line"><span class="function"><span class="keyword">uint64x1_t</span> <span class="title">vadd_u64</span> <span class="params">(<span class="keyword">uint64x1_t</span> __a, <span class="keyword">uint64x1_t</span> __b)</span></span>;<span class="comment">//_mm_add_epi64</span></span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vaddq_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a, <span class="keyword">int8x16_t</span> __b)</span></span>;<span class="comment">//_mm_add_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vaddq_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">int16x8_t</span> __b)</span></span>;<span class="comment">//_mm_add_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vaddq_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int32x4_t</span> __b)</span></span>;<span class="comment">//_mm_add_epi32</span></span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vaddq_s64</span> <span class="params">(<span class="keyword">int64x2_t</span> __a, <span class="keyword">int64x2_t</span> __b)</span></span>;<span class="comment">//_mm_add_epi64</span></span><br><span class="line"><span class="function"><span class="keyword">float32x4_t</span> <span class="title">vaddq_f32</span> <span class="params">(<span class="keyword">float32x4_t</span> __a, <span class="keyword">float32x4_t</span> __b)</span></span>;<span class="comment">//_mm_add_ps</span></span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vaddq_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a, <span class="keyword">uint8x16_t</span> __b)</span></span>;<span class="comment">//_mm_add_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vaddq_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">uint16x8_t</span> __b)</span></span>;<span class="comment">//_mm_add_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vaddq_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">uint32x4_t</span> __b)</span></span>;<span class="comment">//_mm_add_epi32</span></span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vaddq_u64</span> <span class="params">(<span class="keyword">uint64x2_t</span> __a, <span class="keyword">uint64x2_t</span> __b)</span></span>;<span class="comment">//_mm_add_epi64</span></span><br><span class="line"><span class="comment">/*--2、Vector long add(长指令): vaddl -&gt; ri = ai + bi; a, b have equal lane sizes, </span></span><br><span class="line"><span class="comment">result is a 128 bit vector of lanes that are twice the width--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vaddl_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a, <span class="keyword">int8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vaddl_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vaddl_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vaddl_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">uint8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vaddl_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">uint16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vaddl_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">uint32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/*--3、Vector wide add(宽指令): vaddw -&gt; ri = ai + bi--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vaddw_s8</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">int8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vaddw_s16</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vaddw_s32</span> <span class="params">(<span class="keyword">int64x2_t</span> __a, <span class="keyword">int32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vaddw_u8</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">uint8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vaddw_u16</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">uint16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vaddw_u32</span> <span class="params">(<span class="keyword">uint64x2_t</span> __a, <span class="keyword">uint32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/*--4、Vector halving add: vhadd -&gt; ri = (ai + bi) &gt;&gt; 1; </span></span><br><span class="line"><span class="comment">shifts each result right one bit, Results are truncated--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vhadd_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a, <span class="keyword">int8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vhadd_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vhadd_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vhadd_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">uint8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vhadd_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">uint16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vhadd_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">uint32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vhaddq_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a, <span class="keyword">int8x16_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vhaddq_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">int16x8_t</span> __b)</span></span></span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vhaddq_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int32x4_t</span> __b)</span></span></span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vhaddq_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a, <span class="keyword">uint8x16_t</span> __b)</span></span></span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vhaddq_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">uint16x8_t</span> __b)</span></span></span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vhaddq_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">uint32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/*--5、Vector rounding halving add: vrhadd -&gt; ri = (ai + bi + 1) &gt;&gt; 1; </span></span><br><span class="line"><span class="comment">shifts each result right one bit, Results are rounded(四舍五入)--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vrhadd_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a, <span class="keyword">int8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vrhadd_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vrhadd_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vrhadd_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">uint8x8_t</span> __b)</span></span>;<span class="comment">//_mm_avg_epu8</span></span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vrhadd_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">uint16x4_t</span> __b)</span></span>;<span class="comment">//_mm_avg_epu16</span></span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vrhadd_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">uint32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vrhaddq_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a, <span class="keyword">int8x16_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vrhaddq_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">int16x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vrhaddq_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vrhaddq_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a, <span class="keyword">uint8x16_t</span> __b)</span></span>;<span class="comment">//_mm_avg_epu8</span></span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vrhaddq_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">uint16x8_t</span> __b)</span></span>;<span class="comment">//_mm_avg_epu16</span></span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vrhaddq_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">uint32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/*--6、Vector saturating add(饱和指令): vqadd -&gt; ri = sat(ai + bi); </span></span><br><span class="line"><span class="comment">the results are saturated if they overflow--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vqadd_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a, <span class="keyword">int8x8_t</span> __b)</span></span>;<span class="comment">//_mm_adds_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vqadd_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b)</span></span>;<span class="comment">//_mm_adds_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vqadd_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x1_t</span> <span class="title">vqadd_s64</span> <span class="params">(<span class="keyword">int64x1_t</span> __a, <span class="keyword">int64x1_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vqadd_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">uint8x8_t</span> __b)</span></span>;<span class="comment">//_mm_adds_epu8</span></span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vqadd_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">uint16x4_t</span> __b)</span></span>;<span class="comment">//_mm_adds_epu16</span></span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vqadd_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">uint32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x1_t</span> <span class="title">vqadd_u64</span> <span class="params">(<span class="keyword">uint64x1_t</span> __a, <span class="keyword">uint64x1_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vqaddq_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a, <span class="keyword">int8x16_t</span> __b)</span></span>;<span class="comment">//_mm_adds_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vqaddq_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">int16x8_t</span> __b)</span></span>;<span class="comment">//_mm_adds_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vqaddq_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vqaddq_s64</span> <span class="params">(<span class="keyword">int64x2_t</span> __a, <span class="keyword">int64x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vqaddq_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a, <span class="keyword">uint8x16_t</span> __b)</span></span>;<span class="comment">//_mm_adds_epu8</span></span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vqaddq_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">uint16x8_t</span> __b)</span></span>;<span class="comment">//_mm_adds_epu16</span></span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vqaddq_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">uint32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vqaddq_u64</span> <span class="params">(<span class="keyword">uint64x2_t</span> __a, <span class="keyword">uint64x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/*--7、Vector add high half(窄指令): vaddhn -&gt; ri = sat(ai + bi); </span></span><br><span class="line"><span class="comment">selecting High half, The results are truncated--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vaddhn_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">int16x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vaddhn_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vaddhn_s64</span> <span class="params">(<span class="keyword">int64x2_t</span> __a, <span class="keyword">int64x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vaddhn_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">uint16x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vaddhn_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">uint32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vaddhn_u64</span> <span class="params">(<span class="keyword">uint64x2_t</span> __a, <span class="keyword">uint64x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/*--8、Vector rounding add high half(窄指令): vraddhn -&gt; ri = ai + bi; </span></span><br><span class="line"><span class="comment">selecting High half, The results are rounded--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vraddhn_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">int16x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vraddhn_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int32x4_t</span> __b)</span></span></span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vraddhn_s64</span> <span class="params">(<span class="keyword">int64x2_t</span> __a, <span class="keyword">int64x2_t</span> __b)</span></span></span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vraddhn_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">uint16x8_t</span> __b)</span></span></span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vraddhn_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">uint32x4_t</span> __b)</span></span></span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vraddhn_u64</span> <span class="params">(<span class="keyword">uint64x2_t</span> __a, <span class="keyword">uint64x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/*******************************************Multiplication******************************/</span></span><br><span class="line"><span class="comment">/*--1、Vector multiply(正常指令): vmul -&gt; ri = ai * bi;--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vmul_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a, <span class="keyword">int8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vmul_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b)</span></span>;<span class="comment">//_mm_mullo_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vmul_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x2_t</span> <span class="title">vmul_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a, <span class="keyword">float32x2_t</span> __b)</span></span>;<span class="comment">//_mm_mul_ps</span></span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vmul_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">uint8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vmul_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">uint16x4_t</span> __b)</span></span>;<span class="comment">//_mm_mullo_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vmul_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">uint32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x8_t</span> <span class="title">vmul_p8</span> <span class="params">(<span class="keyword">poly8x8_t</span> __a, <span class="keyword">poly8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vmulq_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a, <span class="keyword">int8x16_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vmulq_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">int16x8_t</span> __b)</span></span>;<span class="comment">//_mm_mullo_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vmulq_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x4_t</span> <span class="title">vmulq_f32</span> <span class="params">(<span class="keyword">float32x4_t</span> __a, <span class="keyword">float32x4_t</span> __b)</span></span>;<span class="comment">//_mm_mul_ps</span></span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vmulq_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a, <span class="keyword">uint8x16_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vmulq_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">uint16x8_t</span> __b)</span></span>;<span class="comment">//_mm_mullo_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vmulq_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">uint32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x16_t</span> <span class="title">vmulq_p8</span> <span class="params">(<span class="keyword">poly8x16_t</span> __a, <span class="keyword">poly8x16_t</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/*--2、Vector multiply accumulate: vmla -&gt; ri = ai + bi * ci; --*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vmla_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a, <span class="keyword">int8x8_t</span> __b, <span class="keyword">int8x8_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vmla_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b, <span class="keyword">int16x4_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vmla_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b, <span class="keyword">int32x2_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x2_t</span> <span class="title">vmla_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a, <span class="keyword">float32x2_t</span> __b, <span class="keyword">float32x2_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vmla_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">uint8x8_t</span> __b, <span class="keyword">uint8x8_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vmla_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">uint16x4_t</span> __b, <span class="keyword">uint16x4_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vmla_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">uint32x2_t</span> __b, <span class="keyword">uint32x2_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vmlaq_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a, <span class="keyword">int8x16_t</span> __b, <span class="keyword">int8x16_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vmlaq_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">int16x8_t</span> __b, <span class="keyword">int16x8_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vmlaq_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int32x4_t</span> __b, <span class="keyword">int32x4_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x4_t</span> <span class="title">vmlaq_f32</span> <span class="params">(<span class="keyword">float32x4_t</span> __a, <span class="keyword">float32x4_t</span> __b, <span class="keyword">float32x4_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vmlaq_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a, <span class="keyword">uint8x16_t</span> __b, <span class="keyword">uint8x16_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vmlaq_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">uint16x8_t</span> __b, <span class="keyword">uint16x8_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vmlaq_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">uint32x4_t</span> __b, <span class="keyword">uint32x4_t</span> __c)</span></span>;</span><br><span class="line"><span class="comment">/*--3、Vector multiply accumulate long: vmlal -&gt; ri = ai + bi * ci --*/</span></span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vmlal_s8</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">int8x8_t</span> __b, <span class="keyword">int8x8_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vmlal_s16</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int16x4_t</span> __b, <span class="keyword">int16x4_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vmlal_s32</span> <span class="params">(<span class="keyword">int64x2_t</span> __a, <span class="keyword">int32x2_t</span> __b, <span class="keyword">int32x2_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vmlal_u8</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">uint8x8_t</span> __b, <span class="keyword">uint8x8_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vmlal_u16</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">uint16x4_t</span> __b, <span class="keyword">uint16x4_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vmlal_u32</span> <span class="params">(<span class="keyword">uint64x2_t</span> __a, <span class="keyword">uint32x2_t</span> __b, <span class="keyword">uint32x2_t</span> __c)</span></span>;</span><br><span class="line"><span class="comment">/*--4、Vector multiply subtract: vmls -&gt; ri = ai - bi * ci --*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vmls_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a, <span class="keyword">int8x8_t</span> __b, <span class="keyword">int8x8_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vmls_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b, <span class="keyword">int16x4_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vmls_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b, <span class="keyword">int32x2_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x2_t</span> <span class="title">vmls_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a, <span class="keyword">float32x2_t</span> __b, <span class="keyword">float32x2_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vmls_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">uint8x8_t</span> __b, <span class="keyword">uint8x8_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vmls_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">uint16x4_t</span> __b, <span class="keyword">uint16x4_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vmls_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">uint32x2_t</span> __b, <span class="keyword">uint32x2_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vmlsq_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a, <span class="keyword">int8x16_t</span> __b, <span class="keyword">int8x16_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vmlsq_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">int16x8_t</span> __b, <span class="keyword">int16x8_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vmlsq_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int32x4_t</span> __b, <span class="keyword">int32x4_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x4_t</span> <span class="title">vmlsq_f32</span> <span class="params">(<span class="keyword">float32x4_t</span> __a, <span class="keyword">float32x4_t</span> __b, <span class="keyword">float32x4_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vmlsq_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a, <span class="keyword">uint8x16_t</span> __b, <span class="keyword">uint8x16_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vmlsq_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">uint16x8_t</span> __b, <span class="keyword">uint16x8_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vmlsq_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">uint32x4_t</span> __b, <span class="keyword">uint32x4_t</span> __c)</span></span>;</span><br><span class="line"><span class="comment">/*--5、Vector multiply subtract long&amp;#xff1a;vmlsl -&gt; ri = ai - bi * ci --*/</span></span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vmlsl_s8</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">int8x8_t</span> __b, <span class="keyword">int8x8_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vmlsl_s16</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int16x4_t</span> __b, <span class="keyword">int16x4_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vmlsl_s32</span> <span class="params">(<span class="keyword">int64x2_t</span> __a, <span class="keyword">int32x2_t</span> __b, <span class="keyword">int32x2_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vmlsl_u8</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">uint8x8_t</span> __b, <span class="keyword">uint8x8_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vmlsl_u16</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">uint16x4_t</span> __b, <span class="keyword">uint16x4_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vmlsl_u32</span> <span class="params">(<span class="keyword">uint64x2_t</span> __a, <span class="keyword">uint32x2_t</span> __b, <span class="keyword">uint32x2_t</span> __c)</span></span>;</span><br><span class="line"><span class="comment">/*--6、Vector saturating doubling multiply high: vqdmulh -&gt; ri = sat(ai * bi); </span></span><br><span class="line"><span class="comment">doubles the results and returns only the high half of the truncated results--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vqdmulh_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vqdmulh_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vqdmulhq_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">int16x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vqdmulhq_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/*--7、Vector saturating rounding doubling multiply high vqrdmulh -&gt; ri = ai * bi: </span></span><br><span class="line"><span class="comment">doubles the results and returns only the high half of the rounded results. </span></span><br><span class="line"><span class="comment">The results are saturated if they overflow--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vqrdmulh_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vqrdmulh_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vqrdmulhq_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">int16x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vqrdmulhq_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/*--8、Vector saturating doubling multiply accumulate long: vqdmlal -&gt; ri = ai + bi * ci;</span></span><br><span class="line"><span class="comment">multiplies the elements in the second and third vectors, doubles the results and adds the</span></span><br><span class="line"><span class="comment">results to the values in the first vector. The results are saturated if they overflow--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vqdmlal_s16</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int16x4_t</span> __b, <span class="keyword">int16x4_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span>  <span class="title">vqdmlal_s32</span> <span class="params">(<span class="keyword">int64x2_t</span> __a, <span class="keyword">int32x2_t</span> __b, <span class="keyword">int32x2_t</span> __c)</span></span>;</span><br><span class="line"><span class="comment">/*--9、Vector saturating doubling multiply subtract long: vqdmlsl -&gt; ri = ai - bi * ci;</span></span><br><span class="line"><span class="comment">multiplies the elements in the second and third vectors, doubles the results and subtracts </span></span><br><span class="line"><span class="comment">the results from the elements in the first vector. </span></span><br><span class="line"><span class="comment">The results are saturated if they overflow--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vqdmlsl_s16</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int16x4_t</span> __b, <span class="keyword">int16x4_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vqdmlsl_s32</span> <span class="params">(<span class="keyword">int64x2_t</span> __a, <span class="keyword">int32x2_t</span> __b, <span class="keyword">int32x2_t</span> __c)</span></span>;</span><br><span class="line"><span class="comment">/*--10、Vector long multiply(长指令): vmull -&gt; ri = ai * bi;--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vmull_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a, <span class="keyword">int8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vmull_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vmull_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vmull_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">uint8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vmull_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">uint16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vmull_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">uint32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x8_t</span> <span class="title">vmull_p8</span> <span class="params">(<span class="keyword">poly8x8_t</span> __a, <span class="keyword">poly8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/*--11、Vector saturating doubling long multiply: vqdmull -&gt; ri = ai * bi;</span></span><br><span class="line"><span class="comment">If any of the results overflow, they are saturated--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vqdmull_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vqdmull_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/*--12、Fused multiply accumulate: vfma -&gt; ri = ai + bi * ci; </span></span><br><span class="line"><span class="comment">The result of the multiply is not rounded before the accumulation--*/</span></span><br><span class="line"><span class="function"><span class="keyword">float32x2_t</span> <span class="title">vfma_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a, <span class="keyword">float32x2_t</span> __b, <span class="keyword">float32x2_t</span> __c)</span></span></span><br><span class="line"><span class="function"><span class="keyword">float32x4_t</span> <span class="title">vfmaq_f32</span> <span class="params">(<span class="keyword">float32x4_t</span> __a, <span class="keyword">float32x4_t</span> __b, <span class="keyword">float32x4_t</span> __c)</span></span>;</span><br><span class="line"><span class="comment">/*--13、Fused multiply subtract: vfms -&gt; ri = ai - bi * ci; </span></span><br><span class="line"><span class="comment">The result of the multiply is not rounded before the subtraction--*/</span></span><br><span class="line"><span class="function"><span class="keyword">float32x2_t</span> <span class="title">vfms_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a, <span class="keyword">float32x2_t</span> __b, <span class="keyword">float32x2_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x4_t</span> <span class="title">vfmsq_f32</span> <span class="params">(<span class="keyword">float32x4_t</span> __a, <span class="keyword">float32x4_t</span> __b, <span class="keyword">float32x4_t</span> __c)</span></span>;</span><br><span class="line"><span class="comment">/******************************************************Round to integral****************/</span></span><br><span class="line"><span class="comment">/*--1、to nearest, ties to even--*/</span></span><br><span class="line"><span class="function"><span class="keyword">float32x2_t</span> <span class="title">vrndn_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x4_t</span> <span class="title">vrndqn_f32</span> <span class="params">(<span class="keyword">float32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="comment">/*--2、to nearest, ties away from zero--*/</span></span><br><span class="line"><span class="function"><span class="keyword">float32x2_t</span> <span class="title">vrnda_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x4_t</span> <span class="title">vrndqa_f32</span> <span class="params">(<span class="keyword">float32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="comment">/*--3、towards +Inf--*/</span></span><br><span class="line"><span class="function"><span class="keyword">float32x2_t</span> <span class="title">vrndp_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x4_t</span> <span class="title">vrndqp_f32</span> <span class="params">(<span class="keyword">float32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="comment">/*--4、towards -Inf--*/</span></span><br><span class="line"><span class="function"><span class="keyword">float32x2_t</span> <span class="title">vrndm_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x4_t</span> <span class="title">vrndqm_f32</span> <span class="params">(<span class="keyword">float32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="comment">/*--5、towards 0--*/</span></span><br><span class="line"><span class="function"><span class="keyword">float32x2_t</span> <span class="title">vrnd_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x4_t</span> <span class="title">vrndq_f32</span> <span class="params">(<span class="keyword">float32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="comment">/**********************************************Subtraction******************************/</span></span><br><span class="line"><span class="comment">/*--1、Vector subtract(正常指令):vsub -&gt; ri = ai - bi;--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vsub_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a, <span class="keyword">int8x8_t</span> __b)</span></span>;<span class="comment">//_mm_sub_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vsub_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b)</span></span>;<span class="comment">//_mm_sub_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vsub_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b)</span></span>;<span class="comment">//_mm_sub_epi32</span></span><br><span class="line"><span class="function"><span class="keyword">int64x1_t</span> <span class="title">vsub_s64</span> <span class="params">(<span class="keyword">int64x1_t</span> __a, <span class="keyword">int64x1_t</span> __b)</span></span>;<span class="comment">//_mm_sub_epi64</span></span><br><span class="line"><span class="function"><span class="keyword">float32x2_t</span> <span class="title">vsub_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a, <span class="keyword">float32x2_t</span> __b)</span></span>;<span class="comment">//_mm_sub_ps</span></span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vsub_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">uint8x8_t</span> __b)</span></span>;<span class="comment">//_mm_sub_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vsub_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">uint16x4_t</span> __b)</span></span>;<span class="comment">//_mm_sub_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vsub_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">uint32x2_t</span> __b)</span></span>;<span class="comment">//_mm_sub_epi32</span></span><br><span class="line"><span class="function"><span class="keyword">uint64x1_t</span> <span class="title">vsub_u64</span> <span class="params">(<span class="keyword">uint64x1_t</span> __a, <span class="keyword">uint64x1_t</span> __b)</span></span>;<span class="comment">//_mm_sub_epi64</span></span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vsubq_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a, <span class="keyword">int8x16_t</span> __b)</span></span>;<span class="comment">//_mm_sub_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vsubq_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">int16x8_t</span> __b)</span></span>;<span class="comment">//_mm_sub_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vsubq_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int32x4_t</span> __b)</span></span>;<span class="comment">//_mm_sub_epi32</span></span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vsubq_s64</span> <span class="params">(<span class="keyword">int64x2_t</span> __a, <span class="keyword">int64x2_t</span> __b)</span></span>;<span class="comment">//_mm_sub_epi64</span></span><br><span class="line"><span class="function"><span class="keyword">float32x4_t</span> <span class="title">vsubq_f32</span> <span class="params">(<span class="keyword">float32x4_t</span> __a, <span class="keyword">float32x4_t</span> __b)</span></span>;<span class="comment">//_mm_sub_ps</span></span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vsubq_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a, <span class="keyword">uint8x16_t</span> __b)</span></span>;<span class="comment">//_mm_sub_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vsubq_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">uint16x8_t</span> __b)</span></span>;<span class="comment">//_mm_sub_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vsubq_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">uint32x4_t</span> __b)</span></span>;<span class="comment">//_mm_sub_epi32</span></span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vsubq_u64</span> <span class="params">(<span class="keyword">uint64x2_t</span> __a, <span class="keyword">uint64x2_t</span> __b)</span></span>;<span class="comment">//_mm_sub_epi64</span></span><br><span class="line"><span class="comment">/*--2、Vector long subtract(长指令): vsubl -&gt; ri = ai - bi; --*/</span></span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vsubl_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a, <span class="keyword">int8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vsubl_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vsubl_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vsubl_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">uint8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vsubl_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">uint16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vsubl_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">uint32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/*--3、Vector wide subtract(宽指令): vsubw -&gt; ri = ai - bi;--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vsubw_s8</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">int8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vsubw_s16</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vsubw_s32</span> <span class="params">(<span class="keyword">int64x2_t</span> __a, <span class="keyword">int32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vsubw_u8</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">uint8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vsubw_u16</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">uint16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vsubw_u32</span> <span class="params">(<span class="keyword">uint64x2_t</span> __a, <span class="keyword">uint32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/*--4、Vector saturating subtract(饱和指令): vqsub -&gt; ri = sat(ai - bi);</span></span><br><span class="line"><span class="comment">If any of the results overflow, they are saturated--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vqsub_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a, <span class="keyword">int8x8_t</span> __b)</span></span>;<span class="comment">//_mm_subs_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vqsub_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b)</span></span>;<span class="comment">//_mm_subs_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vqsub_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b)</span></span>;<span class="comment">//_mm_subs_epi32</span></span><br><span class="line"><span class="function"><span class="keyword">int64x1_t</span> <span class="title">vqsub_s64</span> <span class="params">(<span class="keyword">int64x1_t</span> __a, <span class="keyword">int64x1_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vqsub_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">uint8x8_t</span> __b)</span></span>;<span class="comment">//_mm_subs_epu8</span></span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vqsub_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">uint16x4_t</span> __b)</span></span>;<span class="comment">//_mm_subs_epu16</span></span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vqsub_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">uint32x2_t</span> __b)</span></span>;<span class="comment">//_mm_subs_epu32</span></span><br><span class="line"><span class="function"><span class="keyword">uint64x1_t</span> <span class="title">vqsub_u64</span> <span class="params">(<span class="keyword">uint64x1_t</span> __a, <span class="keyword">uint64x1_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vqsubq_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a, <span class="keyword">int8x16_t</span> __b)</span></span>;<span class="comment">//_mm_subs_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vqsubq_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">int16x8_t</span> __b)</span></span>;<span class="comment">//_mm_subs_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vqsubq_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int32x4_t</span> __b)</span></span>;<span class="comment">//_mm_subs_epi32</span></span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vqsubq_s64</span> <span class="params">(<span class="keyword">int64x2_t</span> __a, <span class="keyword">int64x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vqsubq_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a, <span class="keyword">uint8x16_t</span> __b)</span></span>;<span class="comment">//_mm_subs_epu8</span></span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vqsubq_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">uint16x8_t</span> __b)</span></span>;<span class="comment">//_mm_subs_epu16</span></span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vqsubq_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">uint32x4_t</span> __b)</span></span>;<span class="comment">//_mm_subs_epu32</span></span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vqsubq_u64</span> <span class="params">(<span class="keyword">uint64x2_t</span> __a, <span class="keyword">uint64x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/*--5、Vector halving subtract: vhsub -&gt; ri = (ai - bi) &gt;&gt; 1; </span></span><br><span class="line"><span class="comment">shifts each result right one bit, The results are truncated.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vhsub_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a, <span class="keyword">int8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vhsub_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vhsub_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vhsub_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">uint8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vhsub_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">uint16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vhsub_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">uint32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vhsubq_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a, <span class="keyword">int8x16_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vhsubq_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">int16x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vhsubq_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vhsubq_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a, <span class="keyword">uint8x16_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vhsubq_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">uint16x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vhsubq_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">uint32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/*--6、Vector subtract high half(窄指令): vsubhn -&gt; ri = ai - bi;</span></span><br><span class="line"><span class="comment">It returns the most significant halves of the results. The results are truncated--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vsubhn_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">int16x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vsubhn_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vsubhn_s64</span> <span class="params">(<span class="keyword">int64x2_t</span> __a, <span class="keyword">int64x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vsubhn_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">uint16x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vsubhn_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">uint32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vsubhn_u64</span> <span class="params">(<span class="keyword">uint64x2_t</span> __a, <span class="keyword">uint64x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/*--7、Vector rounding subtract high half(窄指令): vrsubhn -&gt; ai - bi; </span></span><br><span class="line"><span class="comment">It returns the most significant halves of the results. The results are rounded--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vrsubhn_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">int16x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vrsubhn_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vrsubhn_s64</span> <span class="params">(<span class="keyword">int64x2_t</span> __a, <span class="keyword">int64x2_t</span> __b)</span></span></span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vrsubhn_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">uint16x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vrsubhn_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">uint32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vrsubhn_u64</span> <span class="params">(<span class="keyword">uint64x2_t</span> __a, <span class="keyword">uint64x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/******************************************************Comparison***********************/</span></span><br><span class="line"><span class="comment">/*--1、Vector compare equal(正常指令): vceq -&gt; ri = ai == bi ? 1...1 : 0...0; </span></span><br><span class="line"><span class="comment">If they are equal, the corresponding element in the destination vector is set to all ones.</span></span><br><span class="line"><span class="comment">Otherwise, it is set to all zeros--*/</span></span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vceq_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a, <span class="keyword">int8x8_t</span> __b)</span></span>;<span class="comment">//_mm_cmpeq_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vceq_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b)</span></span>;<span class="comment">//_mm_cmpeq_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vceq_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b)</span></span>;<span class="comment">//_mm_cmpeq_epi32</span></span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vceq_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a, <span class="keyword">float32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vceq_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">uint8x8_t</span> __b)</span></span>;<span class="comment">//_mm_cmpeq_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vceq_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">uint16x4_t</span> __b)</span></span>;<span class="comment">//_mm_cmpeq_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vceq_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">uint32x2_t</span> __b)</span></span>;<span class="comment">//_mm_cmpeq_epi32</span></span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vceq_p8</span> <span class="params">(<span class="keyword">poly8x8_t</span> __a, <span class="keyword">poly8x8_t</span> __b)</span></span>;<span class="comment">//_mm_cmpeq_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vceqq_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a, <span class="keyword">int8x16_t</span> __b)</span></span>;<span class="comment">//_mm_cmpeq_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vceqq_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">int16x8_t</span> __b)</span></span>;<span class="comment">//_mm_cmpeq_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vceqq_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int32x4_t</span> __b)</span></span>;<span class="comment">//_mm_cmpeq_epi32</span></span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vceqq_f32</span> <span class="params">(<span class="keyword">float32x4_t</span> __a, <span class="keyword">float32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vceqq_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a, <span class="keyword">uint8x16_t</span> __b)</span></span>;<span class="comment">//_mm_cmpeq_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vceqq_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">uint16x8_t</span> __b)</span></span>;<span class="comment">//_mm_cmpeq_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vceqq_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">uint32x4_t</span> __b)</span></span>;<span class="comment">//_mm_cmpeq_epi32</span></span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vceqq_p8</span> <span class="params">(<span class="keyword">poly8x16_t</span> __a, <span class="keyword">poly8x16_t</span> __b)</span></span>;<span class="comment">//_mm_cmpeq_epi8</span></span><br><span class="line"><span class="comment">/*--2、Vector compare greater-than or equal(正常指令): vcge-&gt; ri = ai &gt;= bi ? 1...1:0...0;</span></span><br><span class="line"><span class="comment">If it is greater than or equal to it, the corresponding element in the destination </span></span><br><span class="line"><span class="comment">vector is set to all ones. Otherwise, it is set to all zeros.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vcge_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a, <span class="keyword">int8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vcge_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vcge_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vcge_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a, <span class="keyword">float32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vcge_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">uint8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vcge_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">uint16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vcge_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">uint32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vcgeq_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a, <span class="keyword">int8x16_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vcgeq_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">int16x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vcgeq_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vcgeq_f32</span> <span class="params">(<span class="keyword">float32x4_t</span> __a, <span class="keyword">float32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vcgeq_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a, <span class="keyword">uint8x16_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vcgeq_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">uint16x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vcgeq_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">uint32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/*--3、Vector compare less-than or equal(正常指令): vcle -&gt; ri = ai &amp;lt;= bi ? 1...1:0...0;</span></span><br><span class="line"><span class="comment">If it is less than or equal to it, the corresponding element in the destination vector </span></span><br><span class="line"><span class="comment">is set to all ones. Otherwise, it is set to all zeros.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vcle_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a, <span class="keyword">int8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vcle_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vcle_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vcle_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a, <span class="keyword">float32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vcle_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">uint8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vcle_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">uint16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vcle_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">uint32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vcleq_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a, <span class="keyword">int8x16_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vcleq_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">int16x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vcleq_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vcleq_f32</span> <span class="params">(<span class="keyword">float32x4_t</span> __a, <span class="keyword">float32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vcleq_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a, <span class="keyword">uint8x16_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vcleq_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">uint16x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vcleq_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">uint32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/*--4、Vector compare greater-than(正常指令): vcgt -&gt; ri = ai &gt; bi ? 1...1:0...0;</span></span><br><span class="line"><span class="comment">If it is greater than it, the corresponding element in the destination vector is</span></span><br><span class="line"><span class="comment">set to all ones. Otherwise, it is set to all zeros--*/</span></span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vcgt_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a, <span class="keyword">int8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vcgt_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vcgt_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vcgt_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a, <span class="keyword">float32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vcgt_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">uint8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vcgt_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">uint16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vcgt_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">uint32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vcgtq_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a, <span class="keyword">int8x16_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vcgtq_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">int16x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vcgtq_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vcgtq_f32</span> <span class="params">(<span class="keyword">float32x4_t</span> __a, <span class="keyword">float32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vcgtq_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a, <span class="keyword">uint8x16_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vcgtq_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">uint16x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vcgtq_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">uint32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/*--5、Vector compare less-than(正常指令): vclt -&gt; ri = ai &amp;lt; bi ? 1...1:0...0;</span></span><br><span class="line"><span class="comment">If it is less than it, the corresponding element in the destination vector is set </span></span><br><span class="line"><span class="comment">to all ones.Otherwise, it is set to all zeros--*/</span></span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vclt_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a, <span class="keyword">int8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vclt_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vclt_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vclt_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a, <span class="keyword">float32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vclt_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">uint8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vclt_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">uint16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vclt_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">uint32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vcltq_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a, <span class="keyword">int8x16_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vcltq_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">int16x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vcltq_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vcltq_f32</span> <span class="params">(<span class="keyword">float32x4_t</span> __a, <span class="keyword">float32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vcltq_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a, <span class="keyword">uint8x16_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vcltq_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">uint16x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vcltq_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">uint32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/*--6、Vector compare absolute greater-than or equal(正常指令): </span></span><br><span class="line"><span class="comment">vcage -&gt; ri = |ai| &gt;= |bi| ? 1...1:0...0;</span></span><br><span class="line"><span class="comment">compares the absolute value of each element in a vector with the absolute value of the </span></span><br><span class="line"><span class="comment">corresponding element of a second vector. If it is greater than or equal to it, </span></span><br><span class="line"><span class="comment">the corresponding element in the destination vector is set to all ones.</span></span><br><span class="line"><span class="comment">Otherwise, it is set to all zeros.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vcage_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a, <span class="keyword">float32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vcageq_f32</span> <span class="params">(<span class="keyword">float32x4_t</span> __a, <span class="keyword">float32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/*--7、Vector compare absolute less-than or equal(正常指令):</span></span><br><span class="line"><span class="comment">vcale -&gt; ri = |ai| &amp;lt;= |bi| ? 1...1:0...0;</span></span><br><span class="line"><span class="comment">compares the absolute value of each element in a vector with the absolute value of the </span></span><br><span class="line"><span class="comment">corresponding element of a second vector. If it is less than or equal to it, </span></span><br><span class="line"><span class="comment">the corresponding element in the destination vector is set to all ones.</span></span><br><span class="line"><span class="comment">Otherwise, it is set to all zeros--*/</span></span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vcale_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a, <span class="keyword">float32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vcaleq_f32</span> <span class="params">(<span class="keyword">float32x4_t</span> __a, <span class="keyword">float32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/*--8、Vector compare absolute greater-than(正常指令):</span></span><br><span class="line"><span class="comment">vcage -&gt; ri = |ai| &gt; |bi| ? 1...1:0...0;</span></span><br><span class="line"><span class="comment">compares the absolute value of each element in a vector with the absolute value of the</span></span><br><span class="line"><span class="comment">corresponding element of a second vector. If it is greater than it, </span></span><br><span class="line"><span class="comment">the corresponding element in the destination vector is set to all ones. </span></span><br><span class="line"><span class="comment">Otherwise, it is set to all zeros.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vcagt_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a, <span class="keyword">float32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vcagtq_f32</span> <span class="params">(<span class="keyword">float32x4_t</span> __a, <span class="keyword">float32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/*--9、Vector compare absolute less-than(正常指令):</span></span><br><span class="line"><span class="comment">vcalt -&gt; ri = |ai| &amp;lt; |bi| ? 1...1:0...0;</span></span><br><span class="line"><span class="comment">compares the absolute value of each element in a vector with the absolute value of the</span></span><br><span class="line"><span class="comment">corresponding element of a second vector.If it is less than it, the corresponding </span></span><br><span class="line"><span class="comment">element in the destination vector is set to all ones. Otherwise,it is set to all zeros--*/</span></span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vcalt_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a, <span class="keyword">float32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vcaltq_f32</span> <span class="params">(<span class="keyword">float32x4_t</span> __a, <span class="keyword">float32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/**********************************************Vector test bits*************************/</span></span><br><span class="line"><span class="comment">/*--正常指令&amp;#xff0c;vtst -&gt; ri = (ai &amp;amp; bi != 0) ? 1...1:0...0;</span></span><br><span class="line"><span class="comment">bitwise logical ANDs each element in a vector with the corresponding element of a second </span></span><br><span class="line"><span class="comment">vector.If the result is not zero, the corresponding element in the destination vector </span></span><br><span class="line"><span class="comment">is set to all ones. Otherwise, it is set to all zeros--*/</span></span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vtst_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a, <span class="keyword">int8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vtst_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vtst_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vtst_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">uint8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vtst_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">uint16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vtst_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">uint32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vtst_p8</span> <span class="params">(<span class="keyword">poly8x8_t</span> __a, <span class="keyword">poly8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vtstq_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a, <span class="keyword">int8x16_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vtstq_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">int16x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vtstq_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vtstq_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a, <span class="keyword">uint8x16_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vtstq_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">uint16x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vtstq_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">uint32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vtstq_p8</span> <span class="params">(<span class="keyword">poly8x16_t</span> __a, <span class="keyword">poly8x16_t</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/**********************************************Absolute difference**********************/</span></span><br><span class="line"><span class="comment">/*--1、Absolute difference between the arguments(正常指令): vabd -&gt; ri = |ai - bi|;</span></span><br><span class="line"><span class="comment">returns the absolute values of the results--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vabd_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a, <span class="keyword">int8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vabd_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vabd_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x2_t</span> <span class="title">vabd_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a, <span class="keyword">float32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vabd_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">uint8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vabd_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">uint16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vabd_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">uint32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vabdq_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a, <span class="keyword">int8x16_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vabdq_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">int16x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vabdq_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x4_t</span> <span class="title">vabdq_f32</span> <span class="params">(<span class="keyword">float32x4_t</span> __a, <span class="keyword">float32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vabdq_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a, <span class="keyword">uint8x16_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vabdq_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">uint16x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vabdq_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">uint32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/*--2、Absolute difference - long(长指令): vabdl -&gt; ri = |ai - bi|; </span></span><br><span class="line"><span class="comment">The elements in the result vector are wider--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vabdl_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a, <span class="keyword">int8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vabdl_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vabdl_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vabdl_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">uint8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vabdl_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">uint16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vabdl_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">uint32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/*--3、Absolute difference and accumulate: vaba -&gt; ri = ai + |bi - ci|;--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vaba_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a, <span class="keyword">int8x8_t</span> __b, <span class="keyword">int8x8_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vaba_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b, <span class="keyword">int16x4_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vaba_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b, <span class="keyword">int32x2_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vaba_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">uint8x8_t</span> __b, <span class="keyword">uint8x8_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vaba_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">uint16x4_t</span> __b, <span class="keyword">uint16x4_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vaba_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">uint32x2_t</span> __b, <span class="keyword">uint32x2_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vabaq_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a, <span class="keyword">int8x16_t</span> __b, <span class="keyword">int8x16_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vabaq_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">int16x8_t</span> __b, <span class="keyword">int16x8_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vabaq_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int32x4_t</span> __b, <span class="keyword">int32x4_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vabaq_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a, <span class="keyword">uint8x16_t</span> __b, <span class="keyword">uint8x16_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vabaq_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">uint16x8_t</span> __b, <span class="keyword">uint16x8_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vabaq_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">uint32x4_t</span> __b, <span class="keyword">uint32x4_t</span> __c)</span></span>;</span><br><span class="line"><span class="comment">/*--4、Absolute difference and accumulate - long: vabal -&gt; ri = ai + |bi - ci|; </span></span><br><span class="line"><span class="comment">The elements in the result are wider--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vabal_s8</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">int8x8_t</span> __b, <span class="keyword">int8x8_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vabal_s16</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int16x4_t</span> __b, <span class="keyword">int16x4_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vabal_s32</span> <span class="params">(<span class="keyword">int64x2_t</span> __a, <span class="keyword">int32x2_t</span> __b, <span class="keyword">int32x2_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vabal_u8</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">uint8x8_t</span> __b, <span class="keyword">uint8x8_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vabal_u16</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">uint16x4_t</span> __b, <span class="keyword">uint16x4_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vabal_u32</span> <span class="params">(<span class="keyword">uint64x2_t</span> __a, <span class="keyword">uint32x2_t</span> __b, <span class="keyword">uint32x2_t</span> __c)</span></span>;</span><br><span class="line"><span class="comment">/***********************************************Max*************************************/</span></span><br><span class="line"><span class="comment">/*--正常指令, vmax -&gt; ri = ai &gt;= bi ? ai : bi; returns the larger of each pair--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vmax_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a, <span class="keyword">int8x8_t</span> __b)</span></span>;<span class="comment">//_mm_max_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vmax_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b)</span></span>;<span class="comment">//_mm_max_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vmax_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b)</span></span>;<span class="comment">//_mm_max_epi32</span></span><br><span class="line"><span class="function"><span class="keyword">float32x2_t</span> <span class="title">vmax_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a, <span class="keyword">float32x2_t</span> __b)</span></span>;<span class="comment">//_mm_max_ps</span></span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vmax_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">uint8x8_t</span> __b)</span></span>;<span class="comment">//_mm_max_epu8</span></span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vmax_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">uint16x4_t</span> __b)</span></span>;<span class="comment">//_mm_max_epu16</span></span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vmax_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">uint32x2_t</span> __b)</span></span>;<span class="comment">//_mm_max_epu32</span></span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vmaxq_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a, <span class="keyword">int8x16_t</span> __b)</span></span>;<span class="comment">//_mm_max_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vmaxq_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">int16x8_t</span> __b)</span></span>;<span class="comment">//_mm_max_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vmaxq_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int32x4_t</span> __b)</span></span>;<span class="comment">//_mm_max_epi32</span></span><br><span class="line"><span class="function"><span class="keyword">float32x4_t</span> <span class="title">vmaxq_f32</span> <span class="params">(<span class="keyword">float32x4_t</span> __a, <span class="keyword">float32x4_t</span> __b)</span></span>;<span class="comment">//_mm_max_ps</span></span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vmaxq_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a, <span class="keyword">uint8x16_t</span> __b)</span></span>;<span class="comment">//_mm_max_epu8</span></span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vmaxq_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">uint16x8_t</span> __b)</span></span>;<span class="comment">//_mm_max_epu16</span></span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vmaxq_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">uint32x4_t</span> __b)</span></span>;<span class="comment">//_mm_max_epu32</span></span><br><span class="line"><span class="comment">/****************************************************Min********************************/</span></span><br><span class="line"><span class="comment">/*--正常指令, vmin -&gt; ri = ai &gt;= bi ? bi : ai; returns the smaller of each pair--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vmin_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a, <span class="keyword">int8x8_t</span> __b)</span></span>;<span class="comment">//_mm_min_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vmin_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b)</span></span>;<span class="comment">//_mm_min_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vmin_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b)</span></span>;<span class="comment">//_mm_min_epi32</span></span><br><span class="line"><span class="function"><span class="keyword">float32x2_t</span> <span class="title">vmin_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a, <span class="keyword">float32x2_t</span> __b)</span></span>;<span class="comment">//_mm_min_ps</span></span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vmin_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">uint8x8_t</span> __b)</span></span>;<span class="comment">//_mm_min_epu8</span></span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vmin_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">uint16x4_t</span> __b)</span></span>;<span class="comment">//_mm_min_epu16</span></span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vmin_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">uint32x2_t</span> __b)</span></span>;<span class="comment">//_mm_min_epu32</span></span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vminq_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a, <span class="keyword">int8x16_t</span> __b)</span></span>;<span class="comment">//_mm_min_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vminq_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">int16x8_t</span> __b)</span></span>;<span class="comment">//_mm_min_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vminq_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int32x4_t</span> __b)</span></span>;<span class="comment">//_mm_min_epi32</span></span><br><span class="line"><span class="function"><span class="keyword">float32x4_t</span> <span class="title">vminq_f32</span> <span class="params">(<span class="keyword">float32x4_t</span> __a, <span class="keyword">float32x4_t</span> __b)</span></span>;<span class="comment">//_mm_min_ps</span></span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vminq_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a, <span class="keyword">uint8x16_t</span> __b)</span></span>;<span class="comment">//_mm_min_epu8</span></span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vminq_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">uint16x8_t</span> __b)</span></span>;<span class="comment">//_mm_min_epu16</span></span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vminq_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">uint32x4_t</span> __b)</span></span>;<span class="comment">//_mm_min_epu32</span></span><br><span class="line"><span class="comment">/*******************************************Pairwise addition***************************/</span></span><br><span class="line"><span class="comment">/*--1、Pairwise add(正常指令): </span></span><br><span class="line"><span class="comment">vpadd -&gt; r0 = a0 + a1, ..., r3 = a6 + a7, r4 = b0 + b1, ..., r7 = b6 + b7</span></span><br><span class="line"><span class="comment">adds adjacent pairs of elements of two vectors, </span></span><br><span class="line"><span class="comment">and places the results in the destination vector.--*/</span></span><br><span class="line"><span class="comment">//r0 = a0 + a1, ...,r3 = a6 + a7, r4 = b0 + b1, ...,r7 = b6 + b7</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vpadd_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a, <span class="keyword">int8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vpadd_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vpadd_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x2_t</span> <span class="title">vpadd_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a, <span class="keyword">float32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vpadd_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">uint8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vpadd_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">uint16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vpadd_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">uint32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/*--2、Long pairwise add: vpaddl vpaddl -&gt; r0 = a0 + a1, ..., r3 = a6 + a7;</span></span><br><span class="line"><span class="comment">adds adjacent pairs of elements of a vector, sign extends or zero extends the results to </span></span><br><span class="line"><span class="comment">twice their original width, and places the final results in the destination vector--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vpaddl_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vpaddl_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x1_t</span> <span class="title">vpaddl_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vpaddl_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vpaddl_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x1_t</span> <span class="title">vpaddl_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vpaddlq_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vpaddlq_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vpaddlq_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vpaddlq_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vpaddlq_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vpaddlq_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="comment">/*--3、Long pairwise add and accumulate: </span></span><br><span class="line"><span class="comment">vpadal -&gt; r0 = a0 + (b0 + b1), ..., r3 = a3 + (b6 + b7);</span></span><br><span class="line"><span class="comment">adds adjacent pairs of elements in the second vector, sign extends or zero extends the</span></span><br><span class="line"><span class="comment">results to twice the original width.  It then accumulates this with the corresponding </span></span><br><span class="line"><span class="comment">element in the first vector and places the final results in the destination vector--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vpadal_s8</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vpadal_s16</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x1_t</span> <span class="title">vpadal_s32</span> <span class="params">(<span class="keyword">int64x1_t</span> __a, <span class="keyword">int32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vpadal_u8</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">uint8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vpadal_u16</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">uint16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x1_t</span> <span class="title">vpadal_u32</span> <span class="params">(<span class="keyword">uint64x1_t</span> __a, <span class="keyword">uint32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vpadalq_s8</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">int8x16_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vpadalq_s16</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int16x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vpadalq_s32</span> <span class="params">(<span class="keyword">int64x2_t</span> __a, <span class="keyword">int32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vpadalq_u8</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">uint8x16_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vpadalq_u16</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">uint16x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vpadalq_u32</span> <span class="params">(<span class="keyword">uint64x2_t</span> __a, <span class="keyword">uint32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/**********************************************Folding maximum**************************/</span></span><br><span class="line"><span class="comment">/*--饱和指令, vpmax -&gt; vpmax r0 = a0 &gt;= a1 ? a0 : a1, ..., r4 = b0 &gt;= b1 ? b0 : b1, ...;</span></span><br><span class="line"><span class="comment">compares adjacent pairs of elements, and copies the larger of each pair into the </span></span><br><span class="line"><span class="comment">destination vector.The maximums from each pair of the first input vector are stored in </span></span><br><span class="line"><span class="comment">the lower half of the destination vector. The maximums from each pair of the second input </span></span><br><span class="line"><span class="comment">vector are stored in the higher half of the destination vector--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vpmax_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a, <span class="keyword">int8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vpmax_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vpmax_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x2_t</span> <span class="title">vpmax_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a, <span class="keyword">float32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vpmax_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">uint8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vpmax_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">uint16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vpmax_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">uint32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/***************************************************Folding minimum*********************/</span></span><br><span class="line"><span class="comment">/*--饱和指令, vpmin -&gt; r0 = a0 &gt;= a1 ? a1 : a0, ..., r4 = b0 &gt;= b1 ? b1 : b0, ...;</span></span><br><span class="line"><span class="comment">compares adjacent pairs of elements, and copies the smaller of each pair into the </span></span><br><span class="line"><span class="comment">destination vector.The minimums from each pair of the first input vector are stored in </span></span><br><span class="line"><span class="comment">the lower half of the destination vector. The minimums from each pair of the second </span></span><br><span class="line"><span class="comment">input vector are stored in the higher half of the destination vector.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vpmin_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a, <span class="keyword">int8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vpmin_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vpmin_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x2_t</span> <span class="title">vpmin_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a, <span class="keyword">float32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vpmin_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">uint8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vpmin_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">uint16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vpmin_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">uint32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/***************************************************Reciprocal**************************/</span></span><br><span class="line"><span class="comment">/*--1、饱和指令, Newton-Raphson iteration(牛顿 - 拉夫逊迭代)</span></span><br><span class="line"><span class="comment">performs a Newton-Raphson step for finding the reciprocal. It multiplies the elements of</span></span><br><span class="line"><span class="comment">one vector by the corresponding elements of another vector, subtracts each of the results</span></span><br><span class="line"><span class="comment">from 2, and places the final results into the elements of the destination vector--*/</span></span><br><span class="line"><span class="function"><span class="keyword">float32x2_t</span> <span class="title">vrecps_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a, <span class="keyword">float32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x4_t</span> <span class="title">vrecpsq_f32</span> <span class="params">(<span class="keyword">float32x4_t</span> __a, <span class="keyword">float32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/*--2、饱和指令,performs a Newton-Raphson step for finding the reciprocal square root. </span></span><br><span class="line"><span class="comment">It multiplies the elements of one vector by the corresponding elements of another vector, </span></span><br><span class="line"><span class="comment">subtracts each of the results from 3, divides these results by two, and places </span></span><br><span class="line"><span class="comment">the final results into the elements of the destination vector--*/</span></span><br><span class="line"><span class="function"><span class="keyword">float32x2_t</span> <span class="title">vrsqrts_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a, <span class="keyword">float32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x4_t</span> <span class="title">vrsqrtsq_f32</span> <span class="params">(<span class="keyword">float32x4_t</span> __a, <span class="keyword">float32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/************************************************Shifts by signed variable**************/</span></span><br><span class="line"><span class="comment">/*--1、Vector shift left(饱和指令): vshl -&gt; ri = ai &amp;lt;&amp;lt; bi; (negative values shift right)</span></span><br><span class="line"><span class="comment">left shifts each element in a vector by an amount specified in the corresponding element </span></span><br><span class="line"><span class="comment">in the second input vector. The shift amount is the signed integer value of the least </span></span><br><span class="line"><span class="comment">significant byte of the element in the second input vector. The bits shifted out of each</span></span><br><span class="line"><span class="comment">element are lost.If the signed integer value is negative, it results in a right shift--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vshl_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a, <span class="keyword">int8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vshl_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vshl_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x1_t</span> <span class="title">vshl_s64</span> <span class="params">(<span class="keyword">int64x1_t</span> __a, <span class="keyword">int64x1_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vshl_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">int8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vshl_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vshl_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x1_t</span> <span class="title">vshl_u64</span> <span class="params">(<span class="keyword">uint64x1_t</span> __a, <span class="keyword">int64x1_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vshlq_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a, <span class="keyword">int8x16_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vshlq_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">int16x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vshlq_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vshlq_s64</span> <span class="params">(<span class="keyword">int64x2_t</span> __a, <span class="keyword">int64x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vshlq_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a, <span class="keyword">int8x16_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vshlq_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">int16x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vshlq_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">int32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vshlq_u64</span> <span class="params">(<span class="keyword">uint64x2_t</span> __a, <span class="keyword">int64x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/*--2、Vector saturating shift left(饱和指令): </span></span><br><span class="line"><span class="comment">vqshl -&gt; ri = ai &amp;lt;&amp;lt; bi;(negative values shift right)</span></span><br><span class="line"><span class="comment">If the shift value is positive, the operation is a left shift. Otherwise, it is a </span></span><br><span class="line"><span class="comment">truncating right shift. left shifts each element in a vector of integers and places</span></span><br><span class="line"><span class="comment">the results in the destination vector. It is similar to VSHL. </span></span><br><span class="line"><span class="comment">The difference is that the sticky QC flag is set if saturation occurs--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vqshl_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a, <span class="keyword">int8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vqshl_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vqshl_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x1_t</span> <span class="title">vqshl_s64</span> <span class="params">(<span class="keyword">int64x1_t</span> __a, <span class="keyword">int64x1_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vqshl_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">int8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vqshl_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vqshl_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x1_t</span> <span class="title">vqshl_u64</span> <span class="params">(<span class="keyword">uint64x1_t</span> __a, <span class="keyword">int64x1_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vqshlq_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a, <span class="keyword">int8x16_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vqshlq_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">int16x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vqshlq_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vqshlq_s64</span> <span class="params">(<span class="keyword">int64x2_t</span> __a, <span class="keyword">int64x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vqshlq_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a, <span class="keyword">int8x16_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vqshlq_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">int16x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vqshlq_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">int32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vqshlq_u64</span> <span class="params">(<span class="keyword">uint64x2_t</span> __a, <span class="keyword">int64x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/*--3、Vector rounding shift left(饱和指令): </span></span><br><span class="line"><span class="comment">vrshl -&gt; ri = ai &amp;lt;&amp;lt; bi;(negative values shift right)</span></span><br><span class="line"><span class="comment">If the shift value is positive, the operation is a left shift. Otherwise, it is a</span></span><br><span class="line"><span class="comment">rounding right shift. left shifts each element in a vector of integers and places</span></span><br><span class="line"><span class="comment">the results in the destination vector. It is similar to VSHL. </span></span><br><span class="line"><span class="comment">The difference is that the shifted value is then rounded.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vrshl_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a, <span class="keyword">int8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vrshl_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vrshl_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x1_t</span> <span class="title">vrshl_s64</span> <span class="params">(<span class="keyword">int64x1_t</span> __a, <span class="keyword">int64x1_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vrshl_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">int8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vrshl_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vrshl_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x1_t</span> <span class="title">vrshl_u64</span> <span class="params">(<span class="keyword">uint64x1_t</span> __a, <span class="keyword">int64x1_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vrshlq_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a, <span class="keyword">int8x16_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vrshlq_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">int16x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vrshlq_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vrshlq_s64</span> <span class="params">(<span class="keyword">int64x2_t</span> __a, <span class="keyword">int64x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vrshlq_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a, <span class="keyword">int8x16_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vrshlq_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">int16x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vrshlq_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">int32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vrshlq_u64</span> <span class="params">(<span class="keyword">uint64x2_t</span> __a, <span class="keyword">int64x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/*--4、Vector saturating rounding shift left(饱和指令):</span></span><br><span class="line"><span class="comment">vqrshl -&gt; ri = ai &amp;lt;&amp;lt; bi;(negative values shift right)</span></span><br><span class="line"><span class="comment">left shifts each element in a vector of integers and places the results in the </span></span><br><span class="line"><span class="comment">destination vector.It is similar to VSHL. The difference is that the shifted value</span></span><br><span class="line"><span class="comment">is rounded, and the sticky QC flag is set if saturation occurs.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vqrshl_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a, <span class="keyword">int8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vqrshl_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vqrshl_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x1_t</span> <span class="title">vqrshl_s64</span> <span class="params">(<span class="keyword">int64x1_t</span> __a, <span class="keyword">int64x1_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vqrshl_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">int8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vqrshl_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vqrshl_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x1_t</span> <span class="title">vqrshl_u64</span> <span class="params">(<span class="keyword">uint64x1_t</span> __a, <span class="keyword">int64x1_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vqrshlq_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a, <span class="keyword">int8x16_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vqrshlq_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">int16x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vqrshlq_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vqrshlq_s64</span> <span class="params">(<span class="keyword">int64x2_t</span> __a, <span class="keyword">int64x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vqrshlq_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a, <span class="keyword">int8x16_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vqrshlq_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">int16x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vqrshlq_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">int32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vqrshlq_u64</span> <span class="params">(<span class="keyword">uint64x2_t</span> __a, <span class="keyword">int64x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/****************************************Shifts by a constant***************************/</span></span><br><span class="line"><span class="comment">/*--1、Vector shift right by constant: vshr -&gt; ri = ai &gt;&gt; b;The results are truncated.</span></span><br><span class="line"><span class="comment">right shifts each element in a vector by an immediate value, </span></span><br><span class="line"><span class="comment">and places the results in the destination vector.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vshr_n_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vshr_n_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vshr_n_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x1_t</span> <span class="title">vshr_n_s64</span> <span class="params">(<span class="keyword">int64x1_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vshr_n_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vshr_n_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vshr_n_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x1_t</span> <span class="title">vshr_n_u64</span> <span class="params">(<span class="keyword">uint64x1_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vshrq_n_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vshrq_n_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vshrq_n_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vshrq_n_s64</span> <span class="params">(<span class="keyword">int64x2_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vshrq_n_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vshrq_n_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vshrq_n_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vshrq_n_u64</span> <span class="params">(<span class="keyword">uint64x2_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/*--2、Vector shift left by constant: vshl -&gt; ri = ai &amp;lt;&amp;lt; b;</span></span><br><span class="line"><span class="comment">left shifts each element in a vector by an immediate value, and places the results in the </span></span><br><span class="line"><span class="comment">destination vector. The bits shifted out of the left of each element are lost--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vshl_n_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vshl_n_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vshl_n_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x1_t</span> <span class="title">vshl_n_s64</span> <span class="params">(<span class="keyword">int64x1_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vshl_n_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vshl_n_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vshl_n_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x1_t</span> <span class="title">vshl_n_u64</span> <span class="params">(<span class="keyword">uint64x1_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vshlq_n_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vshlq_n_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vshlq_n_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vshlq_n_s64</span> <span class="params">(<span class="keyword">int64x2_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vshlq_n_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vshlq_n_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vshlq_n_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vshlq_n_u64</span> <span class="params">(<span class="keyword">uint64x2_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/*--3、Vector rounding shift right by constant: vrshr -&gt; ri = ai &gt;&gt; b;</span></span><br><span class="line"><span class="comment">right shifts each element in a vector by an immediate value, and places the results</span></span><br><span class="line"><span class="comment">in the destination vector. The shifted values are rounded.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vrshr_n_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vrshr_n_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vrshr_n_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x1_t</span> <span class="title">vrshr_n_s64</span> <span class="params">(<span class="keyword">int64x1_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vrshr_n_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vrshr_n_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vrshr_n_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x1_t</span> <span class="title">vrshr_n_u64</span> <span class="params">(<span class="keyword">uint64x1_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vrshrq_n_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vrshrq_n_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vrshrq_n_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vrshrq_n_s64</span> <span class="params">(<span class="keyword">int64x2_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vrshrq_n_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vrshrq_n_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vrshrq_n_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vrshrq_n_u64</span> <span class="params">(<span class="keyword">uint64x2_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/*--4、Vector shift right by constant and accumulate: vsra -&gt; ri = (ai &gt;&gt; c) + (bi &gt;&gt; c); </span></span><br><span class="line"><span class="comment">The results are truncated. right shifts each element in a vector by an immediate value, </span></span><br><span class="line"><span class="comment">and accumulates the results into the destination vector.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vsra_n_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a, <span class="keyword">int8x8_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vsra_n_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vsra_n_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x1_t</span> <span class="title">vsra_n_s64</span> <span class="params">(<span class="keyword">int64x1_t</span> __a, <span class="keyword">int64x1_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vsra_n_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">uint8x8_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vsra_n_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">uint16x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vsra_n_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">uint32x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x1_t</span> <span class="title">vsra_n_u64</span> <span class="params">(<span class="keyword">uint64x1_t</span> __a, <span class="keyword">uint64x1_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vsraq_n_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a, <span class="keyword">int8x16_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vsraq_n_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">int16x8_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vsraq_n_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int32x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vsraq_n_s64</span> <span class="params">(<span class="keyword">int64x2_t</span> __a, <span class="keyword">int64x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vsraq_n_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a, <span class="keyword">uint8x16_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vsraq_n_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">uint16x8_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vsraq_n_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">uint32x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vsraq_n_u64</span> <span class="params">(<span class="keyword">uint64x2_t</span> __a, <span class="keyword">uint64x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="comment">/*--5、Vector rounding shift right by constant and accumulate: </span></span><br><span class="line"><span class="comment">vrsra -&gt; ri = (ai &gt;&gt; c) + (bi &gt;&gt; c);</span></span><br><span class="line"><span class="comment">The results are rounded.right shifts each element in a vector by an immediate value, </span></span><br><span class="line"><span class="comment">and accumulates the rounded results into the destination vector.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vrsra_n_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a, <span class="keyword">int8x8_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vrsra_n_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vrsra_n_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x1_t</span> <span class="title">vrsra_n_s64</span> <span class="params">(<span class="keyword">int64x1_t</span> __a, <span class="keyword">int64x1_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vrsra_n_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">uint8x8_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vrsra_n_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">uint16x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vrsra_n_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">uint32x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x1_t</span> <span class="title">vrsra_n_u64</span> <span class="params">(<span class="keyword">uint64x1_t</span> __a, <span class="keyword">uint64x1_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vrsraq_n_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a, <span class="keyword">int8x16_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vrsraq_n_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">int16x8_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vrsraq_n_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int32x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vrsraq_n_s64</span> <span class="params">(<span class="keyword">int64x2_t</span> __a, <span class="keyword">int64x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vrsraq_n_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a, <span class="keyword">uint8x16_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vrsraq_n_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">uint16x8_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vrsraq_n_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">uint32x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vrsraq_n_u64</span> <span class="params">(<span class="keyword">uint64x2_t</span> __a, <span class="keyword">uint64x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="comment">/*--6、Vector saturating shift left by constant: vqshl -&gt; ri = sat(ai &amp;lt;&amp;lt; b); </span></span><br><span class="line"><span class="comment">left shifts each element in a vector of integers by an immediate value, and places the </span></span><br><span class="line"><span class="comment">results in the destination vector,and the sticky QC flag is set if saturation occurs.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vqshl_n_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vqshl_n_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vqshl_n_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x1_t</span> <span class="title">vqshl_n_s64</span> <span class="params">(<span class="keyword">int64x1_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vqshl_n_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vqshl_n_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vqshl_n_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x1_t</span> <span class="title">vqshl_n_u64</span> <span class="params">(<span class="keyword">uint64x1_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vqshlq_n_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vqshlq_n_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vqshlq_n_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vqshlq_n_s64</span> <span class="params">(<span class="keyword">int64x2_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vqshlq_n_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vqshlq_n_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vqshlq_n_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vqshlq_n_u64</span> <span class="params">(<span class="keyword">uint64x2_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/*--7、Vector signed-&gt;unsigned saturating shift left by constant: vqshlu -&gt; ri = ai &amp;lt;&amp;lt; b; </span></span><br><span class="line"><span class="comment">left shifts each element in a vector of integers by an immediate value, places the </span></span><br><span class="line"><span class="comment">results in the destination vector, the sticky QC flag is set if saturation occurs, </span></span><br><span class="line"><span class="comment">and indicates that the results are unsigned even though the operands are signed.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vqshlu_n_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vqshlu_n_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vqshlu_n_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x1_t</span> <span class="title">vqshlu_n_s64</span> <span class="params">(<span class="keyword">int64x1_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vqshluq_n_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vqshluq_n_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vqshluq_n_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vqshluq_n_s64</span> <span class="params">(<span class="keyword">int64x2_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/*--8、Vector narrowing shift right by constant: vshrn -&gt; ri = ai &gt;&gt; b;</span></span><br><span class="line"><span class="comment">The results are truncated.right shifts each element in the input vector by an </span></span><br><span class="line"><span class="comment">immediate value. It then narrows the result by storing only the least significant</span></span><br><span class="line"><span class="comment">half of each element into the destination vector.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vshrn_n_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vshrn_n_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vshrn_n_s64</span> <span class="params">(<span class="keyword">int64x2_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vshrn_n_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vshrn_n_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vshrn_n_u64</span> <span class="params">(<span class="keyword">uint64x2_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/*--9、Vector signed-&gt;unsigned narrowing saturating shift right by constant: </span></span><br><span class="line"><span class="comment">vqshrun -&gt; ri = ai &gt;&gt; b; </span></span><br><span class="line"><span class="comment">Results are truncated. right shifts each element in a quadword vector of integers by an</span></span><br><span class="line"><span class="comment">immediate value, and places the results in a doubleword vector. The results are unsigned, </span></span><br><span class="line"><span class="comment">although the operands are signed. The sticky QC flag is set if saturation occurs.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vqshrun_n_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vqshrun_n_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vqshrun_n_s64</span> <span class="params">(<span class="keyword">int64x2_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/*--10、Vector signed-&gt;unsigned rounding narrowing saturating shift right by constant: </span></span><br><span class="line"><span class="comment">vqrshrun -&gt; ri = ai &gt;&gt; b; Results are rounded. right shifts each element in a quadword </span></span><br><span class="line"><span class="comment">vector of integers by an immediate value, and places the rounded results in a doubleword </span></span><br><span class="line"><span class="comment">vector. The results are unsigned, although the operands are signed.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vqrshrun_n_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vqrshrun_n_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vqrshrun_n_s64</span> <span class="params">(<span class="keyword">int64x2_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/*--11、Vector narrowing saturating shift right by constant: vqshrn -&gt; ri = ai &gt;&gt; b; </span></span><br><span class="line"><span class="comment">Results are truncated. right shifts each element in a quadword vector of integers by an </span></span><br><span class="line"><span class="comment">immediate value, and places the results in a doubleword vector, </span></span><br><span class="line"><span class="comment">and the sticky QC flag is set if saturation occurs.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vqshrn_n_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vqshrn_n_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vqshrn_n_s64</span> <span class="params">(<span class="keyword">int64x2_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vqshrn_n_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vqshrn_n_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vqshrn_n_u64</span> <span class="params">(<span class="keyword">uint64x2_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/*--12、Vector rounding narrowing shift right by constant: vrshrn -&gt; ri = ai &gt;&gt; b; </span></span><br><span class="line"><span class="comment">The results are rounded. right shifts each element in a vector by an immediate value,</span></span><br><span class="line"><span class="comment">and places the rounded,narrowed results in the destination vector.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vrshrn_n_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vrshrn_n_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vrshrn_n_s64</span> <span class="params">(<span class="keyword">int64x2_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vrshrn_n_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vrshrn_n_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vrshrn_n_u64</span> <span class="params">(<span class="keyword">uint64x2_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/*--13、Vector rounding narrowing saturating shift right by constant:</span></span><br><span class="line"><span class="comment">vqrshrn -&gt; ri = ai &gt;&gt; b;</span></span><br><span class="line"><span class="comment">Results are rounded. right shifts each element in a quadword vector of integers by an </span></span><br><span class="line"><span class="comment">immediate value,and places the rounded,narrowed results in a doubleword vector. </span></span><br><span class="line"><span class="comment">The sticky QC flag is set if saturation occurs.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vqrshrn_n_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vqrshrn_n_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vqrshrn_n_s64</span> <span class="params">(<span class="keyword">int64x2_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vqrshrn_n_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vqrshrn_n_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vqrshrn_n_u64</span> <span class="params">(<span class="keyword">uint64x2_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/*--14、Vector widening shift left by constant: vshll -&gt; ri = ai &amp;lt;&amp;lt; b; </span></span><br><span class="line"><span class="comment">left shifts each element in a vector of integers by an immediate value, </span></span><br><span class="line"><span class="comment">and place the results in the destination vector. Bits shifted out of the left of each</span></span><br><span class="line"><span class="comment">element are lost and values are sign extended or zero extended.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vshll_n_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vshll_n_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vshll_n_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vshll_n_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vshll_n_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vshll_n_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/********************************************Shifts with insert*************************/</span></span><br><span class="line"><span class="comment">/*--1、Vector shift right and insert: vsri -&gt; ; The two most significant bits in the </span></span><br><span class="line"><span class="comment">destination vector are unchanged. right shifts each element in the second input vector </span></span><br><span class="line"><span class="comment">by an immediate value, and inserts the results in the destination vector. It does not </span></span><br><span class="line"><span class="comment">affect the highest n significant bits of the elements in the destination register.</span></span><br><span class="line"><span class="comment">Bits shifted out of the right of each element are lost.The first input vector holds</span></span><br><span class="line"><span class="comment">the elements of the destination vector before the operation is performed.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vsri_n_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a, <span class="keyword">int8x8_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vsri_n_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vsri_n_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x1_t</span> <span class="title">vsri_n_s64</span> <span class="params">(<span class="keyword">int64x1_t</span> __a, <span class="keyword">int64x1_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vsri_n_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">uint8x8_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vsri_n_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">uint16x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vsri_n_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">uint32x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x1_t</span> <span class="title">vsri_n_u64</span> <span class="params">(<span class="keyword">uint64x1_t</span> __a, <span class="keyword">uint64x1_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x8_t</span> <span class="title">vsri_n_p8</span> <span class="params">(<span class="keyword">poly8x8_t</span> __a, <span class="keyword">poly8x8_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x4_t</span> <span class="title">vsri_n_p16</span> <span class="params">(<span class="keyword">poly16x4_t</span> __a, <span class="keyword">poly16x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vsriq_n_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a, <span class="keyword">int8x16_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vsriq_n_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">int16x8_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vsriq_n_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int32x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vsriq_n_s64</span> <span class="params">(<span class="keyword">int64x2_t</span> __a, <span class="keyword">int64x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vsriq_n_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a, <span class="keyword">uint8x16_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vsriq_n_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">uint16x8_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vsriq_n_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">uint32x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vsriq_n_u64</span> <span class="params">(<span class="keyword">uint64x2_t</span> __a, <span class="keyword">uint64x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x16_t</span> <span class="title">vsriq_n_p8</span> <span class="params">(<span class="keyword">poly8x16_t</span> __a, <span class="keyword">poly8x16_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x8_t</span> <span class="title">vsriq_n_p16</span> <span class="params">(<span class="keyword">poly16x8_t</span> __a, <span class="keyword">poly16x8_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="comment">/*--2、Vector shift left and insert: vsli -&gt;; The least significant bit in each element</span></span><br><span class="line"><span class="comment">in the destination vector is unchanged. left shifts each element in the second input </span></span><br><span class="line"><span class="comment">vector by an immediate value, and inserts the results in the destination vector.</span></span><br><span class="line"><span class="comment">It does not affect the lowest n significant bits of the elements in the destination </span></span><br><span class="line"><span class="comment">register. Bits shifted out of the left of each element are lost. The first input vector</span></span><br><span class="line"><span class="comment">holds the elements of the destination vector before the operation is performed.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vsli_n_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a, <span class="keyword">int8x8_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vsli_n_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vsli_n_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x1_t</span> <span class="title">vsli_n_s64</span> <span class="params">(<span class="keyword">int64x1_t</span> __a, <span class="keyword">int64x1_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vsli_n_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">uint8x8_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vsli_n_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">uint16x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vsli_n_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">uint32x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x1_t</span> <span class="title">vsli_n_u64</span> <span class="params">(<span class="keyword">uint64x1_t</span> __a, <span class="keyword">uint64x1_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x8_t</span> <span class="title">vsli_n_p8</span> <span class="params">(<span class="keyword">poly8x8_t</span> __a, <span class="keyword">poly8x8_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x4_t</span> <span class="title">vsli_n_p16</span> <span class="params">(<span class="keyword">poly16x4_t</span> __a, <span class="keyword">poly16x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vsliq_n_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a, <span class="keyword">int8x16_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vsliq_n_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">int16x8_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vsliq_n_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int32x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vsliq_n_s64</span> <span class="params">(<span class="keyword">int64x2_t</span> __a, <span class="keyword">int64x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vsliq_n_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a, <span class="keyword">uint8x16_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vsliq_n_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">uint16x8_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vsliq_n_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">uint32x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vsliq_n_u64</span> <span class="params">(<span class="keyword">uint64x2_t</span> __a, <span class="keyword">uint64x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x16_t</span> <span class="title">vsliq_n_p8</span> <span class="params">(<span class="keyword">poly8x16_t</span> __a, <span class="keyword">poly8x16_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x8_t</span> <span class="title">vsliq_n_p16</span> <span class="params">(<span class="keyword">poly16x8_t</span> __a, <span class="keyword">poly16x8_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="comment">/*****************************************Absolute value********************************/</span></span><br><span class="line"><span class="comment">/*--1、Absolute(正常指令): vabs -&gt; ri = |ai|;</span></span><br><span class="line"><span class="comment">returns the absolute value of each element in a vector.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vabs_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a)</span></span>;<span class="comment">//_mm_abs_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vabs_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a)</span></span>;<span class="comment">//_mm_abs_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vabs_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a)</span></span>;<span class="comment">//_mm_abs_epi32</span></span><br><span class="line"><span class="function"><span class="keyword">float32x2_t</span> <span class="title">vabs_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vabsq_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a)</span></span>;<span class="comment">//_mm_abs_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vabsq_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a)</span></span>;<span class="comment">//_mm_abs_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vabsq_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a)</span></span>;<span class="comment">//_mm_abs_epi32</span></span><br><span class="line"><span class="function"><span class="keyword">float32x4_t</span> <span class="title">vabsq_f32</span> <span class="params">(<span class="keyword">float32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="comment">/*--2、Saturating absolute(饱和指令): vqabs -&gt; ri = sat(|ai|);</span></span><br><span class="line"><span class="comment">returns the absolute value of each element in a vector. If any of the results overflow,</span></span><br><span class="line"><span class="comment">they are saturated and the sticky QC flag is set.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vqabs_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vqabs_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vqabs_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vqabsq_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vqabsq_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vqabsq_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="comment">/***************************************************Negation****************************/</span></span><br><span class="line"><span class="comment">/*--1、Negate(正常指令): vneg -&gt; ri = -ai; negates each element in a vector.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vneg_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vneg_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vneg_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x2_t</span> <span class="title">vneg_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vnegq_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vnegq_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vnegq_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x4_t</span> <span class="title">vnegq_f32</span> <span class="params">(<span class="keyword">float32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="comment">/*--2、Saturating Negate: vqneg -&gt; ri = sat(-ai);</span></span><br><span class="line"><span class="comment">negates each element in a vector. If any of the results overflow, </span></span><br><span class="line"><span class="comment">they are saturated and the sticky QC flag is set.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vqneg_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vqneg_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vqneg_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vqnegq_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vqnegq_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vqnegq_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="comment">/********************************************Logical operations*************************/</span></span><br><span class="line"><span class="comment">/*--1、Bitwise not(正常指令): vmvn -&gt; ri = ~ai; </span></span><br><span class="line"><span class="comment">performs a bitwise inversion of each element from the input vector.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vmvn_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vmvn_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vmvn_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vmvn_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vmvn_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vmvn_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x8_t</span> <span class="title">vmvn_p8</span> <span class="params">(<span class="keyword">poly8x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vmvnq_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vmvnq_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vmvnq_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vmvnq_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vmvnq_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vmvnq_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x16_t</span> <span class="title">vmvnq_p8</span> <span class="params">(<span class="keyword">poly8x16_t</span> __a)</span></span>;</span><br><span class="line"><span class="comment">/*--2、Bitwise and(正常指令): vand -&gt; ri = ai &amp;amp; bi; performs a bitwise AND between </span></span><br><span class="line"><span class="comment">corresponding elements of the input vectors.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vand_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a, <span class="keyword">int8x8_t</span> __b)</span></span>;<span class="comment">//_mm_and_si128</span></span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vand_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b)</span></span>;<span class="comment">//_mm_and_si128</span></span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vand_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b)</span></span>;<span class="comment">//_mm_and_si128</span></span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vand_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">uint8x8_t</span> __b)</span></span>;<span class="comment">//_mm_and_si128</span></span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vand_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">uint16x4_t</span> __b)</span></span>;<span class="comment">//_mm_and_si128</span></span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vand_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">uint32x2_t</span> __b)</span></span>;<span class="comment">//_mm_and_si128</span></span><br><span class="line"><span class="function"><span class="keyword">int64x1_t</span> <span class="title">vand_s64</span> <span class="params">(<span class="keyword">int64x1_t</span> __a, <span class="keyword">int64x1_t</span> __b)</span></span>;<span class="comment">//_mm_and_si128</span></span><br><span class="line"><span class="function"><span class="keyword">uint64x1_t</span> <span class="title">vand_u64</span> <span class="params">(<span class="keyword">uint64x1_t</span> __a, <span class="keyword">uint64x1_t</span> __b)</span></span>;<span class="comment">//_mm_and_si128</span></span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vandq_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a, <span class="keyword">int8x16_t</span> __b)</span></span>;<span class="comment">//_mm_and_si128</span></span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vandq_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">int16x8_t</span> __b)</span></span>;<span class="comment">//_mm_and_si128</span></span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vandq_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int32x4_t</span> __b)</span></span>;<span class="comment">//_mm_and_si128</span></span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vandq_s64</span> <span class="params">(<span class="keyword">int64x2_t</span> __a, <span class="keyword">int64x2_t</span> __b)</span></span>;<span class="comment">//_mm_and_si128</span></span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vandq_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a, <span class="keyword">uint8x16_t</span> __b)</span></span>;<span class="comment">//_mm_and_si128</span></span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vandq_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">uint16x8_t</span> __b)</span></span>;<span class="comment">//_mm_and_si128</span></span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vandq_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">uint32x4_t</span> __b)</span></span>;<span class="comment">//_mm_and_si128</span></span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vandq_u64</span> <span class="params">(<span class="keyword">uint64x2_t</span> __a, <span class="keyword">uint64x2_t</span> __b)</span></span>;<span class="comment">//_mm_and_si128</span></span><br><span class="line"><span class="comment">/*--3、Bitwise or(正常指令): vorr -&gt; ri = ai | bi; performs a bitwise OR between</span></span><br><span class="line"><span class="comment">corresponding elements of the input vectors.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vorr_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a, <span class="keyword">int8x8_t</span> __b)</span></span>;<span class="comment">//_mm_or_si128</span></span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vorr_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b)</span></span>;<span class="comment">//_mm_or_si128</span></span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vorr_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b)</span></span>;<span class="comment">//_mm_or_si128</span></span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vorr_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">uint8x8_t</span> __b)</span></span>;<span class="comment">//_mm_or_si128</span></span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vorr_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">uint16x4_t</span> __b)</span></span>;<span class="comment">//_mm_or_si128</span></span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vorr_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">uint32x2_t</span> __b)</span></span>;<span class="comment">//_mm_or_si128</span></span><br><span class="line"><span class="function"><span class="keyword">int64x1_t</span> <span class="title">vorr_s64</span> <span class="params">(<span class="keyword">int64x1_t</span> __a, <span class="keyword">int64x1_t</span> __b)</span></span>;<span class="comment">//_mm_or_si128</span></span><br><span class="line"><span class="function"><span class="keyword">uint64x1_t</span> <span class="title">vorr_u64</span> <span class="params">(<span class="keyword">uint64x1_t</span> __a, <span class="keyword">uint64x1_t</span> __b)</span></span>;<span class="comment">//_mm_or_si128</span></span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vorrq_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a, <span class="keyword">int8x16_t</span> __b)</span></span>;<span class="comment">//_mm_or_si128</span></span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vorrq_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">int16x8_t</span> __b)</span></span>;<span class="comment">//_mm_or_si128</span></span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vorrq_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int32x4_t</span> __b)</span></span>;<span class="comment">//_mm_or_si128</span></span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vorrq_s64</span> <span class="params">(<span class="keyword">int64x2_t</span> __a, <span class="keyword">int64x2_t</span> __b)</span></span>;<span class="comment">//_mm_or_si128</span></span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vorrq_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a, <span class="keyword">uint8x16_t</span> __b)</span></span>;<span class="comment">//_mm_or_si128</span></span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vorrq_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">uint16x8_t</span> __b)</span></span>;<span class="comment">//_mm_or_si128</span></span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vorrq_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">uint32x4_t</span> __b)</span></span>;<span class="comment">//_mm_or_si128</span></span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vorrq_u64</span> <span class="params">(<span class="keyword">uint64x2_t</span> __a, <span class="keyword">uint64x2_t</span> __b)</span></span>;<span class="comment">//_mm_or_si128</span></span><br><span class="line"><span class="comment">/*--4、Bitwise exclusive or (EOR or XOR)(正常指令): veor -&gt; ri = ai ^ bi; </span></span><br><span class="line"><span class="comment">performs a bitwise exclusive-OR between corresponding elements of the input vectors.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">veor_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a, <span class="keyword">int8x8_t</span> __b)</span></span>;<span class="comment">//_mm_xor_si128</span></span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">veor_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b)</span></span>;<span class="comment">//_mm_xor_si128</span></span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">veor_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b)</span></span>;<span class="comment">//_mm_xor_si128</span></span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">veor_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">uint8x8_t</span> __b)</span></span>;<span class="comment">//_mm_xor_si128</span></span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">veor_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">uint16x4_t</span> __b)</span></span>;<span class="comment">//_mm_xor_si128</span></span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">veor_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">uint32x2_t</span> __b)</span></span>;<span class="comment">//_mm_xor_si128</span></span><br><span class="line"><span class="function"><span class="keyword">int64x1_t</span> <span class="title">veor_s64</span> <span class="params">(<span class="keyword">int64x1_t</span> __a, <span class="keyword">int64x1_t</span> __b)</span></span>;<span class="comment">//_mm_xor_si128</span></span><br><span class="line"><span class="function"><span class="keyword">uint64x1_t</span> <span class="title">veor_u64</span> <span class="params">(<span class="keyword">uint64x1_t</span> __a, <span class="keyword">uint64x1_t</span> __b)</span></span>;<span class="comment">//_mm_xor_si128</span></span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">veorq_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a, <span class="keyword">int8x16_t</span> __b)</span></span>;<span class="comment">//_mm_xor_si128</span></span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">veorq_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">int16x8_t</span> __b)</span></span>;<span class="comment">//_mm_xor_si128</span></span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">veorq_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int32x4_t</span> __b)</span></span>;<span class="comment">//_mm_xor_si128</span></span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">veorq_s64</span> <span class="params">(<span class="keyword">int64x2_t</span> __a, <span class="keyword">int64x2_t</span> __b)</span></span>;<span class="comment">//_mm_xor_si128</span></span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">veorq_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a, <span class="keyword">uint8x16_t</span> __b)</span></span>;<span class="comment">//_mm_xor_si128</span></span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">veorq_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">uint16x8_t</span> __b)</span></span>;<span class="comment">//_mm_xor_si128</span></span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">veorq_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">uint32x4_t</span> __b)</span></span>;<span class="comment">//_mm_xor_si128</span></span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">veorq_u64</span> <span class="params">(<span class="keyword">uint64x2_t</span> __a, <span class="keyword">uint64x2_t</span> __b)</span></span>;<span class="comment">//_mm_xor_si128</span></span><br><span class="line"><span class="comment">/*--5、Bit Clear(正常指令): vbic -&gt; ri = ai &amp;amp; ~bi;</span></span><br><span class="line"><span class="comment">VBIC (Vector Bitwise Clear) performs a bitwise logical AND complement operation between</span></span><br><span class="line"><span class="comment">values in two registers, and places the results in the destination register.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vbic_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a, <span class="keyword">int8x8_t</span> __b)</span></span>;<span class="comment">//_mm_andnot_si128</span></span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vbic_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b)</span></span>;<span class="comment">//_mm_andnot_si128</span></span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vbic_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b)</span></span>;<span class="comment">//_mm_andnot_si128</span></span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vbic_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">uint8x8_t</span> __b)</span></span>;<span class="comment">//_mm_andnot_si128</span></span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vbic_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">uint16x4_t</span> __b)</span></span>;<span class="comment">//_mm_andnot_si128</span></span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vbic_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">uint32x2_t</span> __b)</span></span>;<span class="comment">//_mm_andnot_si128</span></span><br><span class="line"><span class="function"><span class="keyword">int64x1_t</span> <span class="title">vbic_s64</span> <span class="params">(<span class="keyword">int64x1_t</span> __a, <span class="keyword">int64x1_t</span> __b)</span></span>;<span class="comment">//_mm_andnot_si128</span></span><br><span class="line"><span class="function"><span class="keyword">uint64x1_t</span> <span class="title">vbic_u64</span> <span class="params">(<span class="keyword">uint64x1_t</span> __a, <span class="keyword">uint64x1_t</span> __b)</span></span>;<span class="comment">//_mm_andnot_si128</span></span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vbicq_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a, <span class="keyword">int8x16_t</span> __b)</span></span>;<span class="comment">//_mm_andnot_si128</span></span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vbicq_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">int16x8_t</span> __b)</span></span>;<span class="comment">//_mm_andnot_si128</span></span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vbicq_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int32x4_t</span> __b)</span></span>;<span class="comment">//_mm_andnot_si128</span></span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vbicq_s64</span> <span class="params">(<span class="keyword">int64x2_t</span> __a, <span class="keyword">int64x2_t</span> __b)</span></span>;<span class="comment">//_mm_andnot_si128</span></span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vbicq_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a, <span class="keyword">uint8x16_t</span> __b)</span></span>;<span class="comment">//_mm_andnot_si128</span></span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vbicq_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">uint16x8_t</span> __b)</span></span>;<span class="comment">//_mm_andnot_si128</span></span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vbicq_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">uint32x4_t</span> __b)</span></span>;<span class="comment">//_mm_andnot_si128</span></span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vbicq_u64</span> <span class="params">(<span class="keyword">uint64x2_t</span> __a, <span class="keyword">uint64x2_t</span> __b)</span></span>;<span class="comment">//_mm_andnot_si128</span></span><br><span class="line"><span class="comment">/*--6、Bitwise OR complement(正常指令): vorn -&gt; ri = ai | (~bi); </span></span><br><span class="line"><span class="comment">performs a bitwise logical OR NOT operation </span></span><br><span class="line"><span class="comment">between values in two registers, and places the results in the destination register.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vorn_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a, <span class="keyword">int8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vorn_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vorn_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vorn_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">uint8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vorn_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">uint16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vorn_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">uint32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x1_t</span> <span class="title">vorn_s64</span> <span class="params">(<span class="keyword">int64x1_t</span> __a, <span class="keyword">int64x1_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x1_t</span> <span class="title">vorn_u64</span> <span class="params">(<span class="keyword">uint64x1_t</span> __a, <span class="keyword">uint64x1_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vornq_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a, <span class="keyword">int8x16_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vornq_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">int16x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vornq_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vornq_s64</span> <span class="params">(<span class="keyword">int64x2_t</span> __a, <span class="keyword">int64x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vornq_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a, <span class="keyword">uint8x16_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vornq_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">uint16x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vornq_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">uint32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vornq_u64</span> <span class="params">(<span class="keyword">uint64x2_t</span> __a, <span class="keyword">uint64x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/****************************************Count leading sign bits************************/</span></span><br><span class="line"><span class="comment">/*--正常指令, vcls -&gt; ; counts the number of consecutive bits, starting from the most </span></span><br><span class="line"><span class="comment">significant bit,that are the same as the most significant bit, in each element in a </span></span><br><span class="line"><span class="comment">vector, and places the count in the result vector.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vcls_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vcls_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vcls_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vclsq_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vclsq_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vclsq_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="comment">/*******************************************Count leading zeros*************************/</span></span><br><span class="line"><span class="comment">/*--正常指令, vclz -&gt; ; counts the number of consecutive zeros, starting from the most</span></span><br><span class="line"><span class="comment">significant bit, in each element in a vector, and places the count in result vector.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vclz_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vclz_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vclz_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vclz_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vclz_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vclz_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vclzq_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vclzq_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vclzq_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vclzq_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vclzq_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vclzq_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="comment">/*******************************************Count number of set bits********************/</span></span><br><span class="line"><span class="comment">/*--正常指令, vcnt -&gt; counts the number of bits that are one in each element in a vector, </span></span><br><span class="line"><span class="comment">and places the count in the result vector.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vcnt_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vcnt_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x8_t</span> <span class="title">vcnt_p8</span> <span class="params">(<span class="keyword">poly8x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vcntq_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vcntq_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x16_t</span> <span class="title">vcntq_p8</span> <span class="params">(<span class="keyword">poly8x16_t</span> __a)</span></span>;</span><br><span class="line"><span class="comment">/*****************************************Reciprocal estimate***************************/</span></span><br><span class="line"><span class="comment">/*--正常指令, vrecpe -&gt; ; finds an approximate reciprocal of each element in a vector, </span></span><br><span class="line"><span class="comment">and places it in the result vector.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">float32x2_t</span> <span class="title">vrecpe_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vrecpe_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x4_t</span> <span class="title">vrecpeq_f32</span> <span class="params">(<span class="keyword">float32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vrecpeq_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="comment">/****************************************Reciprocal square-root estimate****************/</span></span><br><span class="line"><span class="comment">/*--正常指令, vrsqrte -&gt; ; finds an approximate reciprocal square root of each element</span></span><br><span class="line"><span class="comment">in a vector, and places it in the return vector.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">float32x2_t</span> <span class="title">vrsqrte_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vrsqrte_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x4_t</span> <span class="title">vrsqrteq_f32</span> <span class="params">(<span class="keyword">float32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vrsqrteq_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="comment">/*******************************************Get lanes from a vector*********************/</span></span><br><span class="line"><span class="comment">/*--vmov -&gt; r = a[b]; returns the value from the specified lane of a vector.</span></span><br><span class="line"><span class="comment">Extract lanes from a vector and put into a register. </span></span><br><span class="line"><span class="comment">These intrinsics extract a single lane (element) from a vector.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8_t</span> <span class="title">vget_lane_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;<span class="comment">//_mm_extract_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">int16_t</span> <span class="title">vget_lane_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;<span class="comment">//_mm_extract_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">int32_t</span> <span class="title">vget_lane_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;<span class="comment">//_mm_extract_epi32</span></span><br><span class="line"><span class="function"><span class="keyword">float32_t</span> <span class="title">vget_lane_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8_t</span> <span class="title">vget_lane_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;<span class="comment">//_mm_extract_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">uint16_t</span> <span class="title">vget_lane_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;<span class="comment">//_mm_extract_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">uint32_t</span> <span class="title">vget_lane_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;<span class="comment">//_mm_extract_epi32</span></span><br><span class="line"><span class="function"><span class="keyword">poly8_t</span> <span class="title">vget_lane_p8</span> <span class="params">(<span class="keyword">poly8x8_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;<span class="comment">//_mm_extract_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">poly16_t</span> <span class="title">vget_lane_p16</span> <span class="params">(<span class="keyword">poly16x4_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;<span class="comment">//_mm_extract_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">int64_t</span> <span class="title">vget_lane_s64</span> <span class="params">(<span class="keyword">int64x1_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;<span class="comment">//_mm_extract_epi64</span></span><br><span class="line"><span class="function"><span class="keyword">uint64_t</span> <span class="title">vget_lane_u64</span> <span class="params">(<span class="keyword">uint64x1_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;<span class="comment">//_mm_extract_epi64</span></span><br><span class="line"><span class="function"><span class="keyword">int8_t</span> <span class="title">vgetq_lane_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;<span class="comment">//_mm_extract_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">int16_t</span> <span class="title">vgetq_lane_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;<span class="comment">//_mm_extract_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">int32_t</span> <span class="title">vgetq_lane_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;<span class="comment">//_mm_extract_epi32</span></span><br><span class="line"><span class="function"><span class="keyword">float32_t</span> <span class="title">vgetq_lane_f32</span> <span class="params">(<span class="keyword">float32x4_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8_t</span> <span class="title">vgetq_lane_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;<span class="comment">//_mm_extract_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">uint16_t</span> <span class="title">vgetq_lane_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;<span class="comment">//_mm_extract_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">uint32_t</span> <span class="title">vgetq_lane_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;<span class="comment">//_mm_extract_epi32</span></span><br><span class="line"><span class="function"><span class="keyword">poly8_t</span> <span class="title">vgetq_lane_p8</span> <span class="params">(<span class="keyword">poly8x16_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;<span class="comment">//_mm_extract_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">poly16_t</span> <span class="title">vgetq_lane_p16</span> <span class="params">(<span class="keyword">poly16x8_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;<span class="comment">//_mm_extract_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">int64_t</span> <span class="title">vgetq_lane_s64</span> <span class="params">(<span class="keyword">int64x2_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;<span class="comment">//_mm_extract_epi64</span></span><br><span class="line"><span class="function"><span class="keyword">uint64_t</span> <span class="title">vgetq_lane_u64</span> <span class="params">(<span class="keyword">uint64x2_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;<span class="comment">//_mm_extract_epi64</span></span><br><span class="line"><span class="comment">/*********************************************Set lanes in a vector********************/</span></span><br><span class="line"><span class="comment">/*--vmov -&gt; ; sets the value of the specified lane of a vector. It returns the vector </span></span><br><span class="line"><span class="comment">with the new value.Load a single lane of a vector from a literal. These intrinsics set </span></span><br><span class="line"><span class="comment">a single lane (element) within a vector.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vset_lane_s8</span> <span class="params">(<span class="keyword">int8_t</span> __a, <span class="keyword">int8x8_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vset_lane_s16</span> <span class="params">(<span class="keyword">int16_t</span> __a, <span class="keyword">int16x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vset_lane_s32</span> <span class="params">(<span class="keyword">int32_t</span> __a, <span class="keyword">int32x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x2_t</span> <span class="title">vset_lane_f32</span> <span class="params">(<span class="keyword">float32_t</span> __a, <span class="keyword">float32x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vset_lane_u8</span> <span class="params">(<span class="keyword">uint8_t</span> __a, <span class="keyword">uint8x8_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vset_lane_u16</span> <span class="params">(<span class="keyword">uint16_t</span> __a, <span class="keyword">uint16x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vset_lane_u32</span> <span class="params">(<span class="keyword">uint32_t</span> __a, <span class="keyword">uint32x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x8_t</span> <span class="title">vset_lane_p8</span> <span class="params">(<span class="keyword">poly8_t</span> __a, <span class="keyword">poly8x8_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x4_t</span> <span class="title">vset_lane_p16</span> <span class="params">(<span class="keyword">poly16_t</span> __a, <span class="keyword">poly16x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x1_t</span> <span class="title">vset_lane_s64</span> <span class="params">(<span class="keyword">int64_t</span> __a, <span class="keyword">int64x1_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x1_t</span> <span class="title">vset_lane_u64</span> <span class="params">(<span class="keyword">uint64_t</span> __a, <span class="keyword">uint64x1_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vsetq_lane_s8</span> <span class="params">(<span class="keyword">int8_t</span> __a, <span class="keyword">int8x16_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vsetq_lane_s16</span> <span class="params">(<span class="keyword">int16_t</span> __a, <span class="keyword">int16x8_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vsetq_lane_s32</span> <span class="params">(<span class="keyword">int32_t</span> __a, <span class="keyword">int32x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x4_t</span> <span class="title">vsetq_lane_f32</span> <span class="params">(<span class="keyword">float32_t</span> __a, <span class="keyword">float32x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vsetq_lane_u8</span> <span class="params">(<span class="keyword">uint8_t</span> __a, <span class="keyword">uint8x16_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vsetq_lane_u16</span> <span class="params">(<span class="keyword">uint16_t</span> __a, <span class="keyword">uint16x8_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vsetq_lane_u32</span> <span class="params">(<span class="keyword">uint32_t</span> __a, <span class="keyword">uint32x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x16_t</span> <span class="title">vsetq_lane_p8</span> <span class="params">(<span class="keyword">poly8_t</span> __a, <span class="keyword">poly8x16_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x8_t</span> <span class="title">vsetq_lane_p16</span> <span class="params">(<span class="keyword">poly16_t</span> __a, <span class="keyword">poly16x8_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vsetq_lane_s64</span> <span class="params">(<span class="keyword">int64_t</span> __a, <span class="keyword">int64x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vsetq_lane_u64</span> <span class="params">(<span class="keyword">uint64_t</span> __a, <span class="keyword">uint64x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="comment">/****************************************Create vector from literal bit pattern*********/</span></span><br><span class="line"><span class="comment">/*--vmov -&gt; ; creates a vector from a 64-bit pattern. </span></span><br><span class="line"><span class="comment">Initialize a vector from a literal bit pattern.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vcreate_s8</span> <span class="params">(<span class="keyword">uint64_t</span> __a)</span></span>;<span class="comment">//_mm_loadl_epi64</span></span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vcreate_s16</span> <span class="params">(<span class="keyword">uint64_t</span> __a)</span></span>;<span class="comment">//_mm_loadl_epi64</span></span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vcreate_s32</span> <span class="params">(<span class="keyword">uint64_t</span> __a)</span></span>;<span class="comment">//_mm_loadl_epi64</span></span><br><span class="line"><span class="function"><span class="keyword">int64x1_t</span> <span class="title">vcreate_s64</span> <span class="params">(<span class="keyword">uint64_t</span> __a)</span></span>;<span class="comment">//_mm_loadl_epi64</span></span><br><span class="line"><span class="function"><span class="keyword">float32x2_t</span> <span class="title">vcreate_f32</span> <span class="params">(<span class="keyword">uint64_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vcreate_u8</span> <span class="params">(<span class="keyword">uint64_t</span> __a)</span></span>;<span class="comment">//_mm_loadl_epi64</span></span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vcreate_u16</span> <span class="params">(<span class="keyword">uint64_t</span> __a)</span></span>;<span class="comment">//_mm_loadl_epi64</span></span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vcreate_u32</span> <span class="params">(<span class="keyword">uint64_t</span> __a)</span></span>;<span class="comment">//_mm_loadl_epi64</span></span><br><span class="line"><span class="function"><span class="keyword">uint64x1_t</span> <span class="title">vcreate_u64</span> <span class="params">(<span class="keyword">uint64_t</span> __a)</span></span>;<span class="comment">//_mm_loadl_epi64</span></span><br><span class="line"><span class="function"><span class="keyword">poly8x8_t</span> <span class="title">vcreate_p8</span> <span class="params">(<span class="keyword">uint64_t</span> __a)</span></span>;<span class="comment">//_mm_loadl_epi64</span></span><br><span class="line"><span class="function"><span class="keyword">poly16x4_t</span> <span class="title">vcreate_p16</span> <span class="params">(<span class="keyword">uint64_t</span> __a)</span></span>;<span class="comment">//_mm_loadl_epi64</span></span><br><span class="line"><span class="comment">/*****************************************Set all lanes to the same value***************/</span></span><br><span class="line"><span class="comment">/*--1、Load all lanes of vector to the same literal value: vdup/vmov -&gt; ri = a; </span></span><br><span class="line"><span class="comment">duplicates a scalar into every element of the destination vector. </span></span><br><span class="line"><span class="comment">Load all lanes of vector to the same literal value--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vdup_n_s8</span> <span class="params">(<span class="keyword">int8_t</span> __a)</span></span>;<span class="comment">//_mm_set1_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vdup_n_s16</span> <span class="params">(<span class="keyword">int16_t</span> __a)</span></span>;<span class="comment">//_mm_set1_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vdup_n_s32</span> <span class="params">(<span class="keyword">int32_t</span> __a)</span></span>;<span class="comment">//_mm_set1_epi32</span></span><br><span class="line"><span class="function"><span class="keyword">float32x2_t</span> <span class="title">vdup_n_f32</span> <span class="params">(<span class="keyword">float32_t</span> __a)</span></span>;<span class="comment">//_mm_set1_ps</span></span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vdup_n_u8</span> <span class="params">(<span class="keyword">uint8_t</span> __a)</span></span>;<span class="comment">//_mm_set1_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vdup_n_u16</span> <span class="params">(<span class="keyword">uint16_t</span> __a)</span></span>;<span class="comment">//_mm_set1_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vdup_n_u32</span> <span class="params">(<span class="keyword">uint32_t</span> __a)</span></span>;<span class="comment">//_mm_set1_epi32</span></span><br><span class="line"><span class="function"><span class="keyword">poly8x8_t</span> <span class="title">vdup_n_p8</span> <span class="params">(<span class="keyword">poly8_t</span> __a)</span></span>;<span class="comment">//_mm_set1_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">poly16x4_t</span> <span class="title">vdup_n_p16</span> <span class="params">(<span class="keyword">poly16_t</span> __a)</span></span>;<span class="comment">//_mm_set1_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">int64x1_t</span> <span class="title">vdup_n_s64</span> <span class="params">(<span class="keyword">int64_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x1_t</span> <span class="title">vdup_n_u64</span> <span class="params">(<span class="keyword">uint64_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vdupq_n_s8</span> <span class="params">(<span class="keyword">int8_t</span> __a)</span></span>;<span class="comment">//_mm_set1_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vdupq_n_s16</span> <span class="params">(<span class="keyword">int16_t</span> __a)</span></span>;<span class="comment">//_mm_set1_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vdupq_n_s32</span> <span class="params">(<span class="keyword">int32_t</span> __a)</span></span>;<span class="comment">//_mm_set1_epi32</span></span><br><span class="line"><span class="function"><span class="keyword">float32x4_t</span> <span class="title">vdupq_n_f32</span> <span class="params">(<span class="keyword">float32_t</span> __a)</span></span>;<span class="comment">//_mm_set1_ps</span></span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vdupq_n_u8</span> <span class="params">(<span class="keyword">uint8_t</span> __a)</span></span>;<span class="comment">//_mm_set1_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vdupq_n_u16</span> <span class="params">(<span class="keyword">uint16_t</span> __a)</span></span>;<span class="comment">//_mm_set1_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vdupq_n_u32</span> <span class="params">(<span class="keyword">uint32_t</span> __a)</span></span>;<span class="comment">//_mm_set1_epi32</span></span><br><span class="line"><span class="function"><span class="keyword">poly8x16_t</span> <span class="title">vdupq_n_p8</span> <span class="params">(<span class="keyword">poly8_t</span> __a)</span></span>;<span class="comment">//_mm_set1_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">poly16x8_t</span> <span class="title">vdupq_n_p16</span> <span class="params">(<span class="keyword">poly16_t</span> __a)</span></span>;<span class="comment">//_mm_set1_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vdupq_n_s64</span> <span class="params">(<span class="keyword">int64_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vdupq_n_u64</span> <span class="params">(<span class="keyword">uint64_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vmov_n_s8</span> <span class="params">(<span class="keyword">int8_t</span> __a)</span></span>;<span class="comment">//_mm_set1_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vmov_n_s16</span> <span class="params">(<span class="keyword">int16_t</span> __a)</span></span>;<span class="comment">//_mm_set1_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vmov_n_s32</span> <span class="params">(<span class="keyword">int32_t</span> __a)</span></span>;<span class="comment">//_mm_set1_epi32</span></span><br><span class="line"><span class="function"><span class="keyword">float32x2_t</span> <span class="title">vmov_n_f32</span> <span class="params">(<span class="keyword">float32_t</span> __a)</span></span>;<span class="comment">//_mm_set1_ps</span></span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vmov_n_u8</span> <span class="params">(<span class="keyword">uint8_t</span> __a)</span></span>;<span class="comment">//_mm_set1_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vmov_n_u16</span> <span class="params">(<span class="keyword">uint16_t</span> __a)</span></span>;<span class="comment">//_mm_set1_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vmov_n_u32</span> <span class="params">(<span class="keyword">uint32_t</span> __a)</span></span>;<span class="comment">//_mm_set1_epi32</span></span><br><span class="line"><span class="function"><span class="keyword">poly8x8_t</span> <span class="title">vmov_n_p8</span> <span class="params">(<span class="keyword">poly8_t</span> __a)</span></span>;<span class="comment">//_mm_set1_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">poly16x4_t</span> <span class="title">vmov_n_p16</span> <span class="params">(<span class="keyword">poly16_t</span> __a)</span></span>;<span class="comment">//_mm_set1_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">int64x1_t</span> <span class="title">vmov_n_s64</span> <span class="params">(<span class="keyword">int64_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x1_t</span> <span class="title">vmov_n_u64</span> <span class="params">(<span class="keyword">uint64_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vmovq_n_s8</span> <span class="params">(<span class="keyword">int8_t</span> __a)</span></span>;<span class="comment">//_mm_set1_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vmovq_n_s16</span> <span class="params">(<span class="keyword">int16_t</span> __a)</span></span>;<span class="comment">//_mm_set1_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vmovq_n_s32</span> <span class="params">(<span class="keyword">int32_t</span> __a)</span></span>;<span class="comment">//_mm_set1_epi32</span></span><br><span class="line"><span class="function"><span class="keyword">float32x4_t</span> <span class="title">vmovq_n_f32</span> <span class="params">(<span class="keyword">float32_t</span> __a)</span></span>;<span class="comment">//_mm_set1_ps</span></span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vmovq_n_u8</span> <span class="params">(<span class="keyword">uint8_t</span> __a)</span></span>;<span class="comment">//_mm_set1_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vmovq_n_u16</span> <span class="params">(<span class="keyword">uint16_t</span> __a)</span></span>;<span class="comment">//_mm_set1_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vmovq_n_u32</span> <span class="params">(<span class="keyword">uint32_t</span> __a)</span></span>;<span class="comment">//_mm_set1_epi32</span></span><br><span class="line"><span class="function"><span class="keyword">poly8x16_t</span> <span class="title">vmovq_n_p8</span> <span class="params">(<span class="keyword">poly8_t</span> __a)</span></span>;<span class="comment">//_mm_set1_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">poly16x8_t</span> <span class="title">vmovq_n_p16</span> <span class="params">(<span class="keyword">poly16_t</span> __a)</span></span>;<span class="comment">//_mm_set1_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vmovq_n_s64</span> <span class="params">(<span class="keyword">int64_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vmovq_n_u64</span> <span class="params">(<span class="keyword">uint64_t</span> __a)</span></span>;</span><br><span class="line"><span class="comment">/*--2、Load all lanes of the vector to the value of a lane of a vector: </span></span><br><span class="line"><span class="comment">vdup/vmov -&gt; ri = a[b];</span></span><br><span class="line"><span class="comment">duplicates a scalar into every element of the destination vector.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vdup_lane_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vdup_lane_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vdup_lane_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x2_t</span> <span class="title">vdup_lane_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vdup_lane_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vdup_lane_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vdup_lane_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x8_t</span> <span class="title">vdup_lane_p8</span> <span class="params">(<span class="keyword">poly8x8_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x4_t</span> <span class="title">vdup_lane_p16</span> <span class="params">(<span class="keyword">poly16x4_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x1_t</span> <span class="title">vdup_lane_s64</span> <span class="params">(<span class="keyword">int64x1_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x1_t</span> <span class="title">vdup_lane_u64</span> <span class="params">(<span class="keyword">uint64x1_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vdupq_lane_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vdupq_lane_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vdupq_lane_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x4_t</span> <span class="title">vdupq_lane_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vdupq_lane_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vdupq_lane_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vdupq_lane_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x16_t</span> <span class="title">vdupq_lane_p8</span> <span class="params">(<span class="keyword">poly8x8_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x8_t</span> <span class="title">vdupq_lane_p16</span> <span class="params">(<span class="keyword">poly16x4_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vdupq_lane_s64</span> <span class="params">(<span class="keyword">int64x1_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;<span class="comment">//_mm_unpacklo_epi64</span></span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vdupq_lane_u64</span> <span class="params">(<span class="keyword">uint64x1_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;<span class="comment">//_mm_unpacklo_epi64</span></span><br><span class="line"><span class="comment">/********************************************Combining vectors**************************/</span></span><br><span class="line"><span class="comment">/*--长指令, -&gt; r0 = a0, ..., r7 = a7, r8 = b0, ..., r15 = b7;</span></span><br><span class="line"><span class="comment">joins two 64-bit vectors into a single 128-bit vector. </span></span><br><span class="line"><span class="comment">The output vector contains twice the number of elements as each input vector. </span></span><br><span class="line"><span class="comment">The lower half of the output vector contains the elements of the first input vector.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vcombine_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a, <span class="keyword">int8x8_t</span> __b)</span></span>;<span class="comment">//_mm_unpacklo_epi64</span></span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vcombine_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b)</span></span>;<span class="comment">//_mm_unpacklo_epi64</span></span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vcombine_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b)</span></span>;<span class="comment">//_mm_unpacklo_epi64</span></span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vcombine_s64</span> <span class="params">(<span class="keyword">int64x1_t</span> __a, <span class="keyword">int64x1_t</span> __b)</span></span>;<span class="comment">//_mm_unpacklo_epi64</span></span><br><span class="line"><span class="function"><span class="keyword">float32x4_t</span> <span class="title">vcombine_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a, <span class="keyword">float32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vcombine_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">uint8x8_t</span> __b)</span></span>;<span class="comment">//_mm_unpacklo_epi64</span></span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vcombine_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">uint16x4_t</span> __b)</span></span>;<span class="comment">//_mm_unpacklo_epi64</span></span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vcombine_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">uint32x2_t</span> __b)</span></span>;<span class="comment">//_mm_unpacklo_epi64</span></span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vcombine_u64</span> <span class="params">(<span class="keyword">uint64x1_t</span> __a, <span class="keyword">uint64x1_t</span> __b)</span></span>;<span class="comment">//_mm_unpacklo_epi64</span></span><br><span class="line"><span class="function"><span class="keyword">poly8x16_t</span> <span class="title">vcombine_p8</span> <span class="params">(<span class="keyword">poly8x8_t</span> __a, <span class="keyword">poly8x8_t</span> __b)</span></span>;<span class="comment">//_mm_unpacklo_epi64</span></span><br><span class="line"><span class="function"><span class="keyword">poly16x8_t</span> <span class="title">vcombine_p16</span> <span class="params">(<span class="keyword">poly16x4_t</span> __a, <span class="keyword">poly16x4_t</span> __b)</span></span>;<span class="comment">//_mm_unpacklo_epi64</span></span><br><span class="line"><span class="comment">/***************************************Splitting vectors*******************************/</span></span><br><span class="line"><span class="comment">/*--1、窄指令, -&gt; ri = a(i+4); returns the higher half of the 128-bit input vector. The</span></span><br><span class="line"><span class="comment">output is a 64-bit vector that has half the number of elements as the input vector.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vget_high_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a)</span></span>;<span class="comment">//_mm_unpackhi_epi64</span></span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vget_high_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a)</span></span>;<span class="comment">//_mm_unpackhi_epi64</span></span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vget_high_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a)</span></span>;<span class="comment">//_mm_unpackhi_epi64</span></span><br><span class="line"><span class="function"><span class="keyword">int64x1_t</span> <span class="title">vget_high_s64</span> <span class="params">(<span class="keyword">int64x2_t</span> __a)</span></span>;<span class="comment">//_mm_unpackhi_epi64</span></span><br><span class="line"><span class="function"><span class="keyword">float32x2_t</span> <span class="title">vget_high_f32</span> <span class="params">(<span class="keyword">float32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vget_high_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a)</span></span>;<span class="comment">//_mm_unpackhi_epi64</span></span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vget_high_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a)</span></span>;<span class="comment">//_mm_unpackhi_epi64</span></span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vget_high_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a)</span></span>;<span class="comment">//_mm_unpackhi_epi64</span></span><br><span class="line"><span class="function"><span class="keyword">uint64x1_t</span> <span class="title">vget_high_u64</span> <span class="params">(<span class="keyword">uint64x2_t</span> __a)</span></span>;<span class="comment">//_mm_unpackhi_epi64</span></span><br><span class="line"><span class="function"><span class="keyword">poly8x8_t</span> <span class="title">vget_high_p8</span> <span class="params">(<span class="keyword">poly8x16_t</span> __a)</span></span>;<span class="comment">//_mm_unpackhi_epi64</span></span><br><span class="line"><span class="function"><span class="keyword">poly16x4_t</span> <span class="title">vget_high_p16</span> <span class="params">(<span class="keyword">poly16x8_t</span> __a)</span></span>;<span class="comment">//_mm_unpackhi_epi64</span></span><br><span class="line"><span class="comment">/*--2、窄指令, -&gt; ri = ai; returns the lower half of the 128-bit input vector. The</span></span><br><span class="line"><span class="comment">output is a 64-bit vector that has half the number of elements as the input vector.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vget_low_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vget_low_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vget_low_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x2_t</span> <span class="title">vget_low_f32</span> <span class="params">(<span class="keyword">float32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vget_low_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vget_low_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vget_low_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x8_t</span> <span class="title">vget_low_p8</span> <span class="params">(<span class="keyword">poly8x16_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x4_t</span> <span class="title">vget_low_p16</span> <span class="params">(<span class="keyword">poly16x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x1_t</span> <span class="title">vget_low_s64</span> <span class="params">(<span class="keyword">int64x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x1_t</span> <span class="title">vget_low_u64</span> <span class="params">(<span class="keyword">uint64x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="comment">/****************************************************Conversions************************/</span></span><br><span class="line"><span class="comment">/*--1、Convert from float: vcvt -&gt;, convert from floating-point to integer.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vcvt_s32_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vcvt_u32_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vcvtq_s32_f32</span> <span class="params">(<span class="keyword">float32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vcvtq_u32_f32</span> <span class="params">(<span class="keyword">float32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vcvt_n_s32_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vcvt_n_u32_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vcvtq_n_s32_f32</span> <span class="params">(<span class="keyword">float32x4_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vcvtq_n_u32_f32</span> <span class="params">(<span class="keyword">float32x4_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/*--2、Convert to float: vcvt -&gt;, convert from integer to floating-point.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">float32x2_t</span> <span class="title">vcvt_f32_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x2_t</span> <span class="title">vcvt_f32_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x4_t</span> <span class="title">vcvtq_f32_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x4_t</span> <span class="title">vcvtq_f32_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x2_t</span> <span class="title">vcvt_n_f32_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x2_t</span> <span class="title">vcvt_n_f32_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x4_t</span> <span class="title">vcvtq_n_f32_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x4_t</span> <span class="title">vcvtq_n_f32_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/*--3、between single-precision and double-precision numbers: vcvt -&gt;--*/</span></span><br><span class="line"><span class="function"><span class="keyword">float16x4_t</span> <span class="title">vcvt_f16_f32</span><span class="params">(<span class="keyword">float32x4_t</span> a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x4_t</span> <span class="title">vcvt_f32_f16</span><span class="params">(<span class="keyword">float16x4_t</span> a)</span></span>;</span><br><span class="line"><span class="comment">/*************************************************Move**********************************/</span></span><br><span class="line"><span class="comment">/*--1、Vector narrow integer(窄指令): vmovn -&gt; ri = ai[0...8]; copies the least </span></span><br><span class="line"><span class="comment">significant half of each element of a quadword vector into </span></span><br><span class="line"><span class="comment">the corresponding elements of a doubleword vector.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vmovn_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vmovn_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vmovn_s64</span> <span class="params">(<span class="keyword">int64x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vmovn_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vmovn_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vmovn_u64</span> <span class="params">(<span class="keyword">uint64x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="comment">/*--2、Vector long move(长指令): vmovl -&gt; sign extends or zero extends each element</span></span><br><span class="line"><span class="comment">in a doubleword vector to twice its original length,</span></span><br><span class="line"><span class="comment">and places the results in a quadword vector.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vmovl_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a)</span></span>;<span class="comment">//_mm_cvtepi8_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vmovl_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a)</span></span>;<span class="comment">//_mm_cvtepi16_epi32</span></span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vmovl_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a)</span></span>;<span class="comment">//_mm_cvtepi32_epi64</span></span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vmovl_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a)</span></span>;<span class="comment">//_mm_cvtepu8_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vmovl_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a)</span></span>;<span class="comment">//_mm_cvtepu16_epi32</span></span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vmovl_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a)</span></span>;_mm_cvtepu32_epi64</span><br><span class="line"><span class="comment">/*--3、Vector saturating narrow integer(窄指令): vqmovn -&gt; copies each element of the</span></span><br><span class="line"><span class="comment">operand vector to the corresponding element of the destination vector. </span></span><br><span class="line"><span class="comment">The result element is half the width of </span></span><br><span class="line"><span class="comment">the operand element, and values are saturated to the result width.</span></span><br><span class="line"><span class="comment">The results are the same type as the operands.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vqmovn_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a)</span></span>;<span class="comment">//_mm_packs_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vqmovn_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a)</span></span>;<span class="comment">//_mm_packs_epi32</span></span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vqmovn_s64</span> <span class="params">(<span class="keyword">int64x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vqmovn_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vqmovn_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vqmovn_u64</span> <span class="params">(<span class="keyword">uint64x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="comment">/*--4、Vector saturating narrow integer signed-&gt;unsigned(窄指令): copies each element of</span></span><br><span class="line"><span class="comment">the operand vector to the corresponding element of the destination vector.</span></span><br><span class="line"><span class="comment">The result element is half the width of the operand element,</span></span><br><span class="line"><span class="comment">and values are saturated to the result width.</span></span><br><span class="line"><span class="comment">The elements in the operand are signed and the elements in the result are unsigned.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vqmovun_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a)</span></span>;<span class="comment">//_mm_packus_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vqmovun_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a)</span></span>;<span class="comment">//_mm_packus_epi32</span></span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vqmovun_s64</span> <span class="params">(<span class="keyword">int64x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="comment">/******************************************************Table lookup*********************/</span></span><br><span class="line"><span class="comment">/*--1、Table lookup: vtbl -&gt; uses byte indexes in a control vector to look up byte </span></span><br><span class="line"><span class="comment">values in a table and generate a new vector. Indexes out of range return 0. </span></span><br><span class="line"><span class="comment">The table is in Vector1 and uses one(or two or three or four)D registers.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vtbl1_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a, <span class="keyword">int8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vtbl1_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">uint8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x8_t</span> <span class="title">vtbl1_p8</span> <span class="params">(<span class="keyword">poly8x8_t</span> __a, <span class="keyword">uint8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vtbl2_s8</span> <span class="params">(<span class="keyword">int8x8x2_t</span> __a, <span class="keyword">int8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vtbl2_u8</span> <span class="params">(<span class="keyword">uint8x8x2_t</span> __a, <span class="keyword">uint8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x8_t</span> <span class="title">vtbl2_p8</span> <span class="params">(<span class="keyword">poly8x8x2_t</span> __a, <span class="keyword">uint8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vtbl3_s8</span> <span class="params">(<span class="keyword">int8x8x3_t</span> __a, <span class="keyword">int8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vtbl3_u8</span> <span class="params">(<span class="keyword">uint8x8x3_t</span> __a, <span class="keyword">uint8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x8_t</span> <span class="title">vtbl3_p8</span> <span class="params">(<span class="keyword">poly8x8x3_t</span> __a, <span class="keyword">uint8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vtbl4_s8</span> <span class="params">(<span class="keyword">int8x8x4_t</span> __a, <span class="keyword">int8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vtbl4_u8</span> <span class="params">(<span class="keyword">uint8x8x4_t</span> __a, <span class="keyword">uint8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x8_t</span> <span class="title">vtbl4_p8</span> <span class="params">(<span class="keyword">poly8x8x4_t</span> __a, <span class="keyword">uint8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/*--2、Extended table lookup: vtbx -&gt; uses byte indexes in a control vector to look up</span></span><br><span class="line"><span class="comment">byte values in a table and generate a new vector. Indexes out of range leave the </span></span><br><span class="line"><span class="comment">destination element unchanged.The table is in Vector2 and uses one(or two or three or</span></span><br><span class="line"><span class="comment">four) D register. Vector1 contains the elements of the destination vector.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vtbx1_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a, <span class="keyword">int8x8_t</span> __b, <span class="keyword">int8x8_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vtbx1_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">uint8x8_t</span> __b, <span class="keyword">uint8x8_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x8_t</span> <span class="title">vtbx1_p8</span> <span class="params">(<span class="keyword">poly8x8_t</span> __a, <span class="keyword">poly8x8_t</span> __b, <span class="keyword">uint8x8_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vtbx2_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a, <span class="keyword">int8x8x2_t</span> __b, <span class="keyword">int8x8_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vtbx2_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">uint8x8x2_t</span> __b, <span class="keyword">uint8x8_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x8_t</span> <span class="title">vtbx2_p8</span> <span class="params">(<span class="keyword">poly8x8_t</span> __a, <span class="keyword">poly8x8x2_t</span> __b, <span class="keyword">uint8x8_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vtbx3_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a, <span class="keyword">int8x8x3_t</span> __b, <span class="keyword">int8x8_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vtbx3_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">uint8x8x3_t</span> __b, <span class="keyword">uint8x8_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x8_t</span> <span class="title">vtbx3_p8</span> <span class="params">(<span class="keyword">poly8x8_t</span> __a, <span class="keyword">poly8x8x3_t</span> __b, <span class="keyword">uint8x8_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vtbx4_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a, <span class="keyword">int8x8x4_t</span> __b, <span class="keyword">int8x8_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vtbx4_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">uint8x8x4_t</span> __b, <span class="keyword">uint8x8_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x8_t</span> <span class="title">vtbx4_p8</span> <span class="params">(<span class="keyword">poly8x8_t</span> __a, <span class="keyword">poly8x8x4_t</span> __b, <span class="keyword">uint8x8_t</span> __c)</span></span>;</span><br><span class="line"><span class="comment">/***************************************Multiply, scalar, lane**************************/</span></span><br><span class="line"><span class="comment">/*--1、Vector multiply by scalar: vmul -&gt; ri = ai * b; </span></span><br><span class="line"><span class="comment">multiplies each element in a vector by a scalar, </span></span><br><span class="line"><span class="comment">and places the results in the destination vector.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vmul_n_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vmul_n_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x2_t</span> <span class="title">vmul_n_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a, <span class="keyword">float32_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vmul_n_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">uint16_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vmul_n_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">uint32_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vmulq_n_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">int16_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vmulq_n_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int32_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x4_t</span> <span class="title">vmulq_n_f32</span> <span class="params">(<span class="keyword">float32x4_t</span> __a, <span class="keyword">float32_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vmulq_n_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">uint16_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vmulq_n_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">uint32_t</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/*--2、Vector multiply by scalar: -&gt; ri = ai * b[c]; </span></span><br><span class="line"><span class="comment">multiplies the first vector by a scalar. </span></span><br><span class="line"><span class="comment">The scalar is the element in the second vector with index c.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vmul_lane_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vmul_lane_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x2_t</span> <span class="title">vmul_lane_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a, <span class="keyword">float32x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vmul_lane_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">uint16x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vmul_lane_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">uint32x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vmulq_lane_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">int16x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vmulq_lane_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int32x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x4_t</span> <span class="title">vmulq_lane_f32</span> <span class="params">(<span class="keyword">float32x4_t</span> __a, <span class="keyword">float32x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vmulq_lane_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">uint16x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vmulq_lane_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">uint32x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="comment">/*--3、Vector long multiply with scalar: vmull -&gt;  ri = ai * b;</span></span><br><span class="line"><span class="comment">multiplies a vector by a scalar. </span></span><br><span class="line"><span class="comment">Elements in the result are wider than elements in input vector.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vmull_n_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vmull_n_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vmull_n_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">uint16_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vmull_n_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">uint32_t</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/*--4、Vector long multiply by scalar: vmull -&gt; ri = ai * b[c];</span></span><br><span class="line"><span class="comment">multiplies the first vector by a scalar. </span></span><br><span class="line"><span class="comment">The scalar is the element in the second vector with index c. </span></span><br><span class="line"><span class="comment">The elements in the result are wider than the elements in input vector.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vmull_lane_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vmull_lane_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vmull_lane_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">uint16x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vmull_lane_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">uint32x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="comment">/*--5、Vector saturating doubling long multiply with scalar: vqdmull -&gt; ri = sat(ai * b);</span></span><br><span class="line"><span class="comment">multiplies the elements in the vector by a scalar, and doubles the results. </span></span><br><span class="line"><span class="comment">If any of the results overflow, they are saturated and the sticky QC flag is set.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vqdmull_n_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vqdmull_n_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32_t</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/*--6、Vector saturating doubling long multiply by scalar: vqdmull -&gt; ri = sat(ai * b[c]);</span></span><br><span class="line"><span class="comment">multiplies the elements in the first vector by a scalar, and doubles the results. </span></span><br><span class="line"><span class="comment">The scalar has index c in the second vector. If any of the results overflow, </span></span><br><span class="line"><span class="comment">they are saturated and the sticky QC flagis set.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vqdmull_lane_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vqdmull_lane_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="comment">/*--7、Vector saturating doubling multiply high with scalar: vqdmulh -&gt; ri = sat(ai * b)</span></span><br><span class="line"><span class="comment">multiplies the elements of the vector by a scalar, and doubles the results.</span></span><br><span class="line"><span class="comment">It then returns only the high half of the results.</span></span><br><span class="line"><span class="comment">If any of the results overflow, they are saturated and the sticky QC flag is set.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vqdmulh_n_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vqdmulh_n_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vqdmulhq_n_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">int16_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vqdmulhq_n_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int32_t</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/*--8、Vector saturating doubling multiply high by scalar: </span></span><br><span class="line"><span class="comment">vqdmulh -&gt; ri = sat(ai * b[c]);</span></span><br><span class="line"><span class="comment">multiplies the elements of the first vector by a scalar, and doubles the results. It then</span></span><br><span class="line"><span class="comment">returns only the high half of the results. The scalar has index n in the second vector.</span></span><br><span class="line"><span class="comment">If any of the results overflow, they are saturated and the sticky QC flag is set.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vqdmulh_lane_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vqdmulh_lane_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vqdmulhq_lane_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">int16x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vqdmulhq_lane_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int32x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="comment">/*--9、Vector saturating rounding doubling multiply high with scalar: </span></span><br><span class="line"><span class="comment">vqqrdmulh -&gt; ri = sat(ai * b);</span></span><br><span class="line"><span class="comment">multiplies the elements of the vector by a scalar and doubles the results. </span></span><br><span class="line"><span class="comment">It then returns only the high half of the rounded results. </span></span><br><span class="line"><span class="comment">If any of the results overflow, they are saturated and the sticky QC flag is set.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vqrdmulh_n_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vqrdmulh_n_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vqrdmulhq_n_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">int16_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vqrdmulhq_n_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int32_t</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/*--10、Vector rounding saturating doubling multiply high by scalar: </span></span><br><span class="line"><span class="comment">vqrdmulh -&gt; ri = sat(ai * b[c]);</span></span><br><span class="line"><span class="comment">multiplies the elements of the first vector by a scalar and doubles the results.</span></span><br><span class="line"><span class="comment">It then returns only the high half of the rounded results.</span></span><br><span class="line"><span class="comment">The scalar has index n in the second vector. If any of the results overflow, </span></span><br><span class="line"><span class="comment">they are saturated and the sticky QC flag is set.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vqrdmulh_lane_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vqrdmulh_lane_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vqrdmulhq_lane_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">int16x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vqrdmulhq_lane_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int32x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="comment">/*--11、Vector multiply accumulate with scalar: vmla -&gt; ri = ai + bi * c;</span></span><br><span class="line"><span class="comment">multiplies each element in the second vector by a scalar, </span></span><br><span class="line"><span class="comment">and adds the results to the corresponding elements of the first vector.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vmla_n_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b, <span class="keyword">int16_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vmla_n_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b, <span class="keyword">int32_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x2_t</span> <span class="title">vmla_n_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a, <span class="keyword">float32x2_t</span> __b, <span class="keyword">float32_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vmla_n_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">uint16x4_t</span> __b, <span class="keyword">uint16_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vmla_n_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">uint32x2_t</span> __b, <span class="keyword">uint32_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vmlaq_n_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">int16x8_t</span> __b, <span class="keyword">int16_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vmlaq_n_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int32x4_t</span> __b, <span class="keyword">int32_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x4_t</span> <span class="title">vmlaq_n_f32</span> <span class="params">(<span class="keyword">float32x4_t</span> __a, <span class="keyword">float32x4_t</span> __b, <span class="keyword">float32_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vmlaq_n_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">uint16x8_t</span> __b, <span class="keyword">uint16_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vmlaq_n_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">uint32x4_t</span> __b, <span class="keyword">uint32_t</span> __c)</span></span>;</span><br><span class="line"><span class="comment">/*--12、Vector multiply accumulate by scalar: vmla -&gt; ri = ai + bi * c[d];</span></span><br><span class="line"><span class="comment">multiplies each element in the second vector by a scalar, </span></span><br><span class="line"><span class="comment">and adds the results to the corresponding elements of the first vector. </span></span><br><span class="line"><span class="comment">The scalar has index d in the third vector.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vmla_lane_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b, <span class="keyword">int16x4_t</span> __c, <span class="keyword">const</span> <span class="keyword">int</span> __d)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vmla_lane_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b, <span class="keyword">int32x2_t</span> __c, <span class="keyword">const</span> <span class="keyword">int</span> __d)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x2_t</span> <span class="title">vmla_lane_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a, <span class="keyword">float32x2_t</span> __b, <span class="keyword">float32x2_t</span> __c,</span></span></span><br><span class="line"><span class="params"><span class="function">	<span class="keyword">const</span> <span class="keyword">int</span> __d)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vmla_lane_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">uint16x4_t</span> __b, <span class="keyword">uint16x4_t</span> __c, <span class="keyword">const</span> <span class="keyword">int</span> __d)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vmla_lane_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">uint32x2_t</span> __b, <span class="keyword">uint32x2_t</span> __c, <span class="keyword">const</span> <span class="keyword">int</span> __d)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vmlaq_lane_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">int16x8_t</span> __b, <span class="keyword">int16x4_t</span> __c, <span class="keyword">const</span> <span class="keyword">int</span> __d)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vmlaq_lane_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int32x4_t</span> __b, <span class="keyword">int32x2_t</span> __c, <span class="keyword">const</span> <span class="keyword">int</span> __d)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x4_t</span> <span class="title">vmlaq_lane_f32</span> <span class="params">(<span class="keyword">float32x4_t</span> __a, <span class="keyword">float32x4_t</span> __b, <span class="keyword">float32x2_t</span> __c,</span></span></span><br><span class="line"><span class="params"><span class="function">	<span class="keyword">const</span> <span class="keyword">int</span> __d)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vmlaq_lane_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">uint16x8_t</span> __b, <span class="keyword">uint16x4_t</span> __c, <span class="keyword">const</span> <span class="keyword">int</span> __d)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vmlaq_lane_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">uint32x4_t</span> __b, <span class="keyword">uint32x2_t</span> __c, <span class="keyword">const</span> <span class="keyword">int</span> __d)</span></span>;</span><br><span class="line"><span class="comment">/*--13、Vector widening multiply accumulate with scalar: vmlal -&gt; ri = ai + bi * c;</span></span><br><span class="line"><span class="comment">multiplies each element in the second vector by a scalar, and adds the results into the </span></span><br><span class="line"><span class="comment">corresponding elements of the first vector. </span></span><br><span class="line"><span class="comment">The scalar has index n in the third vector. The elements in the result are wider.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vmlal_n_s16</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int16x4_t</span> __b, <span class="keyword">int16_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vmlal_n_s32</span> <span class="params">(<span class="keyword">int64x2_t</span> __a, <span class="keyword">int32x2_t</span> __b, <span class="keyword">int32_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vmlal_n_u16</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">uint16x4_t</span> __b, <span class="keyword">uint16_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vmlal_n_u32</span> <span class="params">(<span class="keyword">uint64x2_t</span> __a, <span class="keyword">uint32x2_t</span> __b, <span class="keyword">uint32_t</span> __c)</span></span>;</span><br><span class="line"><span class="comment">/*--14、Vector widening multiply accumulate by scalar: vmlal -&gt; ri = ai + bi * c[d];</span></span><br><span class="line"><span class="comment">multiplies each element in the second vector by a scalar, and adds the results to the </span></span><br><span class="line"><span class="comment">corresponding elements of the first vector. The scalar has index d in the third vector.</span></span><br><span class="line"><span class="comment">The elements in the result are wider.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vmlal_lane_s16</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int16x4_t</span> __b, <span class="keyword">int16x4_t</span> __c, <span class="keyword">const</span> <span class="keyword">int</span> __d)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vmlal_lane_s32</span> <span class="params">(<span class="keyword">int64x2_t</span> __a, <span class="keyword">int32x2_t</span> __b, <span class="keyword">int32x2_t</span> __c, <span class="keyword">const</span> <span class="keyword">int</span> __d)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vmlal_lane_u16</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">uint16x4_t</span> __b, <span class="keyword">uint16x4_t</span> __c, <span class="keyword">const</span> <span class="keyword">int</span> __d)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vmlal_lane_u32</span> <span class="params">(<span class="keyword">uint64x2_t</span> __a, <span class="keyword">uint32x2_t</span> __b, <span class="keyword">uint32x2_t</span> __c, <span class="keyword">const</span> <span class="keyword">int</span> __d)</span></span>;</span><br><span class="line"><span class="comment">/*--15、Vector widening saturating doubling multiply accumulate with scalar: </span></span><br><span class="line"><span class="comment">vqdmlal -&gt; ri = sat(ai + bi * c);</span></span><br><span class="line"><span class="comment">multiplies the elements in the second vector by a scalar, and doubles the results. </span></span><br><span class="line"><span class="comment">It then adds the results to the elements in the first vector.</span></span><br><span class="line"><span class="comment">If any of the results overflow, they are saturated and the sticky QC flag is set.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vqdmlal_n_s16</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int16x4_t</span> __b, <span class="keyword">int16_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vqdmlal_n_s32</span> <span class="params">(<span class="keyword">int64x2_t</span> __a, <span class="keyword">int32x2_t</span> __b, <span class="keyword">int32_t</span> __c)</span></span>;</span><br><span class="line"><span class="comment">/*--16、Vector widening saturating doubling multiply accumulate by scalar: </span></span><br><span class="line"><span class="comment">vqdmlal -&gt; ri = sat(ai + bi * c[d])</span></span><br><span class="line"><span class="comment">multiplies each element in the second vector by a scalar, doubles the results and adds </span></span><br><span class="line"><span class="comment">them to the corresponding elements of the first vector. The scalar has index d in the </span></span><br><span class="line"><span class="comment">third vector. If any of the results overflow,</span></span><br><span class="line"><span class="comment">they are saturated and the sticky QC flag is set.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vqdmlal_lane_s16</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int16x4_t</span> __b, <span class="keyword">int16x4_t</span> __c, <span class="keyword">const</span> <span class="keyword">int</span> __d)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vqdmlal_lane_s32</span> <span class="params">(<span class="keyword">int64x2_t</span> __a, <span class="keyword">int32x2_t</span> __b, <span class="keyword">int32x2_t</span> __c, <span class="keyword">const</span> <span class="keyword">int</span> __d)</span></span>;</span><br><span class="line"><span class="comment">/*--17、Vector multiply subtract with scalar: vmls -&gt; ri = ai - bi * c;</span></span><br><span class="line"><span class="comment">multiplies each element in a vector by a scalar, subtracts the results from the </span></span><br><span class="line"><span class="comment">corresponding elements of the destination vector, </span></span><br><span class="line"><span class="comment">and places the final results in the destination vector.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vmls_n_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b, <span class="keyword">int16_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vmls_n_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b, <span class="keyword">int32_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x2_t</span> <span class="title">vmls_n_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a, <span class="keyword">float32x2_t</span> __b, <span class="keyword">float32_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vmls_n_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">uint16x4_t</span> __b, <span class="keyword">uint16_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vmls_n_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">uint32x2_t</span> __b, <span class="keyword">uint32_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vmlsq_n_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">int16x8_t</span> __b, <span class="keyword">int16_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vmlsq_n_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int32x4_t</span> __b, <span class="keyword">int32_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x4_t</span> <span class="title">vmlsq_n_f32</span> <span class="params">(<span class="keyword">float32x4_t</span> __a, <span class="keyword">float32x4_t</span> __b, <span class="keyword">float32_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vmlsq_n_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">uint16x8_t</span> __b, <span class="keyword">uint16_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vmlsq_n_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">uint32x4_t</span> __b, <span class="keyword">uint32_t</span> __c)</span></span>;</span><br><span class="line"><span class="comment">/*--18、Vector multiply subtract by scalar: vmls -&gt; ri = ai - bi * c[d];</span></span><br><span class="line"><span class="comment">multiplies each element in the second vector by a scalar, and subtracts them from the</span></span><br><span class="line"><span class="comment">corresponding elements of the first vector.</span></span><br><span class="line"><span class="comment">The scalar has index d in the third vector.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vmls_lane_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b, <span class="keyword">int16x4_t</span> __c, <span class="keyword">const</span> <span class="keyword">int</span> __d)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vmls_lane_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b, <span class="keyword">int32x2_t</span> __c, <span class="keyword">const</span> <span class="keyword">int</span> __d)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x2_t</span> <span class="title">vmls_lane_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a, <span class="keyword">float32x2_t</span> __b, <span class="keyword">float32x2_t</span> __c,</span></span></span><br><span class="line"><span class="params"><span class="function">	<span class="keyword">const</span> <span class="keyword">int</span> __d)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vmls_lane_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">uint16x4_t</span> __b, <span class="keyword">uint16x4_t</span> __c, <span class="keyword">const</span> <span class="keyword">int</span> __d)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vmls_lane_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">uint32x2_t</span> __b, <span class="keyword">uint32x2_t</span> __c, <span class="keyword">const</span> <span class="keyword">int</span> __d)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vmlsq_lane_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">int16x8_t</span> __b, <span class="keyword">int16x4_t</span> __c, <span class="keyword">const</span> <span class="keyword">int</span> __d)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vmlsq_lane_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int32x4_t</span> __b, <span class="keyword">int32x2_t</span> __c, <span class="keyword">const</span> <span class="keyword">int</span> __d)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x4_t</span> <span class="title">vmlsq_lane_f32</span> <span class="params">(<span class="keyword">float32x4_t</span> __a, <span class="keyword">float32x4_t</span> __b, <span class="keyword">float32x2_t</span> __c,</span></span></span><br><span class="line"><span class="params"><span class="function">	<span class="keyword">const</span> <span class="keyword">int</span> __d)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vmlsq_lane_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">uint16x8_t</span> __b, <span class="keyword">uint16x4_t</span> __c, <span class="keyword">const</span> <span class="keyword">int</span> __d)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vmlsq_lane_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">uint32x4_t</span> __b, <span class="keyword">uint32x2_t</span> __c, <span class="keyword">const</span> <span class="keyword">int</span> __d)</span></span>;</span><br><span class="line"><span class="comment">/*--19、Vector widening multiply subtract with scalar: vmlsl -&gt; ri = ai - bi * c;</span></span><br><span class="line"><span class="comment">multiplies the elements in the second vector by a scalar, then subtracts the results from</span></span><br><span class="line"><span class="comment">the elements in the first vector. The elements of the result are wider.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vmlsl_n_s16</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int16x4_t</span> __b, <span class="keyword">int16_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vmlsl_n_s32</span> <span class="params">(<span class="keyword">int64x2_t</span> __a, <span class="keyword">int32x2_t</span> __b, <span class="keyword">int32_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vmlsl_n_u16</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">uint16x4_t</span> __b, <span class="keyword">uint16_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vmlsl_n_u32</span> <span class="params">(<span class="keyword">uint64x2_t</span> __a, <span class="keyword">uint32x2_t</span> __b, <span class="keyword">uint32_t</span> __c)</span></span>;</span><br><span class="line"><span class="comment">/*--20、Vector widening multiply subtract by scalar: vmlsl -&gt; ri = ai - bi * c[d];</span></span><br><span class="line"><span class="comment">multiplies each element in the second vector by a scalar, </span></span><br><span class="line"><span class="comment">and subtracts them from the corresponding elements of the first vector. </span></span><br><span class="line"><span class="comment">The scalar has index d in the third vector. The elements in the result are wider.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vmlsl_lane_s16</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int16x4_t</span> __b, <span class="keyword">int16x4_t</span> __c, <span class="keyword">const</span> <span class="keyword">int</span> __d)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vmlsl_lane_s32</span> <span class="params">(<span class="keyword">int64x2_t</span> __a, <span class="keyword">int32x2_t</span> __b, <span class="keyword">int32x2_t</span> __c, <span class="keyword">const</span> <span class="keyword">int</span> __d)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vmlsl_lane_u16</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">uint16x4_t</span> __b, <span class="keyword">uint16x4_t</span> __c, <span class="keyword">const</span> <span class="keyword">int</span> __d)</span></span></span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vmlsl_lane_u32</span> <span class="params">(<span class="keyword">uint64x2_t</span> __a, <span class="keyword">uint32x2_t</span> __b, <span class="keyword">uint32x2_t</span> __c, <span class="keyword">const</span> <span class="keyword">int</span> __d)</span></span>;</span><br><span class="line"><span class="comment">/*--21、Vector widening saturating doubling multiply subtract with scalar: </span></span><br><span class="line"><span class="comment">vqdmlsl -&gt; ri = sat(ai - bi * c);</span></span><br><span class="line"><span class="comment">multiplies the elements of the second vector with a scalar and doubles the results. </span></span><br><span class="line"><span class="comment">It then subtracts the results from the elements in the first vector.</span></span><br><span class="line"><span class="comment">If any of the results overflow, they are saturated and the sticky QC flag is set.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vqdmlsl_n_s16</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int16x4_t</span> __b, <span class="keyword">int16_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vqdmlsl_n_s32</span> <span class="params">(<span class="keyword">int64x2_t</span> __a, <span class="keyword">int32x2_t</span> __b, <span class="keyword">int32_t</span> __c)</span></span>;</span><br><span class="line"><span class="comment">/*--22、Vector widening saturating doubling multiply subtract by scalar:</span></span><br><span class="line"><span class="comment">vqdmlsl -&gt; ri = sat(ai - bi * c[[d]);</span></span><br><span class="line"><span class="comment">multiplies each element in the second vector by a scalar, doubles the results and subtracts</span></span><br><span class="line"><span class="comment">them from the corresponding elements of the first vector. The scalar has index n in the </span></span><br><span class="line"><span class="comment">third vector.If any of the results overflow, </span></span><br><span class="line"><span class="comment">they are saturated and the sticky QC flag is set.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vqdmlsl_lane_s16</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int16x4_t</span> __b, <span class="keyword">int16x4_t</span> __c, <span class="keyword">const</span> <span class="keyword">int</span> __d)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vqdmlsl_lane_s32</span> <span class="params">(<span class="keyword">int64x2_t</span> __a, <span class="keyword">int32x2_t</span> __b, <span class="keyword">int32x2_t</span> __c, <span class="keyword">const</span> <span class="keyword">int</span> __d)</span></span>;</span><br><span class="line"><span class="comment">/*****************************************************Vector extract********************/</span></span><br><span class="line"><span class="comment">/*--Vector extract: vext -&gt; extracts n elements from the lower end of the second operand</span></span><br><span class="line"><span class="comment">vector and the remaining elements from the higher end of the first, and combines them to</span></span><br><span class="line"><span class="comment">form the result vector. The elements from the second operand are placed in the most </span></span><br><span class="line"><span class="comment">significant part of the result vector.The elements from the first operand are placed in</span></span><br><span class="line"><span class="comment">the least significant part of the result vector.This intrinsic cycles the elements</span></span><br><span class="line"><span class="comment">through the lanes if the two input vectors are the same.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vext_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a, <span class="keyword">int8x8_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vext_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vext_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x1_t</span> <span class="title">vext_s64</span> <span class="params">(<span class="keyword">int64x1_t</span> __a, <span class="keyword">int64x1_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x2_t</span> <span class="title">vext_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a, <span class="keyword">float32x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vext_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">uint8x8_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vext_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">uint16x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vext_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">uint32x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x1_t</span> <span class="title">vext_u64</span> <span class="params">(<span class="keyword">uint64x1_t</span> __a, <span class="keyword">uint64x1_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x8_t</span> <span class="title">vext_p8</span> <span class="params">(<span class="keyword">poly8x8_t</span> __a, <span class="keyword">poly8x8_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x4_t</span> <span class="title">vext_p16</span> <span class="params">(<span class="keyword">poly16x4_t</span> __a, <span class="keyword">poly16x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vextq_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a, <span class="keyword">int8x16_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;<span class="comment">//_mm_alignr_epi8 </span></span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vextq_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">int16x8_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;<span class="comment">//_mm_alignr_epi8 </span></span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vextq_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int32x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;<span class="comment">//_mm_alignr_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vextq_s64</span> <span class="params">(<span class="keyword">int64x2_t</span> __a, <span class="keyword">int64x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;<span class="comment">//_mm_alignr_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">float32x4_t</span> <span class="title">vextq_f32</span> <span class="params">(<span class="keyword">float32x4_t</span> __a, <span class="keyword">float32x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;<span class="comment">//_mm_alignr_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vextq_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a, <span class="keyword">uint8x16_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;<span class="comment">//_mm_alignr_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vextq_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">uint16x8_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;<span class="comment">//_mm_alignr_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vextq_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">uint32x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;<span class="comment">//_mm_alignr_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vextq_u64</span> <span class="params">(<span class="keyword">uint64x2_t</span> __a, <span class="keyword">uint64x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;<span class="comment">//_mm_alignr_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">poly8x16_t</span> <span class="title">vextq_p8</span> <span class="params">(<span class="keyword">poly8x16_t</span> __a, <span class="keyword">poly8x16_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;<span class="comment">//_mm_alignr_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">poly16x8_t</span> <span class="title">vextq_p16</span> <span class="params">(<span class="keyword">poly16x8_t</span> __a, <span class="keyword">poly16x8_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;<span class="comment">//_mm_alignr_epi8</span></span><br><span class="line"><span class="comment">/****************************************************Reverse elements*******************/</span></span><br><span class="line"><span class="comment">/*--1、Reverse vector elements (swap endianness): vrev64 -&gt; reverses the order of 8-bit, </span></span><br><span class="line"><span class="comment">16-bit, or 32-bit elements within each doubleword of the vector, </span></span><br><span class="line"><span class="comment">and places the result in the corresponding destination vector.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vrev64_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vrev64_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vrev64_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x2_t</span> <span class="title">vrev64_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a)</span></span>;<span class="comment">//_mm_shuffle_ps</span></span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vrev64_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vrev64_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vrev64_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x8_t</span> <span class="title">vrev64_p8</span> <span class="params">(<span class="keyword">poly8x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x4_t</span> <span class="title">vrev64_p16</span> <span class="params">(<span class="keyword">poly16x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vrev64q_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vrev64q_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vrev64q_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x4_t</span> <span class="title">vrev64q_f32</span> <span class="params">(<span class="keyword">float32x4_t</span> __a)</span></span>;<span class="comment">//_mm_shuffle_ps</span></span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vrev64q_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vrev64q_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vrev64q_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x16_t</span> <span class="title">vrev64q_p8</span> <span class="params">(<span class="keyword">poly8x16_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x8_t</span> <span class="title">vrev64q_p16</span> <span class="params">(<span class="keyword">poly16x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="comment">/*--2、Reverse vector elements (swap endianness): vrev32 -&gt; reverses the order of 8-bit </span></span><br><span class="line"><span class="comment">or 16-bit elements within each word of the vector, </span></span><br><span class="line"><span class="comment">and places the result in the corresponding destination vector.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vrev32_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vrev32_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vrev32_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vrev32_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x8_t</span> <span class="title">vrev32_p8</span> <span class="params">(<span class="keyword">poly8x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x4_t</span> <span class="title">vrev32_p16</span> <span class="params">(<span class="keyword">poly16x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vrev32q_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vrev32q_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vrev32q_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vrev32q_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x16_t</span> <span class="title">vrev32q_p8</span> <span class="params">(<span class="keyword">poly8x16_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x8_t</span> <span class="title">vrev32q_p16</span> <span class="params">(<span class="keyword">poly16x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="comment">/*--3、Reverse vector elements (swap endianness): vrev16 -&gt; reverses the order </span></span><br><span class="line"><span class="comment">of 8-bit elements within each halfword of the vector, </span></span><br><span class="line"><span class="comment">and places the result in the corresponding destination vector.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vrev16_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vrev16_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x8_t</span> <span class="title">vrev16_p8</span> <span class="params">(<span class="keyword">poly8x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vrev16q_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vrev16q_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x16_t</span> <span class="title">vrev16q_p8</span> <span class="params">(<span class="keyword">poly8x16_t</span> __a)</span></span>;</span><br><span class="line"><span class="comment">/**********************************************************Bitwise Select***************/</span></span><br><span class="line"><span class="comment">/*--Bitwise Select: vbsl -&gt; selects each bit for the destination from the first operand </span></span><br><span class="line"><span class="comment">if the corresponding bit of the destination is 1,          ri = ai != 0 ? bi : ci</span></span><br><span class="line"><span class="comment">or from the second operand if the corresponding bit of the destination is 0.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vbsl_s8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">int8x8_t</span> __b, <span class="keyword">int8x8_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vbsl_s16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b, <span class="keyword">int16x4_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vbsl_s32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b, <span class="keyword">int32x2_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x1_t</span> <span class="title">vbsl_s64</span> <span class="params">(<span class="keyword">uint64x1_t</span> __a, <span class="keyword">int64x1_t</span> __b, <span class="keyword">int64x1_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x2_t</span> <span class="title">vbsl_f32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">float32x2_t</span> __b, <span class="keyword">float32x2_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vbsl_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">uint8x8_t</span> __b, <span class="keyword">uint8x8_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vbsl_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">uint16x4_t</span> __b, <span class="keyword">uint16x4_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vbsl_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">uint32x2_t</span> __b, <span class="keyword">uint32x2_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x1_t</span> <span class="title">vbsl_u64</span> <span class="params">(<span class="keyword">uint64x1_t</span> __a, <span class="keyword">uint64x1_t</span> __b, <span class="keyword">uint64x1_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x8_t</span> <span class="title">vbsl_p8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">poly8x8_t</span> __b, <span class="keyword">poly8x8_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x4_t</span> <span class="title">vbsl_p16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">poly16x4_t</span> __b, <span class="keyword">poly16x4_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vbslq_s8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a, <span class="keyword">int8x16_t</span> __b, <span class="keyword">int8x16_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vbslq_s16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">int16x8_t</span> __b, <span class="keyword">int16x8_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vbslq_s32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">int32x4_t</span> __b, <span class="keyword">int32x4_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vbslq_s64</span> <span class="params">(<span class="keyword">uint64x2_t</span> __a, <span class="keyword">int64x2_t</span> __b, <span class="keyword">int64x2_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x4_t</span> <span class="title">vbslq_f32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">float32x4_t</span> __b, <span class="keyword">float32x4_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vbslq_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a, <span class="keyword">uint8x16_t</span> __b, <span class="keyword">uint8x16_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vbslq_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">uint16x8_t</span> __b, <span class="keyword">uint16x8_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vbslq_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">uint32x4_t</span> __b, <span class="keyword">uint32x4_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vbslq_u64</span> <span class="params">(<span class="keyword">uint64x2_t</span> __a, <span class="keyword">uint64x2_t</span> __b, <span class="keyword">uint64x2_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x16_t</span> <span class="title">vbslq_p8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a, <span class="keyword">poly8x16_t</span> __b, <span class="keyword">poly8x16_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x8_t</span> <span class="title">vbslq_p16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">poly16x8_t</span> __b, <span class="keyword">poly16x8_t</span> __c)</span></span>;</span><br><span class="line"><span class="comment">/************************************Transposition operations***************************/</span></span><br><span class="line"><span class="comment">/*--1、Transpose elements: vtrn -&gt; treats the elements of its input vectors as elements</span></span><br><span class="line"><span class="comment">of 2 x 2 matrices, and transposes the matrices. Essentially, it exchanges the elements </span></span><br><span class="line"><span class="comment">with odd indices from Vector1 with the elements with even indices from Vector2.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8x2_t</span> <span class="title">vtrn_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a, <span class="keyword">int8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4x2_t</span> <span class="title">vtrn_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8x2_t</span> <span class="title">vtrn_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">uint8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4x2_t</span> <span class="title">vtrn_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">uint16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x8x2_t</span> <span class="title">vtrn_p8</span> <span class="params">(<span class="keyword">poly8x8_t</span> __a, <span class="keyword">poly8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x4x2_t</span> <span class="title">vtrn_p16</span> <span class="params">(<span class="keyword">poly16x4_t</span> __a, <span class="keyword">poly16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2x2_t</span> <span class="title">vtrn_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b)</span></span></span><br><span class="line"><span class="function"><span class="keyword">float32x2x2_t</span> <span class="title">vtrn_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a, <span class="keyword">float32x2_t</span> __b)</span></span></span><br><span class="line"><span class="function"><span class="keyword">uint32x2x2_t</span> <span class="title">vtrn_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">uint32x2_t</span> __b)</span></span></span><br><span class="line"><span class="function"><span class="keyword">int8x16x2_t</span> <span class="title">vtrnq_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a, <span class="keyword">int8x16_t</span> __b)</span></span></span><br><span class="line"><span class="function"><span class="keyword">int16x8x2_t</span> <span class="title">vtrnq_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">int16x8_t</span> __b)</span></span></span><br><span class="line"><span class="function"><span class="keyword">int32x4x2_t</span> <span class="title">vtrnq_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int32x4_t</span> __b)</span></span></span><br><span class="line"><span class="function"><span class="keyword">float32x4x2_t</span> <span class="title">vtrnq_f32</span> <span class="params">(<span class="keyword">float32x4_t</span> __a, <span class="keyword">float32x4_t</span> __b)</span></span></span><br><span class="line"><span class="function"><span class="keyword">uint8x16x2_t</span> <span class="title">vtrnq_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a, <span class="keyword">uint8x16_t</span> __b)</span></span></span><br><span class="line"><span class="function"><span class="keyword">uint16x8x2_t</span> <span class="title">vtrnq_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">uint16x8_t</span> __b)</span></span></span><br><span class="line"><span class="function"><span class="keyword">uint32x4x2_t</span> <span class="title">vtrnq_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">uint32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x16x2_t</span> <span class="title">vtrnq_p8</span> <span class="params">(<span class="keyword">poly8x16_t</span> __a, <span class="keyword">poly8x16_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x8x2_t</span> <span class="title">vtrnq_p16</span> <span class="params">(<span class="keyword">poly16x8_t</span> __a, <span class="keyword">poly16x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/*--2、Interleave elements(Zip elements): </span></span><br><span class="line"><span class="comment">vzip -&gt;  (Vector Zip) interleaves the elements of two vectors.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8x2_t</span> <span class="title">vzip_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a, <span class="keyword">int8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4x2_t</span> <span class="title">vzip_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8x2_t</span> <span class="title">vzip_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">uint8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4x2_t</span> <span class="title">vzip_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">uint16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x8x2_t</span> <span class="title">vzip_p8</span> <span class="params">(<span class="keyword">poly8x8_t</span> __a, <span class="keyword">poly8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x4x2_t</span> <span class="title">vzip_p16</span> <span class="params">(<span class="keyword">poly16x4_t</span> __a, <span class="keyword">poly16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2x2_t</span> <span class="title">vzip_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x2x2_t</span> <span class="title">vzip_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a, <span class="keyword">float32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2x2_t</span> <span class="title">vzip_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">uint32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x16x2_t</span> <span class="title">vzipq_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a, <span class="keyword">int8x16_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8x2_t</span> <span class="title">vzipq_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">int16x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4x2_t</span> <span class="title">vzipq_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x4x2_t</span> <span class="title">vzipq_f32</span> <span class="params">(<span class="keyword">float32x4_t</span> __a, <span class="keyword">float32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16x2_t</span> <span class="title">vzipq_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a, <span class="keyword">uint8x16_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8x2_t</span> <span class="title">vzipq_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">uint16x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4x2_t</span> <span class="title">vzipq_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">uint32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x16x2_t</span> <span class="title">vzipq_p8</span> <span class="params">(<span class="keyword">poly8x16_t</span> __a, <span class="keyword">poly8x16_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x8x2_t</span> <span class="title">vzipq_p16</span> <span class="params">(<span class="keyword">poly16x8_t</span> __a, <span class="keyword">poly16x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/*--3、De-Interleave elements(Unzip elements): </span></span><br><span class="line"><span class="comment">vuzp -&gt; (Vector Unzip) de-interleaves the elements of two vectors.</span></span><br><span class="line"><span class="comment">De-interleaving is the inverse process of interleaving.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8x2_t</span> <span class="title">vuzp_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a, <span class="keyword">int8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4x2_t</span> <span class="title">vuzp_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2x2_t</span> <span class="title">vuzp_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x2x2_t</span> <span class="title">vuzp_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a, <span class="keyword">float32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8x2_t</span> <span class="title">vuzp_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">uint8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4x2_t</span> <span class="title">vuzp_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">uint16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2x2_t</span> <span class="title">vuzp_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">uint32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x8x2_t</span> <span class="title">vuzp_p8</span> <span class="params">(<span class="keyword">poly8x8_t</span> __a, <span class="keyword">poly8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x4x2_t</span> <span class="title">vuzp_p16</span> <span class="params">(<span class="keyword">poly16x4_t</span> __a, <span class="keyword">poly16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x16x2_t</span> <span class="title">vuzpq_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a, <span class="keyword">int8x16_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8x2_t</span> <span class="title">vuzpq_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">int16x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4x2_t</span> <span class="title">vuzpq_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x4x2_t</span> <span class="title">vuzpq_f32</span> <span class="params">(<span class="keyword">float32x4_t</span> __a, <span class="keyword">float32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16x2_t</span> <span class="title">vuzpq_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a, <span class="keyword">uint8x16_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8x2_t</span> <span class="title">vuzpq_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">uint16x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4x2_t</span> <span class="title">vuzpq_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">uint32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x16x2_t</span> <span class="title">vuzpq_p8</span> <span class="params">(<span class="keyword">poly8x16_t</span> __a, <span class="keyword">poly8x16_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x8x2_t</span> <span class="title">vuzpq_p16</span> <span class="params">(<span class="keyword">poly16x8_t</span> __a, <span class="keyword">poly16x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/*********************************************************Load**************************/</span></span><br><span class="line"><span class="comment">/*--1、Load a single vector from memory: vld1 -&gt; loads a vector from memory.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vld1_s8</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int8_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vld1_s16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int16_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vld1_s32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int32_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x1_t</span> <span class="title">vld1_s64</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int64_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x2_t</span> <span class="title">vld1_f32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">float32_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vld1_u8</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint8_t</span> * __a)</span></span>;<span class="comment">//_mm_loadl_epi64</span></span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vld1_u16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint16_t</span> * __a)</span></span>;<span class="comment">//_mm_loadl_epi64</span></span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vld1_u32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint32_t</span> * __a)</span></span>;<span class="comment">//_mm_loadl_epi64</span></span><br><span class="line"><span class="function"><span class="keyword">uint64x1_t</span> <span class="title">vld1_u64</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint64_t</span> * __a)</span></span>;<span class="comment">//_mm_loadl_epi64</span></span><br><span class="line"><span class="function"><span class="keyword">poly8x8_t</span> <span class="title">vld1_p8</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">poly8_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x4_t</span> <span class="title">vld1_p16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">poly16_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vld1q_s8</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int8_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vld1q_s16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int16_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vld1q_s32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int32_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vld1q_s64</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int64_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x4_t</span> <span class="title">vld1q_f32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">float32_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vld1q_u8</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint8_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vld1q_u16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint16_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vld1q_u32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint32_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vld1q_u64</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint64_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x16_t</span> <span class="title">vld1q_p8</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">poly8_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x8_t</span> <span class="title">vld1q_p16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">poly16_t</span> * __a)</span></span>;</span><br><span class="line"><span class="comment">/*--2、Load a single lane from memory: vld1 -&gt; loads one element of the input vector </span></span><br><span class="line"><span class="comment">from memory and returns this in the result vector. Elements of the vector that are not</span></span><br><span class="line"><span class="comment">loaded are returned in the result vector unaltered. </span></span><br><span class="line"><span class="comment">c is the index of the element to load.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vld1_lane_s8</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int8_t</span> * __a, <span class="keyword">int8x8_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;<span class="comment">//_mm_insert_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vld1_lane_s16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int16_t</span> * __a, <span class="keyword">int16x4_t</span> __b,</span></span></span><br><span class="line"><span class="params"><span class="function">	<span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;<span class="comment">//_mm_insert_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vld1_lane_s32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int32_t</span> * __a, <span class="keyword">int32x2_t</span> __b, </span></span></span><br><span class="line"><span class="params"><span class="function">	<span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;<span class="comment">//_mm_insert_epi32</span></span><br><span class="line"><span class="function"><span class="keyword">float32x2_t</span> <span class="title">vld1_lane_f32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">float32_t</span> * __a, <span class="keyword">float32x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vld1_lane_u8</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint8_t</span> * __a, <span class="keyword">uint8x8_t</span> __b, </span></span></span><br><span class="line"><span class="params"><span class="function">	<span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;<span class="comment">//_mm_insert_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vld1_lane_u16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint16_t</span> * __a, <span class="keyword">uint16x4_t</span> __b, </span></span></span><br><span class="line"><span class="params"><span class="function">	<span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;<span class="comment">//_mm_insert_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vld1_lane_u32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint32_t</span> * __a, <span class="keyword">uint32x2_t</span> __b, </span></span></span><br><span class="line"><span class="params"><span class="function">	<span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;<span class="comment">//_mm_insert_epi32</span></span><br><span class="line"><span class="function"><span class="keyword">poly8x8_t</span> <span class="title">vld1_lane_p8</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">poly8_t</span> * __a, <span class="keyword">poly8x8_t</span> __b, </span></span></span><br><span class="line"><span class="params"><span class="function">	<span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;<span class="comment">//_mm_insert_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">poly16x4_t</span> <span class="title">vld1_lane_p16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">poly16_t</span> * __a, <span class="keyword">poly16x4_t</span> __b, </span></span></span><br><span class="line"><span class="params"><span class="function">	<span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;<span class="comment">//_mm_insert_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">int64x1_t</span> <span class="title">vld1_lane_s64</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int64_t</span> * __a, <span class="keyword">int64x1_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x1_t</span> <span class="title">vld1_lane_u64</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint64_t</span> * __a, <span class="keyword">uint64x1_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vld1q_lane_s8</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int8_t</span> * __a, <span class="keyword">int8x16_t</span> __b, </span></span></span><br><span class="line"><span class="params"><span class="function">	<span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;<span class="comment">//_mm_insert_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vld1q_lane_s16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int16_t</span> * __a, <span class="keyword">int16x8_t</span> __b, </span></span></span><br><span class="line"><span class="params"><span class="function">	<span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;<span class="comment">//_mm_insert_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vld1q_lane_s32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int32_t</span> * __a, <span class="keyword">int32x4_t</span> __b, </span></span></span><br><span class="line"><span class="params"><span class="function">	<span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;<span class="comment">//_mm_insert_epi32</span></span><br><span class="line"><span class="function"><span class="keyword">float32x4_t</span> <span class="title">vld1q_lane_f32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">float32_t</span> * __a, <span class="keyword">float32x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vld1q_lane_u8</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint8_t</span> * __a, <span class="keyword">uint8x16_t</span> __b, </span></span></span><br><span class="line"><span class="params"><span class="function">	<span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;<span class="comment">//_mm_insert_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vld1q_lane_u16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint16_t</span> * __a, <span class="keyword">uint16x8_t</span> __b, </span></span></span><br><span class="line"><span class="params"><span class="function">	<span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;<span class="comment">//_mm_insert_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vld1q_lane_u32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint32_t</span> * __a, <span class="keyword">uint32x4_t</span> __b, </span></span></span><br><span class="line"><span class="params"><span class="function">	<span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;<span class="comment">//_mm_insert_epi32</span></span><br><span class="line"><span class="function"><span class="keyword">poly8x16_t</span> <span class="title">vld1q_lane_p8</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">poly8_t</span> * __a, <span class="keyword">poly8x16_t</span> __b, </span></span></span><br><span class="line"><span class="params"><span class="function">	<span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;<span class="comment">//_mm_insert_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">poly16x8_t</span> <span class="title">vld1q_lane_p16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">poly16_t</span> * __a, <span class="keyword">poly16x8_t</span> __b, </span></span></span><br><span class="line"><span class="params"><span class="function">	<span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;<span class="comment">//_mm_insert_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vld1q_lane_s64</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int64_t</span> * __a, <span class="keyword">int64x2_t</span> __b, </span></span></span><br><span class="line"><span class="params"><span class="function">	<span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;<span class="comment">//_mm_insert_epi64</span></span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vld1q_lane_u64</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint64_t</span> * __a, <span class="keyword">uint64x2_t</span> __b, </span></span></span><br><span class="line"><span class="params"><span class="function">	<span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;<span class="comment">//_mm_insert_epi64</span></span><br><span class="line"><span class="comment">/*--3、Load all lanes of vector with same value from memory: vld1 -&gt; </span></span><br><span class="line"><span class="comment">loads one element in a vector from memory. </span></span><br><span class="line"><span class="comment">The loaded element is copied to all other lanes of the vector.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vld1_dup_s8</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int8_t</span> * __a)</span></span>;<span class="comment">//_mm_set1_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vld1_dup_s16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int16_t</span> * __a)</span></span>;<span class="comment">//_mm_set1_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vld1_dup_s32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int32_t</span> * __a)</span></span>;<span class="comment">//_mm_set1_epi32</span></span><br><span class="line"><span class="function"><span class="keyword">float32x2_t</span> <span class="title">vld1_dup_f32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">float32_t</span> * __a)</span></span>;<span class="comment">//_mm_set1_ps</span></span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vld1_dup_u8</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint8_t</span> * __a)</span></span>;<span class="comment">//_mm_set1_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vld1_dup_u16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint16_t</span> * __a)</span></span>;<span class="comment">//_mm_set1_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vld1_dup_u32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint32_t</span> * __a)</span></span>;<span class="comment">//_mm_set1_epi32</span></span><br><span class="line"><span class="function"><span class="keyword">poly8x8_t</span> <span class="title">vld1_dup_p8</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">poly8_t</span> * __a)</span></span>;<span class="comment">//_mm_set1_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">poly16x4_t</span> <span class="title">vld1_dup_p16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">poly16_t</span> * __a)</span></span>;<span class="comment">//_mm_set1_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">int64x1_t</span> <span class="title">vld1_dup_s64</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int64_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x1_t</span> <span class="title">vld1_dup_u64</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint64_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vld1q_dup_s8</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int8_t</span> * __a)</span></span>;<span class="comment">//_mm_set1_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vld1q_dup_s16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int16_t</span> * __a)</span></span>;<span class="comment">//_mm_set1_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vld1q_dup_s32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int32_t</span> * __a)</span></span>;<span class="comment">//_mm_set1_epi32</span></span><br><span class="line"><span class="function"><span class="keyword">float32x4_t</span> <span class="title">vld1q_dup_f32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">float32_t</span> * __a)</span></span>;<span class="comment">//_mm_set1_ps</span></span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vld1q_dup_u8</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint8_t</span> * __a)</span></span>;<span class="comment">//_mm_set1_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vld1q_dup_u16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint16_t</span> * __a)</span></span>;<span class="comment">//_mm_set1_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vld1q_dup_u32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint32_t</span> * __a)</span></span>;<span class="comment">//_mm_set1_epi32</span></span><br><span class="line"><span class="function"><span class="keyword">poly8x16_t</span> <span class="title">vld1q_dup_p8</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">poly8_t</span> * __a)</span></span>;<span class="comment">//_mm_set1_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">poly16x8_t</span> <span class="title">vld1q_dup_p16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">poly16_t</span> * __a)</span></span>;<span class="comment">//_mm_set1_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vld1q_dup_s64</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int64_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vld1q_dup_u64</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint64_t</span> * __a)</span></span>;</span><br><span class="line"><span class="comment">/*--4、Load 2-element structure from memory: vld2 -&gt; loads 2 vectors from memory. </span></span><br><span class="line"><span class="comment">It performs a 2-way de-interleave from memory to the vectors.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8x2_t</span> <span class="title">vld2_s8</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int8_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4x2_t</span> <span class="title">vld2_s16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int16_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2x2_t</span> <span class="title">vld2_s32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int32_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x2x2_t</span> <span class="title">vld2_f32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">float32_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8x2_t</span> <span class="title">vld2_u8</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint8_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4x2_t</span> <span class="title">vld2_u16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint16_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2x2_t</span> <span class="title">vld2_u32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint32_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x8x2_t</span> <span class="title">vld2_p8</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">poly8_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x4x2_t</span> <span class="title">vld2_p16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">poly16_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x1x2_t</span> <span class="title">vld2_s64</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int64_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x1x2_t</span> <span class="title">vld2_u64</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint64_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x16x2_t</span> <span class="title">vld2q_s8</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int8_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8x2_t</span> <span class="title">vld2q_s16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int16_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4x2_t</span> <span class="title">vld2q_s32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int32_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x4x2_t</span> <span class="title">vld2q_f32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">float32_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16x2_t</span> <span class="title">vld2q_u8</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint8_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8x2_t</span> <span class="title">vld2q_u16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint16_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4x2_t</span> <span class="title">vld2q_u32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint32_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x16x2_t</span> <span class="title">vld2q_p8</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">poly8_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x8x2_t</span> <span class="title">vld2q_p16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">poly16_t</span> * __a)</span></span>;</span><br><span class="line"><span class="comment">/*--5、Load a single lane of 2-element structure from memory: vld2 -&gt; </span></span><br><span class="line"><span class="comment">loads two elements in a double-vector structure from memory and returns this in </span></span><br><span class="line"><span class="comment">the result. The loaded values are from consecutive memory addresses. </span></span><br><span class="line"><span class="comment">Elements in the structure that are not loaded are returned in the result unaltered. </span></span><br><span class="line"><span class="comment">c is the index of the elements to load.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8x2_t</span> <span class="title">vld2_lane_s8</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int8_t</span> * __a, <span class="keyword">int8x8x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4x2_t</span> <span class="title">vld2_lane_s16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int16_t</span> * __a, <span class="keyword">int16x4x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2x2_t</span> <span class="title">vld2_lane_s32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int32_t</span> * __a, <span class="keyword">int32x2x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x2x2_t</span> <span class="title">vld2_lane_f32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">float32_t</span> * __a, <span class="keyword">float32x2x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8x2_t</span> <span class="title">vld2_lane_u8</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint8_t</span> * __a, <span class="keyword">uint8x8x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4x2_t</span> <span class="title">vld2_lane_u16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint16_t</span> * __a, <span class="keyword">uint16x4x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2x2_t</span> <span class="title">vld2_lane_u32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint32_t</span> * __a, <span class="keyword">uint32x2x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x8x2_t</span> <span class="title">vld2_lane_p8</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">poly8_t</span> * __a, <span class="keyword">poly8x8x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x4x2_t</span> <span class="title">vld2_lane_p16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">poly16_t</span> * __a, <span class="keyword">poly16x4x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8x2_t</span> <span class="title">vld2q_lane_s16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int16_t</span> * __a, <span class="keyword">int16x8x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4x2_t</span> <span class="title">vld2q_lane_s32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int32_t</span> * __a, <span class="keyword">int32x4x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x4x2_t</span> <span class="title">vld2q_lane_f32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">float32_t</span> * __a, <span class="keyword">float32x4x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8x2_t</span> <span class="title">vld2q_lane_u16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint16_t</span> * __a, <span class="keyword">uint16x8x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4x2_t</span> <span class="title">vld2q_lane_u32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint32_t</span> * __a, <span class="keyword">uint32x4x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x8x2_t</span> <span class="title">vld2q_lane_p16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">poly16_t</span> * __a, <span class="keyword">poly16x8x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="comment">/*--6、Load all lanes of 2-element structure with same value from memory: vld2 -&gt; </span></span><br><span class="line"><span class="comment">loads 2 elements from memory and returns a double-vector structure. </span></span><br><span class="line"><span class="comment">The first element is copied to all lanes of the first vector. </span></span><br><span class="line"><span class="comment">The second element is copied to all lanes of the second vector.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8x2_t</span> <span class="title">vld2_dup_s8</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int8_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4x2_t</span> <span class="title">vld2_dup_s16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int16_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2x2_t</span> <span class="title">vld2_dup_s32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int32_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x2x2_t</span> <span class="title">vld2_dup_f32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">float32_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8x2_t</span> <span class="title">vld2_dup_u8</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint8_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4x2_t</span> <span class="title">vld2_dup_u16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint16_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2x2_t</span> <span class="title">vld2_dup_u32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint32_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x8x2_t</span> <span class="title">vld2_dup_p8</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">poly8_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x4x2_t</span> <span class="title">vld2_dup_p16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">poly16_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x1x2_t</span> <span class="title">vld2_dup_s64</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int64_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x1x2_t</span> <span class="title">vld2_dup_u64</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint64_t</span> * __a)</span></span>;</span><br><span class="line"><span class="comment">/*--7、Load 3-element structure from memory: vld3 -&gt; </span></span><br><span class="line"><span class="comment">loads 3 vectors from memory. </span></span><br><span class="line"><span class="comment">It performs a 3-way de-interleave from memory to the vectors.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8x3_t</span> <span class="title">vld3_s8</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int8_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4x3_t</span> <span class="title">vld3_s16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int16_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2x3_t</span> <span class="title">vld3_s32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int32_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x2x3_t</span> <span class="title">vld3_f32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">float32_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8x3_t</span> <span class="title">vld3_u8</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint8_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4x3_t</span> <span class="title">vld3_u16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint16_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2x3_t</span> <span class="title">vld3_u32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint32_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x8x3_t</span> <span class="title">vld3_p8</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">poly8_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x4x3_t</span> <span class="title">vld3_p16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">poly16_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x1x3_t</span> <span class="title">vld3_s64</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int64_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x1x3_t</span> <span class="title">vld3_u64</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint64_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x16x3_t</span> <span class="title">vld3q_s8</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int8_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8x3_t</span> <span class="title">vld3q_s16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int16_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4x3_t</span> <span class="title">vld3q_s32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int32_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x4x3_t</span> <span class="title">vld3q_f32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">float32_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16x3_t</span> <span class="title">vld3q_u8</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint8_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8x3_t</span> <span class="title">vld3q_u16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint16_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4x3_t</span> <span class="title">vld3q_u32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint32_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x16x3_t</span> <span class="title">vld3q_p8</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">poly8_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x8x3_t</span> <span class="title">vld3q_p16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">poly16_t</span> * __a)</span></span>;</span><br><span class="line"><span class="comment">/*--8、Load a single lane of 3-element structure from memory: vld3 -&gt; </span></span><br><span class="line"><span class="comment">loads three elements in a triple-vector structure from memory and returns this in the</span></span><br><span class="line"><span class="comment">result. The loaded values are from consecutive memory addresses. </span></span><br><span class="line"><span class="comment">Elements in the structure that are not loaded are returned in the result unaltered.</span></span><br><span class="line"><span class="comment">c is the index of the element to load.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8x3_t</span> <span class="title">vld3_lane_s8</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int8_t</span> * __a, <span class="keyword">int8x8x3_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4x3_t</span> <span class="title">vld3_lane_s16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int16_t</span> * __a, <span class="keyword">int16x4x3_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2x3_t</span> <span class="title">vld3_lane_s32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int32_t</span> * __a, <span class="keyword">int32x2x3_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x2x3_t</span> <span class="title">vld3_lane_f32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">float32_t</span> * __a, <span class="keyword">float32x2x3_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8x3_t</span> <span class="title">vld3_lane_u8</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint8_t</span> * __a, <span class="keyword">uint8x8x3_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4x3_t</span> <span class="title">vld3_lane_u16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint16_t</span> * __a, <span class="keyword">uint16x4x3_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2x3_t</span> <span class="title">vld3_lane_u32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint32_t</span> * __a, <span class="keyword">uint32x2x3_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x8x3_t</span> <span class="title">vld3_lane_p8</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">poly8_t</span> * __a, <span class="keyword">poly8x8x3_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x4x3_t</span> <span class="title">vld3_lane_p16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">poly16_t</span> * __a, <span class="keyword">poly16x4x3_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8x3_t</span> <span class="title">vld3q_lane_s16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int16_t</span> * __a, <span class="keyword">int16x8x3_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4x3_t</span> <span class="title">vld3q_lane_s32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int32_t</span> * __a, <span class="keyword">int32x4x3_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x4x3_t</span> <span class="title">vld3q_lane_f32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">float32_t</span> * __a, <span class="keyword">float32x4x3_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8x3_t</span> <span class="title">vld3q_lane_u16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint16_t</span> * __a, <span class="keyword">uint16x8x3_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4x3_t</span> <span class="title">vld3q_lane_u32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint32_t</span> * __a, <span class="keyword">uint32x4x3_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x8x3_t</span> <span class="title">vld3q_lane_p16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">poly16_t</span> * __a, <span class="keyword">poly16x8x3_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="comment">/*--9、Load all lanes of 3-element structure with same value from memory: vld3 -&gt;</span></span><br><span class="line"><span class="comment">loads 3 elements from memory and returns a triple-vector structure. The first element</span></span><br><span class="line"><span class="comment">is copied to all lanes of the first vector. And similarly the second and third elements </span></span><br><span class="line"><span class="comment">are copied to the second and third vectors respectively.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8x3_t</span> <span class="title">vld3_dup_s8</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int8_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4x3_t</span> <span class="title">vld3_dup_s16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int16_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2x3_t</span> <span class="title">vld3_dup_s32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int32_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x2x3_t</span> <span class="title">vld3_dup_f32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">float32_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8x3_t</span> <span class="title">vld3_dup_u8</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint8_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4x3_t</span> <span class="title">vld3_dup_u16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint16_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2x3_t</span> <span class="title">vld3_dup_u32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint32_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x8x3_t</span> <span class="title">vld3_dup_p8</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">poly8_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x4x3_t</span> <span class="title">vld3_dup_p16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">poly16_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x1x3_t</span> <span class="title">vld3_dup_s64</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int64_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x1x3_t</span> <span class="title">vld3_dup_u64</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint64_t</span> * __a)</span></span>;</span><br><span class="line"><span class="comment">/*--10、Load 4-element structure from memory: vld4 -&gt; </span></span><br><span class="line"><span class="comment">loads 4 vectors from memory. </span></span><br><span class="line"><span class="comment">It performs a 4-way de-interleave from memory to the vectors.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8x4_t</span> <span class="title">vld4_s8</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int8_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4x4_t</span> <span class="title">vld4_s16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int16_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2x4_t</span> <span class="title">vld4_s32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int32_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x2x4_t</span> <span class="title">vld4_f32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">float32_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8x4_t</span>  <span class="title">vld4_u8</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint8_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4x4_t</span> <span class="title">vld4_u16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint16_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2x4_t</span> <span class="title">vld4_u32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint32_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x8x4_t</span> <span class="title">vld4_p8</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">poly8_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x4x4_t</span> <span class="title">vld4_p16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">poly16_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x1x4_t</span> <span class="title">vld4_s64</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int64_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x1x4_t</span> <span class="title">vld4_u64</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint64_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x16x4_t</span> <span class="title">vld4q_s8</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int8_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8x4_t</span> <span class="title">vld4q_s16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int16_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4x4_t</span> <span class="title">vld4q_s32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int32_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x4x4_t</span> <span class="title">vld4q_f32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">float32_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16x4_t</span> <span class="title">vld4q_u8</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint8_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8x4_t</span> <span class="title">vld4q_u16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint16_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4x4_t</span> <span class="title">vld4q_u32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint32_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x16x4_t</span> <span class="title">vld4q_p8</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">poly8_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x8x4_t</span> <span class="title">vld4q_p16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">poly16_t</span> * __a)</span></span>;</span><br><span class="line"><span class="comment">/*--11、Load a single lane of 4-element structure from memory: vld4 -&gt; </span></span><br><span class="line"><span class="comment">loads four elements in a quad-vector structure from memory and returns this in the result. </span></span><br><span class="line"><span class="comment">The loaded values are from consecutive memory addresses.</span></span><br><span class="line"><span class="comment">Elements in the structure that are not loaded are returned in the result unaltered. </span></span><br><span class="line"><span class="comment">c is the index of the element to load.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8x4_t</span> <span class="title">vld4_lane_s8</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int8_t</span> * __a, <span class="keyword">int8x8x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4x4_t</span> <span class="title">vld4_lane_s16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int16_t</span> * __a, <span class="keyword">int16x4x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2x4_t</span> <span class="title">vld4_lane_s32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int32_t</span> * __a, <span class="keyword">int32x2x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x2x4_t</span> <span class="title">vld4_lane_f32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">float32_t</span> * __a, <span class="keyword">float32x2x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8x4_t</span> <span class="title">vld4_lane_u8</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint8_t</span> * __a, <span class="keyword">uint8x8x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4x4_t</span> <span class="title">vld4_lane_u16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint16_t</span> * __a, <span class="keyword">uint16x4x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2x4_t</span> <span class="title">vld4_lane_u32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint32_t</span> * __a, <span class="keyword">uint32x2x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x8x4_t</span> <span class="title">vld4_lane_p8</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">poly8_t</span> * __a, <span class="keyword">poly8x8x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x4x4_t</span> <span class="title">vld4_lane_p16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">poly16_t</span> * __a, <span class="keyword">poly16x4x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8x4_t</span> <span class="title">vld4q_lane_s16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int16_t</span> * __a, <span class="keyword">int16x8x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4x4_t</span> <span class="title">vld4q_lane_s32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int32_t</span> * __a, <span class="keyword">int32x4x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x4x4_t</span> <span class="title">vld4q_lane_f32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">float32_t</span> * __a, <span class="keyword">float32x4x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8x4_t</span> <span class="title">vld4q_lane_u16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint16_t</span> * __a, <span class="keyword">uint16x8x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4x4_t</span> <span class="title">vld4q_lane_u32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint32_t</span> * __a, <span class="keyword">uint32x4x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x8x4_t</span> <span class="title">vld4q_lane_p16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">poly16_t</span> * __a, <span class="keyword">poly16x8x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="comment">/*--12、Load all lanes of 4-element structure with same value from memory: vld4 -&gt;</span></span><br><span class="line"><span class="comment">loads 4 elements from memory and returns a quad-vector structure. The first element is </span></span><br><span class="line"><span class="comment">copied to all lanes of the first vector. And similarly the second, third, and fourth </span></span><br><span class="line"><span class="comment">elements are copied to the second, third, and fourth vectors respectively.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8x4_t</span> <span class="title">vld4_dup_s8</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int8_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4x4_t</span> <span class="title">vld4_dup_s16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int16_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2x4_t</span> <span class="title">vld4_dup_s32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int32_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x2x4_t</span> <span class="title">vld4_dup_f32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">float32_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8x4_t</span> <span class="title">vld4_dup_u8</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint8_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4x4_t</span> <span class="title">vld4_dup_u16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint16_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2x4_t</span> <span class="title">vld4_dup_u32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint32_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x8x4_t</span> <span class="title">vld4_dup_p8</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">poly8_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x4x4_t</span> <span class="title">vld4_dup_p16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">poly16_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x1x4_t</span> <span class="title">vld4_dup_s64</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int64_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x1x4_t</span> <span class="title">vld4_dup_u64</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint64_t</span> * __a)</span></span>;</span><br><span class="line"><span class="comment">/*****************************************************Store*****************************/</span></span><br><span class="line"><span class="comment">/*--1、Store a single vector into memory: vst1 -&gt; stores a vector into memory.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst1_s8</span> <span class="params">(<span class="keyword">int8_t</span> * __a, <span class="keyword">int8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst1_s16</span> <span class="params">(<span class="keyword">int16_t</span> * __a, <span class="keyword">int16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst1_s32</span> <span class="params">(<span class="keyword">int32_t</span> * __a, <span class="keyword">int32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst1_s64</span> <span class="params">(<span class="keyword">int64_t</span> * __a, <span class="keyword">int64x1_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst1_f32</span> <span class="params">(<span class="keyword">float32_t</span> * __a, <span class="keyword">float32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst1_u8</span> <span class="params">(<span class="keyword">uint8_t</span> * __a, <span class="keyword">uint8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst1_u16</span> <span class="params">(<span class="keyword">uint16_t</span> * __a, <span class="keyword">uint16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst1_u32</span> <span class="params">(<span class="keyword">uint32_t</span> * __a, <span class="keyword">uint32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst1_u64</span> <span class="params">(<span class="keyword">uint64_t</span> * __a, <span class="keyword">uint64x1_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst1_p8</span> <span class="params">(<span class="keyword">poly8_t</span> * __a, <span class="keyword">poly8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst1_p16</span> <span class="params">(<span class="keyword">poly16_t</span> * __a, <span class="keyword">poly16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst1q_s8</span> <span class="params">(<span class="keyword">int8_t</span> * __a, <span class="keyword">int8x16_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst1q_s16</span> <span class="params">(<span class="keyword">int16_t</span> * __a, <span class="keyword">int16x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst1q_s32</span> <span class="params">(<span class="keyword">int32_t</span> * __a, <span class="keyword">int32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst1q_s64</span> <span class="params">(<span class="keyword">int64_t</span> * __a, <span class="keyword">int64x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst1q_f32</span> <span class="params">(<span class="keyword">float32_t</span> * __a, <span class="keyword">float32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst1q_u8</span> <span class="params">(<span class="keyword">uint8_t</span> * __a, <span class="keyword">uint8x16_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst1q_u16</span> <span class="params">(<span class="keyword">uint16_t</span> * __a, <span class="keyword">uint16x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst1q_u32</span> <span class="params">(<span class="keyword">uint32_t</span> * __a, <span class="keyword">uint32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst1q_u64</span> <span class="params">(<span class="keyword">uint64_t</span> * __a, <span class="keyword">uint64x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst1q_p8</span> <span class="params">(<span class="keyword">poly8_t</span> * __a, <span class="keyword">poly8x16_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst1q_p16</span> <span class="params">(<span class="keyword">poly16_t</span> * __a, <span class="keyword">poly16x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/*--2、Store a single lane into memory: vst1 -&gt; </span></span><br><span class="line"><span class="comment">stores one element of the vector into memory. </span></span><br><span class="line"><span class="comment">c is the index in the vector to be stored.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst1_lane_s8</span> <span class="params">(<span class="keyword">int8_t</span> * __a, <span class="keyword">int8x8_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst1_lane_s16</span> <span class="params">(<span class="keyword">int16_t</span> * __a, <span class="keyword">int16x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst1_lane_s32</span> <span class="params">(<span class="keyword">int32_t</span> * __a, <span class="keyword">int32x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst1_lane_f32</span> <span class="params">(<span class="keyword">float32_t</span> * __a, <span class="keyword">float32x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst1_lane_u8</span> <span class="params">(<span class="keyword">uint8_t</span> * __a, <span class="keyword">uint8x8_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst1_lane_u16</span> <span class="params">(<span class="keyword">uint16_t</span> * __a, <span class="keyword">uint16x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst1_lane_u32</span> <span class="params">(<span class="keyword">uint32_t</span> * __a, <span class="keyword">uint32x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst1_lane_p8</span> <span class="params">(<span class="keyword">poly8_t</span> * __a, <span class="keyword">poly8x8_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst1_lane_p16</span> <span class="params">(<span class="keyword">poly16_t</span> * __a, <span class="keyword">poly16x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst1_lane_s64</span> <span class="params">(<span class="keyword">int64_t</span> * __a, <span class="keyword">int64x1_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst1_lane_u64</span> <span class="params">(<span class="keyword">uint64_t</span> * __a, <span class="keyword">uint64x1_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst1q_lane_s8</span> <span class="params">(<span class="keyword">int8_t</span> * __a, <span class="keyword">int8x16_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst1q_lane_s16</span> <span class="params">(<span class="keyword">int16_t</span> * __a, <span class="keyword">int16x8_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst1q_lane_s32</span> <span class="params">(<span class="keyword">int32_t</span> * __a, <span class="keyword">int32x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst1q_lane_f32</span> <span class="params">(<span class="keyword">float32_t</span> * __a, <span class="keyword">float32x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst1q_lane_u8</span> <span class="params">(<span class="keyword">uint8_t</span> * __a, <span class="keyword">uint8x16_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst1q_lane_u16</span> <span class="params">(<span class="keyword">uint16_t</span> * __a, <span class="keyword">uint16x8_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst1q_lane_u32</span> <span class="params">(<span class="keyword">uint32_t</span> * __a, <span class="keyword">uint32x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst1q_lane_p8</span> <span class="params">(<span class="keyword">poly8_t</span> * __a, <span class="keyword">poly8x16_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst1q_lane_p16</span> <span class="params">(<span class="keyword">poly16_t</span> * __a, <span class="keyword">poly16x8_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst1q_lane_s64</span> <span class="params">(<span class="keyword">int64_t</span> * __a, <span class="keyword">int64x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst1q_lane_u64</span> <span class="params">(<span class="keyword">uint64_t</span> * __a, <span class="keyword">uint64x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="comment">/*--3、Store 2 vectors into memory: vst2 -&gt; </span></span><br><span class="line"><span class="comment">stores 2 vectors into memory. It interleaves the 2 vectors into memory.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst2_s8</span> <span class="params">(<span class="keyword">int8_t</span> * __a, <span class="keyword">int8x8x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst2_s16</span> <span class="params">(<span class="keyword">int16_t</span> * __a, <span class="keyword">int16x4x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst2_s32</span> <span class="params">(<span class="keyword">int32_t</span> * __a, <span class="keyword">int32x2x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst2_f32</span> <span class="params">(<span class="keyword">float32_t</span> * __a, <span class="keyword">float32x2x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst2_u8</span> <span class="params">(<span class="keyword">uint8_t</span> * __a, <span class="keyword">uint8x8x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst2_u16</span> <span class="params">(<span class="keyword">uint16_t</span> * __a, <span class="keyword">uint16x4x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst2_u32</span> <span class="params">(<span class="keyword">uint32_t</span> * __a, <span class="keyword">uint32x2x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst2_p8</span> <span class="params">(<span class="keyword">poly8_t</span> * __a, <span class="keyword">poly8x8x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst2_p16</span> <span class="params">(<span class="keyword">poly16_t</span> * __a, <span class="keyword">poly16x4x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst2_s64</span> <span class="params">(<span class="keyword">int64_t</span> * __a, <span class="keyword">int64x1x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst2_u64</span> <span class="params">(<span class="keyword">uint64_t</span> * __a, <span class="keyword">uint64x1x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst2q_s8</span> <span class="params">(<span class="keyword">int8_t</span> * __a, <span class="keyword">int8x16x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst2q_s16</span> <span class="params">(<span class="keyword">int16_t</span> * __a, <span class="keyword">int16x8x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst2q_s32</span> <span class="params">(<span class="keyword">int32_t</span> * __a, <span class="keyword">int32x4x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst2q_f32</span> <span class="params">(<span class="keyword">float32_t</span> * __a, <span class="keyword">float32x4x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst2q_u8</span> <span class="params">(<span class="keyword">uint8_t</span> * __a, <span class="keyword">uint8x16x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst2q_u16</span> <span class="params">(<span class="keyword">uint16_t</span> * __a, <span class="keyword">uint16x8x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst2q_u32</span> <span class="params">(<span class="keyword">uint32_t</span> * __a, <span class="keyword">uint32x4x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst2q_p8</span> <span class="params">(<span class="keyword">poly8_t</span> * __a, <span class="keyword">poly8x16x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst2q_p16</span> <span class="params">(<span class="keyword">poly16_t</span> * __a, <span class="keyword">poly16x8x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/*--4、Store a lane of two elements into memory: vst2 -&gt;</span></span><br><span class="line"><span class="comment">stores a lane of two elements from a double-vector structure into memory.</span></span><br><span class="line"><span class="comment">The elements to be stored are from the same lane in the vectors and their index is c.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst2_lane_s8</span> <span class="params">(<span class="keyword">int8_t</span> * __a, <span class="keyword">int8x8x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst2_lane_s16</span> <span class="params">(<span class="keyword">int16_t</span> * __a, <span class="keyword">int16x4x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst2_lane_s32</span> <span class="params">(<span class="keyword">int32_t</span> * __a, <span class="keyword">int32x2x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst2_lane_f32</span> <span class="params">(<span class="keyword">float32_t</span> * __a, <span class="keyword">float32x2x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst2_lane_u8</span> <span class="params">(<span class="keyword">uint8_t</span> * __a, <span class="keyword">uint8x8x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst2_lane_u16</span> <span class="params">(<span class="keyword">uint16_t</span> * __a, <span class="keyword">uint16x4x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst2_lane_u32</span> <span class="params">(<span class="keyword">uint32_t</span> * __a, <span class="keyword">uint32x2x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst2_lane_p8</span> <span class="params">(<span class="keyword">poly8_t</span> * __a, <span class="keyword">poly8x8x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst2_lane_p16</span> <span class="params">(<span class="keyword">poly16_t</span> * __a, <span class="keyword">poly16x4x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst2q_lane_s16</span> <span class="params">(<span class="keyword">int16_t</span> * __a, <span class="keyword">int16x8x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst2q_lane_s32</span> <span class="params">(<span class="keyword">int32_t</span> * __a, <span class="keyword">int32x4x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst2q_lane_f32</span> <span class="params">(<span class="keyword">float32_t</span> * __a, <span class="keyword">float32x4x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst2q_lane_u16</span> <span class="params">(<span class="keyword">uint16_t</span> * __a, <span class="keyword">uint16x8x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst2q_lane_u32</span> <span class="params">(<span class="keyword">uint32_t</span> * __a, <span class="keyword">uint32x4x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst2q_lane_p16</span> <span class="params">(<span class="keyword">poly16_t</span> * __a, <span class="keyword">poly16x8x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="comment">/*--5、Store 3 vectors into memory: vst3 -&gt; </span></span><br><span class="line"><span class="comment">stores 3 vectors into memory. It interleaves the 3 vectors into memory.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst3_s8</span> <span class="params">(<span class="keyword">int8_t</span> * __a, <span class="keyword">int8x8x3_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst3_s16</span> <span class="params">(<span class="keyword">int16_t</span> * __a, <span class="keyword">int16x4x3_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst3_s32</span> <span class="params">(<span class="keyword">int32_t</span> * __a, <span class="keyword">int32x2x3_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst3_f32</span> <span class="params">(<span class="keyword">float32_t</span> * __a, <span class="keyword">float32x2x3_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span>  <span class="title">vst3_u8</span> <span class="params">(<span class="keyword">uint8_t</span> * __a, <span class="keyword">uint8x8x3_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst3_u16</span> <span class="params">(<span class="keyword">uint16_t</span> * __a, <span class="keyword">uint16x4x3_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst3_u32</span> <span class="params">(<span class="keyword">uint32_t</span> * __a, <span class="keyword">uint32x2x3_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst3_p8</span> <span class="params">(<span class="keyword">poly8_t</span> * __a, <span class="keyword">poly8x8x3_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst3_p16</span> <span class="params">(<span class="keyword">poly16_t</span> * __a, <span class="keyword">poly16x4x3_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst3_s64</span> <span class="params">(<span class="keyword">int64_t</span> * __a, <span class="keyword">int64x1x3_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst3_u64</span> <span class="params">(<span class="keyword">uint64_t</span> * __a, <span class="keyword">uint64x1x3_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst3q_s8</span> <span class="params">(<span class="keyword">int8_t</span> * __a, <span class="keyword">int8x16x3_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst3q_s16</span> <span class="params">(<span class="keyword">int16_t</span> * __a, <span class="keyword">int16x8x3_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst3q_s32</span> <span class="params">(<span class="keyword">int32_t</span> * __a, <span class="keyword">int32x4x3_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst3q_f32</span> <span class="params">(<span class="keyword">float32_t</span> * __a, <span class="keyword">float32x4x3_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst3q_u8</span> <span class="params">(<span class="keyword">uint8_t</span> * __a, <span class="keyword">uint8x16x3_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst3q_u16</span> <span class="params">(<span class="keyword">uint16_t</span> * __a, <span class="keyword">uint16x8x3_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst3q_u32</span> <span class="params">(<span class="keyword">uint32_t</span> * __a, <span class="keyword">uint32x4x3_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst3q_p8</span> <span class="params">(<span class="keyword">poly8_t</span> * __a, <span class="keyword">poly8x16x3_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst3q_p16</span> <span class="params">(<span class="keyword">poly16_t</span> * __a, <span class="keyword">poly16x8x3_t</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/*--6、Store a lane of three elements into memory: vst3 -&gt;</span></span><br><span class="line"><span class="comment">stores a lane of three elements from a triple-vector structure into memory. </span></span><br><span class="line"><span class="comment">The elements to be stored are from the same lane in the vectors and their index is c.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst3_lane_s8</span> <span class="params">(<span class="keyword">int8_t</span> * __a, <span class="keyword">int8x8x3_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst3_lane_s16</span> <span class="params">(<span class="keyword">int16_t</span> * __a, <span class="keyword">int16x4x3_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst3_lane_s32</span> <span class="params">(<span class="keyword">int32_t</span> * __a, <span class="keyword">int32x2x3_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst3_lane_f32</span> <span class="params">(<span class="keyword">float32_t</span> * __a, <span class="keyword">float32x2x3_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst3_lane_u8</span> <span class="params">(<span class="keyword">uint8_t</span> * __a, <span class="keyword">uint8x8x3_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst3_lane_u16</span> <span class="params">(<span class="keyword">uint16_t</span> * __a, <span class="keyword">uint16x4x3_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst3_lane_u32</span> <span class="params">(<span class="keyword">uint32_t</span> * __a, <span class="keyword">uint32x2x3_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst3_lane_p8</span> <span class="params">(<span class="keyword">poly8_t</span> * __a, <span class="keyword">poly8x8x3_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst3_lane_p16</span> <span class="params">(<span class="keyword">poly16_t</span> * __a, <span class="keyword">poly16x4x3_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst3q_lane_s16</span> <span class="params">(<span class="keyword">int16_t</span> * __a, <span class="keyword">int16x8x3_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst3q_lane_s32</span> <span class="params">(<span class="keyword">int32_t</span> * __a, <span class="keyword">int32x4x3_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst3q_lane_f32</span> <span class="params">(<span class="keyword">float32_t</span> * __a, <span class="keyword">float32x4x3_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst3q_lane_u16</span> <span class="params">(<span class="keyword">uint16_t</span> * __a, <span class="keyword">uint16x8x3_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst3q_lane_u32</span> <span class="params">(<span class="keyword">uint32_t</span> * __a, <span class="keyword">uint32x4x3_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst3q_lane_p16</span> <span class="params">(<span class="keyword">poly16_t</span> * __a, <span class="keyword">poly16x8x3_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="comment">/*--7、Store 4 vectors into memory: vst4 -&gt; </span></span><br><span class="line"><span class="comment">stores 4 vectors into memory. It interleaves the 4 vectors into memory.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst4_s8</span> <span class="params">(<span class="keyword">int8_t</span> * __a, <span class="keyword">int8x8x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst4_s16</span> <span class="params">(<span class="keyword">int16_t</span> * __a, <span class="keyword">int16x4x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst4_s32</span> <span class="params">(<span class="keyword">int32_t</span> * __a, <span class="keyword">int32x2x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst4_f32</span> <span class="params">(<span class="keyword">float32_t</span> * __a, <span class="keyword">float32x2x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst4_u8</span> <span class="params">(<span class="keyword">uint8_t</span> * __a, <span class="keyword">uint8x8x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst4_u16</span> <span class="params">(<span class="keyword">uint16_t</span> * __a, <span class="keyword">uint16x4x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst4_u32</span> <span class="params">(<span class="keyword">uint32_t</span> * __a, <span class="keyword">uint32x2x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst4_p8</span> <span class="params">(<span class="keyword">poly8_t</span> * __a, <span class="keyword">poly8x8x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst4_p16</span> <span class="params">(<span class="keyword">poly16_t</span> * __a, <span class="keyword">poly16x4x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst4_s64</span> <span class="params">(<span class="keyword">int64_t</span> * __a, <span class="keyword">int64x1x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst4_u64</span> <span class="params">(<span class="keyword">uint64_t</span> * __a, <span class="keyword">uint64x1x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst4q_s8</span> <span class="params">(<span class="keyword">int8_t</span> * __a, <span class="keyword">int8x16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst4q_s16</span> <span class="params">(<span class="keyword">int16_t</span> * __a, <span class="keyword">int16x8x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst4q_s32</span> <span class="params">(<span class="keyword">int32_t</span> * __a, <span class="keyword">int32x4x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span>  <span class="title">vst4q_f32</span> <span class="params">(<span class="keyword">float32_t</span> * __a, <span class="keyword">float32x4x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst4q_u8</span> <span class="params">(<span class="keyword">uint8_t</span> * __a, <span class="keyword">uint8x16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst4q_u16</span> <span class="params">(<span class="keyword">uint16_t</span> * __a, <span class="keyword">uint16x8x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst4q_u32</span> <span class="params">(<span class="keyword">uint32_t</span> * __a, <span class="keyword">uint32x4x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst4q_p8</span> <span class="params">(<span class="keyword">poly8_t</span> * __a, <span class="keyword">poly8x16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst4q_p16</span> <span class="params">(<span class="keyword">poly16_t</span> * __a, <span class="keyword">poly16x8x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/*--8、Store a lane of four elements into memory: vst4 -&gt;</span></span><br><span class="line"><span class="comment">stores a lane of four elements from a quad-vector structure into memory.</span></span><br><span class="line"><span class="comment">The elements to be stored are from the same lane in the vectors and their index is c.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst4_lane_s8</span> <span class="params">(<span class="keyword">int8_t</span> * __a, <span class="keyword">int8x8x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst4_lane_s16</span> <span class="params">(<span class="keyword">int16_t</span> * __a, <span class="keyword">int16x4x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst4_lane_s32</span> <span class="params">(<span class="keyword">int32_t</span> * __a, <span class="keyword">int32x2x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst4_lane_f32</span> <span class="params">(<span class="keyword">float32_t</span> * __a, <span class="keyword">float32x2x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst4_lane_u8</span> <span class="params">(<span class="keyword">uint8_t</span> * __a, <span class="keyword">uint8x8x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst4_lane_u16</span> <span class="params">(<span class="keyword">uint16_t</span> * __a, <span class="keyword">uint16x4x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst4_lane_u32</span> <span class="params">(<span class="keyword">uint32_t</span> * __a, <span class="keyword">uint32x2x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst4_lane_p8</span> <span class="params">(<span class="keyword">poly8_t</span> * __a, <span class="keyword">poly8x8x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst4_lane_p16</span> <span class="params">(<span class="keyword">poly16_t</span> * __a, <span class="keyword">poly16x4x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst4q_lane_s16</span> <span class="params">(<span class="keyword">int16_t</span> * __a, <span class="keyword">int16x8x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst4q_lane_s32</span> <span class="params">(<span class="keyword">int32_t</span> * __a, <span class="keyword">int32x4x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst4q_lane_f32</span> <span class="params">(<span class="keyword">float32_t</span> * __a, <span class="keyword">float32x4x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst4q_lane_u16</span> <span class="params">(<span class="keyword">uint16_t</span> * __a, <span class="keyword">uint16x8x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst4q_lane_u32</span> <span class="params">(<span class="keyword">uint32_t</span> * __a, <span class="keyword">uint32x4x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst4q_lane_p16</span> <span class="params">(<span class="keyword">poly16_t</span> * __a, <span class="keyword">poly16x8x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="comment">/*********************************Reinterpret casts(type conversion)********************/</span></span><br><span class="line"><span class="comment">/*--convert between types: vreinterpret -&gt; treats a vector as having a different </span></span><br><span class="line"><span class="comment">datatype, without changing its value.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">poly8x8_t</span> <span class="title">vreinterpret_p8_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x8_t</span> <span class="title">vreinterpret_p8_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x8_t</span> <span class="title">vreinterpret_p8_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x8_t</span> <span class="title">vreinterpret_p8_s64</span> <span class="params">(<span class="keyword">int64x1_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x8_t</span> <span class="title">vreinterpret_p8_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x8_t</span> <span class="title">vreinterpret_p8_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x8_t</span> <span class="title">vreinterpret_p8_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x8_t</span> <span class="title">vreinterpret_p8_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x8_t</span> <span class="title">vreinterpret_p8_u64</span> <span class="params">(<span class="keyword">uint64x1_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x8_t</span> <span class="title">vreinterpret_p8_p16</span> <span class="params">(<span class="keyword">poly16x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x16_t</span> <span class="title">vreinterpretq_p8_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x16_t</span> <span class="title">vreinterpretq_p8_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x16_t</span> <span class="title">vreinterpretq_p8_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x16_t</span> <span class="title">vreinterpretq_p8_s64</span> <span class="params">(<span class="keyword">int64x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x16_t</span> <span class="title">vreinterpretq_p8_f32</span> <span class="params">(<span class="keyword">float32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x16_t</span> <span class="title">vreinterpretq_p8_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x16_t</span> <span class="title">vreinterpretq_p8_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x16_t</span> <span class="title">vreinterpretq_p8_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x16_t</span> <span class="title">vreinterpretq_p8_u64</span> <span class="params">(<span class="keyword">uint64x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x16_t</span> <span class="title">vreinterpretq_p8_p16</span> <span class="params">(<span class="keyword">poly16x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x4_t</span> <span class="title">vreinterpret_p16_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x4_t</span> <span class="title">vreinterpret_p16_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x4_t</span> <span class="title">vreinterpret_p16_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x4_t</span> <span class="title">vreinterpret_p16_s64</span> <span class="params">(<span class="keyword">int64x1_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x4_t</span> <span class="title">vreinterpret_p16_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x4_t</span> <span class="title">vreinterpret_p16_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x4_t</span> <span class="title">vreinterpret_p16_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x4_t</span> <span class="title">vreinterpret_p16_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x4_t</span> <span class="title">vreinterpret_p16_u64</span> <span class="params">(<span class="keyword">uint64x1_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x4_t</span> <span class="title">vreinterpret_p16_p8</span> <span class="params">(<span class="keyword">poly8x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x8_t</span> <span class="title">vreinterpretq_p16_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x8_t</span> <span class="title">vreinterpretq_p16_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x8_t</span> <span class="title">vreinterpretq_p16_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x8_t</span> <span class="title">vreinterpretq_p16_s64</span> <span class="params">(<span class="keyword">int64x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x8_t</span> <span class="title">vreinterpretq_p16_f32</span> <span class="params">(<span class="keyword">float32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x8_t</span> <span class="title">vreinterpretq_p16_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x8_t</span> <span class="title">vreinterpretq_p16_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x8_t</span> <span class="title">vreinterpretq_p16_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x8_t</span> <span class="title">vreinterpretq_p16_u64</span> <span class="params">(<span class="keyword">uint64x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x8_t</span> <span class="title">vreinterpretq_p16_p8</span> <span class="params">(<span class="keyword">poly8x16_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x2_t</span> <span class="title">vreinterpret_f32_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x2_t</span> <span class="title">vreinterpret_f32_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x2_t</span> <span class="title">vreinterpret_f32_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x2_t</span> <span class="title">vreinterpret_f32_s64</span> <span class="params">(<span class="keyword">int64x1_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x2_t</span> <span class="title">vreinterpret_f32_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x2_t</span> <span class="title">vreinterpret_f32_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x2_t</span> <span class="title">vreinterpret_f32_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x2_t</span> <span class="title">vreinterpret_f32_u64</span> <span class="params">(<span class="keyword">uint64x1_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x2_t</span> <span class="title">vreinterpret_f32_p8</span> <span class="params">(<span class="keyword">poly8x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x2_t</span> <span class="title">vreinterpret_f32_p16</span> <span class="params">(<span class="keyword">poly16x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x4_t</span> <span class="title">vreinterpretq_f32_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x4_t</span> <span class="title">vreinterpretq_f32_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x4_t</span> <span class="title">vreinterpretq_f32_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x4_t</span> <span class="title">vreinterpretq_f32_s64</span> <span class="params">(<span class="keyword">int64x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x4_t</span> <span class="title">vreinterpretq_f32_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x4_t</span> <span class="title">vreinterpretq_f32_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x4_t</span> <span class="title">vreinterpretq_f32_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x4_t</span> <span class="title">vreinterpretq_f32_u64</span> <span class="params">(<span class="keyword">uint64x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x4_t</span> <span class="title">vreinterpretq_f32_p8</span> <span class="params">(<span class="keyword">poly8x16_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x4_t</span> <span class="title">vreinterpretq_f32_p16</span> <span class="params">(<span class="keyword">poly16x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x1_t</span> <span class="title">vreinterpret_s64_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x1_t</span> <span class="title">vreinterpret_s64_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x1_t</span> <span class="title">vreinterpret_s64_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x1_t</span> <span class="title">vreinterpret_s64_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x1_t</span> <span class="title">vreinterpret_s64_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x1_t</span> <span class="title">vreinterpret_s64_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x1_t</span> <span class="title">vreinterpret_s64_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x1_t</span> <span class="title">vreinterpret_s64_u64</span> <span class="params">(<span class="keyword">uint64x1_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x1_t</span> <span class="title">vreinterpret_s64_p8</span> <span class="params">(<span class="keyword">poly8x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x1_t</span> <span class="title">vreinterpret_s64_p16</span> <span class="params">(<span class="keyword">poly16x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vreinterpretq_s64_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vreinterpretq_s64_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vreinterpretq_s64_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vreinterpretq_s64_f32</span> <span class="params">(<span class="keyword">float32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vreinterpretq_s64_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vreinterpretq_s64_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vreinterpretq_s64_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vreinterpretq_s64_u64</span> <span class="params">(<span class="keyword">uint64x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vreinterpretq_s64_p8</span> <span class="params">(<span class="keyword">poly8x16_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vreinterpretq_s64_p16</span> <span class="params">(<span class="keyword">poly16x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x1_t</span> <span class="title">vreinterpret_u64_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x1_t</span> <span class="title">vreinterpret_u64_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x1_t</span> <span class="title">vreinterpret_u64_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x1_t</span> <span class="title">vreinterpret_u64_s64</span> <span class="params">(<span class="keyword">int64x1_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x1_t</span> <span class="title">vreinterpret_u64_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x1_t</span> <span class="title">vreinterpret_u64_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x1_t</span> <span class="title">vreinterpret_u64_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x1_t</span> <span class="title">vreinterpret_u64_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x1_t</span> <span class="title">vreinterpret_u64_p8</span> <span class="params">(<span class="keyword">poly8x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x1_t</span> <span class="title">vreinterpret_u64_p16</span> <span class="params">(<span class="keyword">poly16x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vreinterpretq_u64_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vreinterpretq_u64_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vreinterpretq_u64_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vreinterpretq_u64_s64</span> <span class="params">(<span class="keyword">int64x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vreinterpretq_u64_f32</span> <span class="params">(<span class="keyword">float32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vreinterpretq_u64_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vreinterpretq_u64_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vreinterpretq_u64_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vreinterpretq_u64_p8</span> <span class="params">(<span class="keyword">poly8x16_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vreinterpretq_u64_p16</span> <span class="params">(<span class="keyword">poly16x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vreinterpret_s8_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vreinterpret_s8_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vreinterpret_s8_s64</span> <span class="params">(<span class="keyword">int64x1_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vreinterpret_s8_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vreinterpret_s8_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vreinterpret_s8_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vreinterpret_s8_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vreinterpret_s8_u64</span> <span class="params">(<span class="keyword">uint64x1_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vreinterpret_s8_p8</span> <span class="params">(<span class="keyword">poly8x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vreinterpret_s8_p16</span> <span class="params">(<span class="keyword">poly16x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vreinterpretq_s8_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vreinterpretq_s8_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vreinterpretq_s8_s64</span> <span class="params">(<span class="keyword">int64x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vreinterpretq_s8_f32</span> <span class="params">(<span class="keyword">float32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vreinterpretq_s8_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vreinterpretq_s8_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vreinterpretq_s8_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vreinterpretq_s8_u64</span> <span class="params">(<span class="keyword">uint64x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vreinterpretq_s8_p8</span> <span class="params">(<span class="keyword">poly8x16_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vreinterpretq_s8_p16</span> <span class="params">(<span class="keyword">poly16x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vreinterpret_s16_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vreinterpret_s16_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vreinterpret_s16_s64</span> <span class="params">(<span class="keyword">int64x1_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vreinterpret_s16_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vreinterpret_s16_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vreinterpret_s16_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vreinterpret_s16_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vreinterpret_s16_u64</span> <span class="params">(<span class="keyword">uint64x1_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vreinterpret_s16_p8</span> <span class="params">(<span class="keyword">poly8x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vreinterpret_s16_p16</span> <span class="params">(<span class="keyword">poly16x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vreinterpretq_s16_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vreinterpretq_s16_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vreinterpretq_s16_s64</span> <span class="params">(<span class="keyword">int64x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vreinterpretq_s16_f32</span> <span class="params">(<span class="keyword">float32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vreinterpretq_s16_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vreinterpretq_s16_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vreinterpretq_s16_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vreinterpretq_s16_u64</span> <span class="params">(<span class="keyword">uint64x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vreinterpretq_s16_p8</span> <span class="params">(<span class="keyword">poly8x16_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vreinterpretq_s16_p16</span> <span class="params">(<span class="keyword">poly16x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vreinterpret_s32_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vreinterpret_s32_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vreinterpret_s32_s64</span> <span class="params">(<span class="keyword">int64x1_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vreinterpret_s32_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vreinterpret_s32_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vreinterpret_s32_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vreinterpret_s32_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vreinterpret_s32_u64</span> <span class="params">(<span class="keyword">uint64x1_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vreinterpret_s32_p8</span> <span class="params">(<span class="keyword">poly8x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vreinterpret_s32_p16</span> <span class="params">(<span class="keyword">poly16x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vreinterpretq_s32_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vreinterpretq_s32_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vreinterpretq_s32_s64</span> <span class="params">(<span class="keyword">int64x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vreinterpretq_s32_f32</span> <span class="params">(<span class="keyword">float32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vreinterpretq_s32_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vreinterpretq_s32_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vreinterpretq_s32_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vreinterpretq_s32_u64</span> <span class="params">(<span class="keyword">uint64x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vreinterpretq_s32_p8</span> <span class="params">(<span class="keyword">poly8x16_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vreinterpretq_s32_p16</span> <span class="params">(<span class="keyword">poly16x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vreinterpret_u8_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vreinterpret_u8_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vreinterpret_u8_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vreinterpret_u8_s64</span> <span class="params">(<span class="keyword">int64x1_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vreinterpret_u8_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vreinterpret_u8_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vreinterpret_u8_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vreinterpret_u8_u64</span> <span class="params">(<span class="keyword">uint64x1_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vreinterpret_u8_p8</span> <span class="params">(<span class="keyword">poly8x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vreinterpret_u8_p16</span> <span class="params">(<span class="keyword">poly16x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vreinterpretq_u8_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vreinterpretq_u8_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vreinterpretq_u8_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vreinterpretq_u8_s64</span> <span class="params">(<span class="keyword">int64x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vreinterpretq_u8_f32</span> <span class="params">(<span class="keyword">float32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vreinterpretq_u8_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vreinterpretq_u8_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vreinterpretq_u8_u64</span> <span class="params">(<span class="keyword">uint64x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vreinterpretq_u8_p8</span> <span class="params">(<span class="keyword">poly8x16_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vreinterpretq_u8_p16</span> <span class="params">(<span class="keyword">poly16x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vreinterpret_u16_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vreinterpret_u16_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vreinterpret_u16_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vreinterpret_u16_s64</span> <span class="params">(<span class="keyword">int64x1_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vreinterpret_u16_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vreinterpret_u16_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vreinterpret_u16_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vreinterpret_u16_u64</span> <span class="params">(<span class="keyword">uint64x1_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vreinterpret_u16_p8</span> <span class="params">(<span class="keyword">poly8x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vreinterpret_u16_p16</span> <span class="params">(<span class="keyword">poly16x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vreinterpretq_u16_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vreinterpretq_u16_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vreinterpretq_u16_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vreinterpretq_u16_s64</span> <span class="params">(<span class="keyword">int64x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vreinterpretq_u16_f32</span> <span class="params">(<span class="keyword">float32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vreinterpretq_u16_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vreinterpretq_u16_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vreinterpretq_u16_u64</span> <span class="params">(<span class="keyword">uint64x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vreinterpretq_u16_p8</span> <span class="params">(<span class="keyword">poly8x16_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vreinterpretq_u16_p16</span> <span class="params">(<span class="keyword">poly16x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vreinterpret_u32_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vreinterpret_u32_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vreinterpret_u32_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vreinterpret_u32_s64</span> <span class="params">(<span class="keyword">int64x1_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vreinterpret_u32_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vreinterpret_u32_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vreinterpret_u32_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vreinterpret_u32_u64</span> <span class="params">(<span class="keyword">uint64x1_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vreinterpret_u32_p8</span> <span class="params">(<span class="keyword">poly8x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vreinterpret_u32_p16</span> <span class="params">(<span class="keyword">poly16x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vreinterpretq_u32_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vreinterpretq_u32_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vreinterpretq_u32_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vreinterpretq_u32_s64</span> <span class="params">(<span class="keyword">int64x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vreinterpretq_u32_f32</span> <span class="params">(<span class="keyword">float32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vreinterpretq_u32_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vreinterpretq_u32_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vreinterpretq_u32_u64</span> <span class="params">(<span class="keyword">uint64x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vreinterpretq_u32_p8</span> <span class="params">(<span class="keyword">poly8x16_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vreinterpretq_u32_p16</span> <span class="params">(<span class="keyword">poly16x8_t</span> __a)</span></span>;</span><br></pre></td></tr></table></figure>
<h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><p><a href="https://blog.csdn.net/billbliss/article/details/78488013">neon指令速查</a></p>
]]></content>
      <categories>
        <category>NEON</category>
      </categories>
      <tags>
        <tag>NEON 指令</tag>
        <tag>部分 AVX 指令对照</tag>
      </tags>
  </entry>
</search>
