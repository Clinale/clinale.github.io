<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>处理器指令周期测试</title>
    <url>/2022/11/30/ARM%E5%A4%84%E7%90%86%E5%99%A8%E6%8C%87%E4%BB%A4%E5%91%A8%E6%9C%9F%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<h4 id="处理器微结构"><a href="#处理器微结构" class="headerlink" title="处理器微结构"></a>处理器微结构</h4><p>现代处理器为了增加指令的吞吐，引入了指令流水线。相比单指令周期处理器，指令流水线将一条指令的执行过程划分为多个阶段，经典的5级流水线包括：取指(Instruction Fetch, IF)、译码(Instruction Decode, ID)、执行(Execution, EX)、访存(Memory, MEM)和写回(Write Back, WB) 5个阶段。指令流水线的每个阶段都有一套独立的硬件单元，因此在理想状态下，每个时钟周期每个阶段对应的硬件单元都能执行一次对应的操作，这样就形成了流水线，处理器每个时钟周期就可以完成一条指令的执行。图1展示了5级流水线指令执行过程，从第5个时钟周期开始，每个时钟周期都会完成一条指令的执行。</p>
<span id="more"></span>
<p><img src="/2022/11/30/ARM%E5%A4%84%E7%90%86%E5%99%A8%E6%8C%87%E4%BB%A4%E5%91%A8%E6%9C%9F%E6%B5%8B%E8%AF%95/5级流水线.png" alt="image-20221130220009629" style="zoom: 70%;"></p>
<p align="center">图1 5级流水线</p>

<p>但是，流水线在实际执行过程中不可能一直这样流畅的执行下去，会存在以下3种冒险，阻塞流水线：</p>
<ul>
<li><p>结构冒险(Structural Hazard)</p>
<p>如果一条指令需要的硬件部分还在为之前的指令工作，而无法为这条指令提供服务，那就导致了结构冒险。</p>
</li>
<li><p>数据冒险(Data Hazard)</p>
<p>如果一条指令需要某数据而该数据正在被之前的指令操作，那这条指令就无法执行，从而导致了数据冒险。</p>
</li>
<li><p>控制冒险(Control Hazard)</p>
<p>如果现在要执行哪条指令，是由之前指令的运行结果决定，而现在那条之前指令的结果还没产生，就导致了控制冒险。</p>
</li>
</ul>
<h5 id="结构冒险-Structural-Hazard"><a href="#结构冒险-Structural-Hazard" class="headerlink" title="结构冒险(Structural Hazard)"></a>结构冒险(Structural Hazard)</h5><p>由于指令流水化，处理器在同一个时钟周期，同时运行两条指令的不同阶段。但是这两个不同的阶段，可能会用到同样的硬件电路，如果硬件无法同时支持指令的所有可能组合方式，就会出现资源冲突，从而导致结构冒险。结构冒险本质上是硬件层面的资源竞争问题，可以通过增加硬件资源来解决。</p>
<p>典型的结构冒险的例子是内存的数据访问。由图1可知，在第$i$条指令执行到<code>访存(MEM)</code>阶段的时候，第$i+3$条指令正在执行<code>取指(IF)</code>的操作。访存和取指都要进行内存数据的读取，而内存只有一个地址译码器作为地址输入，这就意味着在一个时钟周期里内存只能读取一条数据，无法同时执行第$i$条指令的访存和第$i+3$条指令的取指操作。</p>
<p>一种解决方案是将内存分成存放指令的程序内存和存放数据的数据内存，每块内存拥有各自的地址译码器。这样把内存拆成两部分的解决方案，在计算机体系结构里叫做哈佛结构，而与此对应的则被称为冯·诺伊曼结构，又被称为普林斯顿架构。</p>
<table border="0" style="margin-left: auto; margin-right: auto;">
        <tr>
            <td align="center">
                <!--左侧内容-->
                <img height="150" src="/2022/11/30/ARM%E5%A4%84%E7%90%86%E5%99%A8%E6%8C%87%E4%BB%A4%E5%91%A8%E6%9C%9F%E6%B5%8B%E8%AF%95/哈佛结构.jpg"><br>
                图2 哈佛结构
            </td>
            <td align="center">
                <!--右侧内容-->
                <img height="150" src="/2022/11/30/ARM%E5%A4%84%E7%90%86%E5%99%A8%E6%8C%87%E4%BB%A4%E5%91%A8%E6%9C%9F%E6%B5%8B%E8%AF%95/普林斯顿结构.jpg"><br>
                图3 冯诺依曼结构/普林斯顿结构
            </td>
        </tr>
</table>

<p>然而，虽然哈佛结构能够解决资源冲突问题，但是这为程序动态分配内存带来了挑战。因此，现代处理器依然采用冯·诺伊曼体系结构，同时借鉴了哈佛结构的思想，在处理器内部的高速缓存部分进行区分，把高速缓存分成了指令缓存(Instruction Cache)和数据缓存(Data Cache)两部分。</p>
<p><img src="/2022/11/30/ARM%E5%A4%84%E7%90%86%E5%99%A8%E6%8C%87%E4%BB%A4%E5%91%A8%E6%9C%9F%E6%B5%8B%E8%AF%95/混合结构.jpg" style="zoom:20%;"></p>
<p align="center">图4 现代处理器的混合结构</p>

<p>内存的访问速度远比处理器的速度慢很多，现代处理器并不会直接读取主内存，而是先从主内存把指令和数据加载到高速缓存中，然后直接访问高速缓存。指令缓存和数据缓存的拆分，使得处理器在进行访存和取值时，不会再发生资源冲突的问题。</p>
<h5 id="数据冒险-Data-Hazard"><a href="#数据冒险-Data-Hazard" class="headerlink" title="数据冒险(Data Hazard)"></a>数据冒险(Data Hazard)</h5><p>处理器中对寄存器和内存的操作包括读取(Read)和写入(Write)等2种操作，这2种操作能够组合出4个操作序列：</p>
<ul>
<li><p>先写后读(Read After Write, RAW)</p>
<p>上一条指令写入寄存器或内存，下一条指令读取写入数据，两条指令间存在<code>数据依赖(Data Dependency)</code>关系，后一条指令需要等待上一条指令运行结束之后再运行。</p>
</li>
<li><p>先读后写(Write After Read, WAR)</p>
<p>上一条指令读取寄存器或内存，下一条指令将新的数据写入同一个寄存器或内存，两条指令间存在<code>反依赖(Anti-Dependency)</code>关系。</p>
</li>
<li><p>写后再写(Write After Write, WAW)</p>
<p>两条指令前后写入同一个寄存器，两条指令间存在<code>输出依赖(Output Dependency)</code>关系。</p>
</li>
<li><p>读后再读(Read After Read, RAR)</p>
<p>两条指令前后读取同一个寄存器，无依赖关系。</p>
</li>
</ul>
<p>除了<code>读后再读</code>，对于同一个寄存器或者内存地址的操作，其他3种操作序列都要求指令必须按照顺序执行。然而，指令流水线架构的核心，就是在前一个指令还没有结束的时候，开始执行后面的指令。如果一条指令的执行取决于先前指令的结果，就可能导致数据冒险。数据冒险的本质就是在同时执行的多个指令之间，存在数据依赖的情况。虽然<code>WAR</code>和<code>WAW</code>不是真正的数据相关，处理器可能会使用寄存器重命名来解决，但是尽量不要写出这样的数据相关。</p>
<p>消除数据冒险就是要消除指令之间的数据依赖，让前后指令之间不存在数据相关。解决数据冒险的一个简单方法就是<strong>流水线停顿(Pipeline Stall)</strong>，又称<strong>流水线冒泡(Pipeline Bubbling)</strong>。在进行指令译码时，我们可以拿到指令所需要访问的寄存器和内存地址，从而就能够判断出来，这个指令是否会触发数据冒险，如果会触发数据冒险，我们可以让整个流水下停顿一个或多个周期。实际中并不是真的让流水线停下来，而是在执行后面的操作步骤之前，插入一个<code>NOP</code>操作，也就是执行一个什么也不做的操作。</p>
<h5 id="控制冒险-Control-Hazard"><a href="#控制冒险-Control-Hazard" class="headerlink" title="控制冒险(Control Hazard)"></a>控制冒险(Control Hazard)</h5><p>分支指令及其他改变程序计数器的指令会改变指令的流向，因此转移指令本身和流水线的模式是冲突的，当对转移指令实现流水化时，可能导致控制冒险。转移指令大体分为：</p>
<ul>
<li><p>直接转移：<code>j target</code></p>
<p>无条件直接跳转指令的跳转地址在取指阶段就能得到，所以流水线不用停顿。</p>
</li>
<li><p>间接转移：<code>jr r0</code></p>
<p>无条件间接跳转指令在<code>译码(ID)</code>阶段得出跳转地址，流水线需停顿1个周期才能解决控制冒险。</p>
</li>
<li><p>条件转移：<code>beq rs, rt, imm</code></p>
<p>条件跳转指令需要根据<code>执行(EX)</code>阶段的结果，判断是否跳转，需要等待2个周期。然而，实际上比较两个数是否相等十分简单，只需在<code>译码(ID)</code>阶段对寄存器的两个输出进行比较，从而可以将流水线停顿周期缩减为1个周期。</p>
</li>
</ul>
<p>除了利用流水线停顿解决控制冒险，另外一种解决方法是<strong>延迟转移技术</strong>，其通过调整指令的顺序，将一定会执行的指令放在分支指令后面，这样流水线不会停顿。但是需要注意，调整指令顺序一定不能改变这段代码原来的意义。</p>
<h4 id="流水线吞吐率"><a href="#流水线吞吐率" class="headerlink" title="流水线吞吐率"></a>流水线吞吐率</h4><p>指令流水线将一条指令的执行过程划分为多个阶段，每个阶段的部件可同时执行多条指令的不同部分，从而提高各部件的利用率和指令的平均执行速度。流水线的吞吐率(Throughout Put rate, TP)是指单位时间内流水线所完成的任务数量或输出的结果数量，反映了指令的平均执行速度。计算流水线吞吐率的最基本公式如下：</p>
<script type="math/tex; mode=display">
TP = 指令条数/流水线执行时间</script><p>通过消除指令间的结构冒险、数据冒险和控制冒险，可以测得指令的最大吞吐率 $TP_{max}$。通过消除指令间的结构冒险和控制冒险，但保留数据冒险，可以测得指令的最小吞吐率 $TP_{min}$。</p>
<p>最大吞吐率  $TP_{max}$ 反映了指令在不存在任何冒险的情况下的计算峰值，可用于<strong>评估程序优化空间</strong>。最小吞吐率 $TP_{min}$ 反映了指令在流水线失效情况下的计算延迟，可用于<strong>计算指令时钟周期</strong>。指令时钟周期计算公式为：</p>
<script type="math/tex; mode=display">
指令延迟 = 1/TP_{min} \\
指令周期 = 时钟频率 \times 指令延迟 = 时钟频率/TP_{min}</script><h4 id="指令峰值和延迟"><a href="#指令峰值和延迟" class="headerlink" title="指令峰值和延迟"></a>指令峰值和延迟</h4><p><a href="https://github.com/MegEngine/MegPeak">MegPeak</a> 是旷视 MegEngine 团队开发的一款用于测试目标处理器指令的峰值带宽、指令延迟、内存峰值带宽和任意指令组合峰值带宽的工具，可帮助开发人员：</p>
<ul>
<li>绘制 Roofline Model，指导开发人员优化模型性能</li>
<li>评估程序的优化空间</li>
<li>探索指令组合的理论计算峰值</li>
</ul>
<p>有关进一步的介绍请移步<a href="https://github.com/MegEngine/MegPeak#build">Readme</a>文档。</p>
<p>下面是 MegPeak 测试 Arm64 上 <code>fmla</code> 指令计算峰值的核心代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fmla_throughput</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">asm</span> <span class="title">volatile</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    	<span class="string">&quot;eor v0.16b, v0.16b, v0.16b\n&quot;</span></span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="string">&quot;eor v1.16b, v1.16b, v1.16b\n&quot;</span></span></span></span><br><span class="line"><span class="params"><span class="function">        ...</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="string">&quot;eor v19.16b, v19.16b, v19.16b\n&quot;</span></span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="string">&quot;mov x0, #0\n&quot;</span></span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="string">&quot;1:\n&quot;</span></span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="string">&quot;fmla v0.4s, v0.4s, v0.4s\n&quot;</span></span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="string">&quot;fmla v1.4s, v1.4s, v1.4s\n&quot;</span></span></span></span><br><span class="line"><span class="params"><span class="function">        ...</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="string">&quot;fmla v19.4s, v19.4s, v19.4s\n&quot;</span></span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="string">&quot;add x0, x0, #1 \n&quot;</span></span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="string">&quot;cmp x0, %x[RUNS] \n&quot;</span></span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="string">&quot;blt 1b \n&quot;</span></span></span></span><br><span class="line"><span class="params"><span class="function">        :</span></span></span><br><span class="line"><span class="params"><span class="function">        : [RUNS] <span class="string">&quot;r&quot;</span> (megpeak::RUNS)</span></span></span><br><span class="line"><span class="params"><span class="function">        : <span class="string">&quot;cc&quot;</span>, <span class="string">&quot;v0&quot;</span>, <span class="string">&quot;v1&quot;</span>, <span class="string">&quot;v2&quot;</span>, <span class="string">&quot;v3&quot;</span>, <span class="string">&quot;v4&quot;</span>, <span class="string">&quot;v5&quot;</span>, <span class="string">&quot;v6&quot;</span>, <span class="string">&quot;v7&quot;</span>, <span class="string">&quot;v8&quot;</span>, <span class="string">&quot;v9&quot;</span>, <span class="string">&quot;v10&quot;</span>, <span class="string">&quot;v11&quot;</span>, <span class="string">&quot;v12&quot;</span>, <span class="string">&quot;v13&quot;</span>, <span class="string">&quot;v14&quot;</span>, <span class="string">&quot;v15&quot;</span>, <span class="string">&quot;v16&quot;</span>, <span class="string">&quot;v17&quot;</span>, <span class="string">&quot;v18&quot;</span>, <span class="string">&quot;v19&quot;</span>, <span class="string">&quot;x0&quot;</span>)</span></span>;</span><br><span class="line">    <span class="keyword">return</span> megpeak::RUNS * <span class="number">20</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面的内嵌汇编代码主要做了2件事：</p>
<ul>
<li>初始化 0~19 号 NEON 寄存器为零，这一步不是必须的，但可以避免计算过程中出现 nan 导致的潜在影响；</li>
<li>创建主循环，主循环中执行 <code>fmla</code> 指令，从对应的寄存器读取数据，并将计算结果写入到相同的寄存器中，同一条指令内部没有数据相关。</li>
</ul>
<p>下面是 MegPeak 测试 Arm64 上 <code>fmla</code> 指令延迟的核心代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">fmla_latency</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">asm</span> <span class="title">volatile</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">    	<span class="string">&quot;eor v0.16b, v0.16b, v0.16b\n&quot;</span></span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="string">&quot;mov x0, #0\n&quot;</span></span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="string">&quot;1:\n&quot;</span></span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="string">&quot;fmla v0.4s, v0.4s, v0.4s\n&quot;</span></span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="comment">// 重复 20 次</span></span></span></span><br><span class="line"><span class="params"><span class="function">        ...</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="string">&quot;fmla v0.4s, v0.4s, v0.4s\n&quot;</span></span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="string">&quot;add x0, x0, #1 \n&quot;</span></span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="string">&quot;cmp x0, %x[RUNS] \n&quot;</span></span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="string">&quot;blt 1b \n&quot;</span></span></span></span><br><span class="line"><span class="params"><span class="function">        :</span></span></span><br><span class="line"><span class="params"><span class="function">        : [RUNS] <span class="string">&quot;r&quot;</span> (megpeak::RUNS)</span></span></span><br><span class="line"><span class="params"><span class="function">        : <span class="string">&quot;cc&quot;</span>, <span class="string">&quot;v0&quot;</span>, <span class="string">&quot;x0&quot;</span>)</span></span>;</span><br><span class="line">    <span class="keyword">return</span> megpeak::RUNS * <span class="number">20</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面的内嵌汇编代码中，将 <code>fmla v0.4s, v0.4s, v0.4s\n</code> 这条指令重复执行了 20 次，这样每条指令都依赖上一条指令的计算结果，所以存在严格的数据相关。通过统计执行时间和指令条数，可以计算出这条指令的计算延迟。</p>
<h4 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h4><p><a href="https://blog.csdn.net/zhizhengguan/article/details/121259357">计算机组成原理：结构冒险和数据冒险</a></p>
<p><a href="https://www.cnblogs.com/lfri/p/10053598.html#:~:text=%E6%8E%A7%E5%88%B6%E5%86%92%E9%99%A9%EF%BC%9A%E5%A6%82%E6%9E%9C%E7%8E%B0,%E5%AF%BC%E8%87%B4%E4%BA%86%E6%8E%A7%E5%88%B6%E5%86%92%E9%99%A9%E3%80%82">计算机组成与设计（十）—— 流水线的冒险</a></p>
<p><a href="https://zhuanlan.zhihu.com/p/522007924">MegPeak——让你更懂你的处理器</a></p>
<p><a href="https://www.specbranch.com/posts/intro-to-micro-optimization/">Introduction to Micro-Optimization</a></p>
]]></content>
      <categories>
        <category>处理器</category>
      </categories>
      <tags>
        <tag>指令流水线</tag>
        <tag>指令周期</tag>
        <tag>指令峰值</tag>
      </tags>
  </entry>
  <entry>
    <title>Docker 部署 ThinkPHP 5.x 容器</title>
    <url>/2021/07/29/Docker-%E9%83%A8%E7%BD%B2-thinkphp5-x-%E5%AE%B9%E5%99%A8/</url>
    <content><![CDATA[<h3 id="构建-Dockerfile-文件"><a href="#构建-Dockerfile-文件" class="headerlink" title="构建 Dockerfile 文件"></a>构建 Dockerfile 文件</h3><p>在<a href="https://hypc.github.io/2018/10/19/docker-thinkphp/">使用 Docker 部署 thinkphp 项目</a>中，作者介绍了三点注意事项：</p>
<blockquote>
<ol>
<li>thinkphp 的入口文件在 public 目录下，所以需要将<code>VirtualHost</code>的<code>DocumentRoot</code>指向 public 目录；</li>
<li>thinkphp 需要设置伪静态，Apache 需要加载<code>mod_rewrite.so</code>模块；</li>
<li>下载相应版本的 thinkphp 放到项目根目录下。</li>
</ol>
</blockquote>
<p>并给出了如下的 Dockerfile 配置：</p>
<span id="more"></span>
<figure class="highlight docker"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> php:<span class="number">5.6</span>-apache</span><br><span class="line"></span><br><span class="line"><span class="keyword">ENV</span> THINKPHP_VERSION=<span class="number">5.0</span>.<span class="number">21</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> ln -s /etc/apache2/mods-available/rewrite.load /etc/apache2/mods-enabled/rewrite.load \</span></span><br><span class="line"><span class="bash">    &amp;&amp; sed -i <span class="string">&#x27;s/AllowOverride None/AllowOverride All/g&#x27;</span> /etc/apache2/apache2.conf \</span></span><br><span class="line"><span class="bash">    &amp;&amp; sed -i <span class="string">&#x27;s/\/var\/www\/html/\/var\/www\/html\/public/g&#x27;</span> /etc/apache2/sites-enabled/000-default.conf</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> curl -OL https://github.com/top-think/framework/archive/v<span class="variable">$THINKPHP_VERSION</span>.tar.gz \</span></span><br><span class="line"><span class="bash">    &amp;&amp; tar xvf v<span class="variable">$THINKPHP_VERSION</span>.tar.gz &amp;&amp; mv framework-<span class="variable">$THINKPHP_VERSION</span> thinkphp</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> . /var/www/html/</span></span><br></pre></td></tr></table></figure>
<p>不过需要注意到，在仓库 <a href="https://github.com/top-think/framework.git">https://github.com/top-think/framework.git</a> 中，<strong>只提供了 thinkphp 框架，并没有提供相应的 Web 开发框架</strong>，而这可以在仓库 <a href="https://gitee.com/liu21st/thinkphp.git">https://gitee.com/liu21st/thinkphp.git</a> 中找到。</p>
<p>据此，修改后的 Dockerfile 配置为：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> php:<span class="number">5.6</span>-apache</span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> sed -i <span class="string">&#x27;s/deb.debian.org\|security.debian.org/mirrors.tuna.tsing.edu.cn/g&#x27;</span> /etc/apt/sources.list &amp;&amp; \</span></span><br><span class="line"><span class="bash">	apt update &amp;&amp; apt install -y git</span></span><br><span class="line">	</span><br><span class="line"><span class="keyword">ENV</span> THINKPHP_VERSION=<span class="number">5.0</span>.<span class="number">22</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> ln -s /etc/apache2/mods-available/rewrite.load /etc/apache2/mods-enabled/rewrite.load \</span></span><br><span class="line"><span class="bash">    &amp;&amp; sed -i <span class="string">&#x27;s/AllowOverride None/AllowOverride All/g&#x27;</span> /etc/apache2/apache2.conf \</span></span><br><span class="line"><span class="bash">    &amp;&amp; sed -i <span class="string">&#x27;s#/var/www/html#/var/www/html/tp5/public#g&#x27;</span> /etc/apache2/sites-enabled/000-default.conf</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> git <span class="built_in">clone</span> --depth 1 -b v<span class="variable">$THINKPHP_VERSION</span> https://gitee.com/liu21st/thinkphp.git ./tp5 &amp;&amp; \</span></span><br><span class="line"><span class="bash">    git <span class="built_in">clone</span> --depth 1 -b v<span class="variable">$THINKPHP_VERSION</span> https://gitee.com/liu21st/framework.git ./tp5/thinkphp</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> . /var/www/html/</span></span><br></pre></td></tr></table></figure>
<p>主要修改的地方有：</p>
<ul>
<li>第 3-4 行：将官方 apt 源修改为清华镜像源，并下载 git 工具</li>
<li>第 10 行：修改<code>DocumentRoot</code>指向的<code>public</code> 目录位置</li>
<li>第 12-13 行：拉取 ThinkPHP 5.0.22 的 <code>public</code> 等文件和 <code>thinkphp</code> 框架</li>
</ul>
<h3 id="创建并运行-ThinkPHP-容器"><a href="#创建并运行-ThinkPHP-容器" class="headerlink" title="创建并运行 ThinkPHP 容器"></a>创建并运行 ThinkPHP 容器</h3><p>基于 Dockerfile 文件，可以构建如下的 shell 脚本文件 <code>run-tp5.sh</code>：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">THINKPHP_VERSION=5.0.22</span><br><span class="line"></span><br><span class="line">if [[ -n $(docker image ls | grep -v local/thinkphp:v$&#123;THINKPHP_VERSION&#125;) ]]; then</span><br><span class="line">	echo &quot;create local image &#x27;local/thinkphp:v$&#123;THINKPHP_VERSION&#125;&#x27;&quot;</span><br><span class="line">	docker build -f &lt;path-to-Dockerfile&gt; -t local/thinkphp:v$&#123;THINKPHP_VERSION&#125; .</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [[ -n $(docker container ls | grep -v mytp5) ]]; then</span><br><span class="line">	echo &quot;create container &#x27;mytp5&#x27;&quot;</span><br><span class="line">	docker create -p 8080:80 --name mytp5 local/thinkphp:v$&#123;THINKPHP_VERSION&#125;</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [[ -n $(docker ps | grep -v mytp5 )]]; then</span><br><span class="line">	echo &quot;run conatiner &#x27;mytp5&#x27;&quot;</span><br><span class="line">	docker start mytp5</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">echo &quot;container &#x27;mytp5&#x27; has started&quot;</span><br></pre></td></tr></table></figure>
<p><code>run-tp5.sh</code> 脚本主要做了三件事：</p>
<ol>
<li>基于 <code>Dockerfile</code> 文件在当前目录创建本地镜像 <code>local/thinkphp:v5.0.22</code></li>
<li>基于本地镜像 <code>local/thinkphp:v5.0.22</code> 创建容器 <code>mytp5</code>，并将容器内部端口 80 映射为外部端口 8080</li>
<li>运行容器 <code>mytp5</code></li>
</ol>
<p>容器启动后，运行命令 <code>docker exec -it mytp5 /bin/bash</code> 便可以进入容器内部，修改 ThinkPHP 容器配置。</p>
<p>在浏览器中访问地址<code>127.0.0.1:8080</code>，看到如下欢迎界面表明 ThinkPHP 服务部署成功。</p>
<p><img src="/2021/07/29/Docker-%E9%83%A8%E7%BD%B2-thinkphp5-x-%E5%AE%B9%E5%99%A8/thinkphp-5.0.22.png" alt></p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>如果在项目中用到了 <code>mysql</code> 等扩展，则需要使用 <code>docker-php-ext-install</code> 命令安装相应的扩展，在 Dockerfile 中添加如下代码：</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 安装 postgresql 扩展</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apt-get update &amp;&amp; apt-get install -y libpq-dev \</span></span><br><span class="line"><span class="bash">    &amp;&amp; docker-php-ext-configure pgsql -with-pgsql=/usr/<span class="built_in">local</span>/pgsql \</span></span><br><span class="line"><span class="bash">    &amp;&amp; docker-php-ext-install pdo pdo_pgsql</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装mysql扩展</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> docker-php-ext-install pdo pdo_mysql</span></span><br></pre></td></tr></table></figure>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><ol>
<li><a href="https://hypc.github.io/2018/10/19/docker-thinkphp/">使用Docker部署thinkphp项目</a></li>
</ol>
]]></content>
      <categories>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>docker</tag>
        <tag>thinkPHP5.x</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown 常用公式</title>
    <url>/2021/09/05/Markdown-%E5%B8%B8%E7%94%A8%E5%85%AC%E5%BC%8F/</url>
    <content><![CDATA[<h4 id="常见公式"><a href="#常见公式" class="headerlink" title="常见公式"></a>常见公式</h4><div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:left">符号</th>
<th>规则</th>
<th style="text-align:left">符号</th>
<th style="text-align:left">规则</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">$T^{\prime}$</td>
<td><code>T^&#123;\prime&#125;</code></td>
<td style="text-align:left">$\oplus$</td>
<td style="text-align:left"><code>\oplus</code></td>
</tr>
<tr>
<td style="text-align:left">$\gets$</td>
<td><code>\gets</code></td>
<td style="text-align:left">$\to$</td>
<td style="text-align:left"><code>\to</code></td>
</tr>
<tr>
<td style="text-align:left">$\times$</td>
<td><code>\times</code></td>
<td style="text-align:left">$\div$</td>
<td style="text-align:left"><code>\div</code></td>
</tr>
<tr>
<td style="text-align:left">$\sim$</td>
<td><code>\sim</code></td>
<td style="text-align:left">$\approx$</td>
<td style="text-align:left"><code>\approx</code></td>
</tr>
<tr>
<td style="text-align:left">$\ll$</td>
<td><code>\ll</code></td>
<td style="text-align:left">$\gg$</td>
<td style="text-align:left"><code>\gg</code></td>
</tr>
<tr>
<td style="text-align:left">$\lll$</td>
<td><code>\lll</code></td>
<td style="text-align:left">$\mathop{\lll}\limits_{32}$</td>
<td style="text-align:left"><code>\mathop&#123;\lll&#125;\limits_&#123;32&#125;</code></td>
</tr>
<tr>
<td style="text-align:left"></td>
<td></td>
<td style="text-align:left"></td>
</tr>
</tbody>
</table>
</div>
]]></content>
      <categories>
        <category>Markdown</category>
      </categories>
      <tags>
        <tag>公式符号</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 命令行配置 WiFi</title>
    <url>/2021/12/06/Linux-%E5%91%BD%E4%BB%A4%E8%A1%8C%E9%85%8D%E7%BD%AE-WIFI/</url>
    <content><![CDATA[<p>在 Linux 中，可以使用 <strong>NetworkManager</strong> 工具来管理网络，其在命令行下对应的命令是 <code>nmcli</code>。因此如果在图形界面中无法连接指定 WiFi，此时可在命令行中手动连接。</p>
<span id="more"></span>
<ol>
<li><p><span id="s1">查看网络设备列表</span></p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo nmcli dev</span><br></pre></td></tr></table></figure>
<p>注意：如果列出的设备状态是 <strong>unmanaged</strong>，说明网络设备不受 <strong>NetworkManager</strong> 管理，此时可尝试清空 <em>/etc/network/interfaces</em> 下的网络设置，然后重启，重新查看网络设备。</p>
</li>
<li><p>开启 WiFi</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo nmcli r wifi on</span><br></pre></td></tr></table></figure>
</li>
<li><p>扫描附近的 WiFi 热点</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo nmcli dev wifi</span><br></pre></td></tr></table></figure>
</li>
<li><p>连接到指定的 WiFi 热点</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">sudo nmcli dev wifi connect <span class="string">&quot;SSID&quot;</span> password <span class="string">&quot;PASSWORD&quot;</span> ifname &lt;if-dev&gt;</span><br></pre></td></tr></table></figure>
<p>注意：请将 <code>SSID</code> 和 <code>PASSWORD</code> 替换成实际的 WiFi 名称和密码，并将 <code>&lt;if-dev&gt;</code> 替换为在<a href="#s1">第一步</a>中显示的网络设备。</p>
</li>
</ol>
<p>完成上面四步后，电脑就可成功连接指定 WiFi 了，并且下次开机时，电脑也会自动连接该 WiFi。</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>命令行</tag>
        <tag>WiFi 配置</tag>
      </tags>
  </entry>
  <entry>
    <title>Emulating x86 AES Intrinsics on ARMv8-A</title>
    <url>/2022/06/06/Emulating-x86-AES-Intrinsics-on-ARMv8-A/</url>
    <content><![CDATA[<blockquote>
<p>本篇博客翻译自<a href="https://blog.michaelbrase.com/2018/05/08/emulating-x86-aes-intrinsics-on-armv8-a/">Emulating x86 AES Intrinsics on ARMv8-A</a>。</p>
</blockquote>
<p>最近，我需要移植一些 C 加密代码才能在 ARMv8-A(aarch64) 处理器上运行。问题在于代码使用了一些 x86 AES 内部函数，编译器在面向 ARM 体系结构时无法识别这些内部函数。<strong>ARMv8-A确实有一个可选的加密扩展</strong>，其中包括几个 AES 指令，但它们的语义与 x86 指令略有不同。我对 AES 没有太多经验，最初发现这非常令人困惑，因为我假设所有 AES 实现都需要以相同的方式工作（毕竟 AES 是一个标准！事实证明，这两种方法都足以实现 AES，但 x86 和 ARM 选择以不同的方式解决问题。</p>
<span id="more"></span>
<h4 id="关于-AES-的背景资料"><a href="#关于-AES-的背景资料" class="headerlink" title="关于 AES 的背景资料"></a>关于 AES 的背景资料</h4><p><a href="https://en.wikipedia.org/wiki/Advanced_Encryption_Standard">高级加密标准(AES)</a> 是常见的对称加密算法，它使用密钥来加密和解密数据。AES 一次加密 16 个字节，并使用 128 位到 256 位的密钥大小。16 字节数据块通过一系列被称为轮次 的步骤进行转换。步骤的顺序是固定的，但轮次数可能因密钥大小而异。例如，AES 标准规定，对于 128 位密钥大小，AES 加密算法将迭代 10 轮。</p>
<p>AES 每一轮步骤定义为对 16 字节的 $4 \times 4$ 矩阵执行的操作，如下所示：</p>
<blockquote>
<p>|b0    b4    b8      b12|<br>|b1    b5    b9      b13|<br>|b2    b6    b10    b14|<br>|b3    b7    b11    b15|</p>
</blockquote>
<p>其中 bN 是 16 字节数据块的第 N 个字节。</p>
<p>AES 每一轮的操作定义如下：</p>
<ol>
<li><code>SubBytes</code> — 使用查找表将每个字节映射到唯一的字节值</li>
<li><code>ShiftRows</code> — 将每行中的字节循环左移不同的值</li>
<li><code>MixColumns</code> — 通过组合每列中的四个字节进行列混淆</li>
<li><code>AddRoundKey</code> — 将矩阵中的每个字节和轮密钥进行异或</li>
</ol>
<h4 id="Intel-与-ARM-中-AES-加密的比较"><a href="#Intel-与-ARM-中-AES-加密的比较" class="headerlink" title="Intel 与 ARM 中 AES 加密的比较"></a>Intel 与 ARM 中 AES 加密的比较</h4><p>Intel 在 x86 中提供了两条用于加密的 AES 指令，它们与 AES 轮次非常匹配：</p>
<ol>
<li><p><code>AESENC</code> — AES Encrypt（Normal Round）</p>
<p>a. ShiftRows</p>
<p>b. SubBytes</p>
<p>c. MixColumns</p>
<p>d. AddRoundKey</p>
</li>
<li><p><code>AESENCLAST</code> — AES Encrypt（Last Round, No <em>MixColumns</em>）</p>
<p>a. ShiftRows</p>
<p>b. SubBytes</p>
<p>c. AddRoundKey</p>
</li>
</ol>
<p>（你可能会注意到这里的 <em>ShiftRows</em> 和 <em>SubBytes</em> 与 AES 标准定义中的位置进行了交换。这没关系，因为这两种操作的位置交换不会改变最终结果。）</p>
<p>ARM 还提供了两个用于加密的 AES 指令，但稍微模糊了不同加密轮次之间的界限：</p>
<ol>
<li><p><code>AESE</code> — AES Encrypt（<em>AddRoundKey</em> is first, No <em>MixColumns</em>）</p>
<p>a. AddRoundKey</p>
<p>b. ShiftRows</p>
<p>c. SubBytes</p>
</li>
<li><p><code>AESMC</code> — AES <em>MixCoumns</em></p>
<p>a. MixColumns</p>
</li>
</ol>
<p>（有关 ARM 指令的详细信息，请参阅<a href="https://developer.arm.com/docs/ddi0487/latest/arm-architecture-reference-manual-armv8-for-armv8-a-architecture-profile">ARM 体系结构手册</a></p>
<p>以下是 Intel 和 ARM 如何实现三轮 AES 加密：</p>
<table>
    <tr>
        <th>ROUND</th>
        <th>AES STEPS</th>
        <th>INTEL</th>
        <th>ARM</th>
    </tr>
    <tr>
        <td rowspan="5">Round 1</td>
        <td>AddRoundKey</td>
        <td>XOR</td>
        <td rowspan="3">AESE</td>
    </tr>
    <tr>
        <td>SubBytes</td>
        <td rowspan="4">AESENC</td>
    </tr>
    <tr>
        <td>ShiftRows</td>
    </tr>
    <tr>
        <td>MixColumns</td>
        <td>AESMC</td>
    </tr>
    <tr>
        <td>AddRoundKey</td>
        <td rowspan="3">AESE</td>
    </tr>
    <!--round 2-->
    <tr>
        <td rowspan="4">Round 2</td>
        <td>SubBytes</td>
        <td rowspan="4">AESENC</td>
    </tr>
    <tr>
        <td>ShiftRows</td>
    </tr>
    <tr>
        <td>MixColumns</td>
        <td>AESMC</td>
    </tr>
    <tr>
        <td>AddRoundKey</td>
        <td rowspan="3">AESE</td>
    </tr>
    <!--round 3-->
    <tr>
        <td rowspan="3">Round 3</td>
        <td>SubBytes</td>
        <td rowspan="3">AESENCLAST</td>
    </tr>
    <tr>
        <td>ShiftRows</td>
    </tr>
    <tr>
        <td>AddRoundKey</td>
        <td>XOR</td>
    </tr>
</table>

<h4 id="使用-ARM-指令实现-AESENC"><a href="#使用-ARM-指令实现-AESENC" class="headerlink" title="使用 ARM 指令实现 AESENC"></a>使用 ARM 指令实现 AESENC</h4><p>我想避免重写我正在移植的算法，所以我决定坚持使用 Intel 语义，并使用 ARM NEON 内部函数和 GCC 矢量扩展重新实现 x86 内部函数。x86 中的内部函数 <code>AESENC</code> 和 <code>AESENCLAST</code> 具有以下<a href="https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=aesenc">原型</a>：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">__m128i _mm_aesenc_si128 (__m128i a, __m128i RoundKey);</span><br><span class="line">__m128i _mm_aesenclast_si128 (__m128i a, __m128i RoundKey);</span><br></pre></td></tr></table></figure>
<p>实现这一目标的第一步是在 ARM 中为 <code>__m128i</code> 定义等效的类型，我将其映射为 NEON 类型 <code>uint8x16_t</code>：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arm_neon.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">uint8x16_t</span> __m128i;</span><br></pre></td></tr></table></figure>
<p>接下来，我需要想出一系列可用于模拟 x86 <code>AESENC</code> 语义的 ARM 指令。 使用 <code>AESE+AESMC+XOR</code> 将使我们能够接近这个目标，除了 ARM <code>AESE</code>在开始时有一个在 x86 <code>AESENC</code> 中不存在额外的 <code>AddRoundKey</code>。但是，由于 <code>AddRoundKey</code> 只需将密钥与数据进行简单地 XOR，因此密钥值为零会将这一步转换为 NOP。这是最终的实现：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">__m128i _mm_aesenc_si128 (__m128i a, __m128i RoundKey)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> vaesmcq_u8(vaeseq_u8(a, (__m128i)&#123;&#125;)) ^ RoundKey;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">__m128i _mm_aesenclast_si128 (__m128i a, __m128i RoundKey)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> vaeseq_u8(a, (__m128i)&#123;&#125;) ^ RoundKey;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># clang-6.0 -target aarch64-none-linux -march=armv8+crypto -O3</span><br><span class="line"></span><br><span class="line">000000000000003c &lt;_mm_aesenc_si128&gt;:</span><br><span class="line">  3c:   6f00e402        movi    v2.2d, #0x0</span><br><span class="line">  40:   4e284840        aese    v0.16b, v2.16b</span><br><span class="line">  44:   4e286800        aesmc   v0.16b, v0.16b</span><br><span class="line">  48:   6e211c00        eor     v0.16b, v0.16b, v1.16b</span><br><span class="line">  4c:   d65f03c0        ret</span><br><span class="line"></span><br><span class="line">0000000000000050 &lt;_mm_aesenclast_si128&gt;:</span><br><span class="line">  50:   6f00e402        movi    v2.2d, #0x0</span><br><span class="line">  54:   4e284840        aese    v0.16b, v2.16b</span><br><span class="line">  58:   6e211c00        eor     v0.16b, v0.16b, v1.16b</span><br><span class="line">  5c:   d65f03c0        ret</span><br></pre></td></tr></table></figure>
<h4 id="使用-ARM-指令实现-AESDEC"><a href="#使用-ARM-指令实现-AESDEC" class="headerlink" title="使用 ARM 指令实现 AESDEC"></a>使用 ARM 指令实现 AESDEC</h4><p>有两种方法可以实现 AES 解密算法。第一种称为 “Inverse Cipher”，这种方法只是简单地颠倒加密的步骤顺序。换句话说，不使用 <code>ShiftRows</code>、 <code>SubBytes</code> 和 <code>MixColumns</code>，解密算法使用逆变换 <code>InvShiftRows</code>、<code>InvSubBytes</code> 和 <code>InvMixColumns</code>。第二种方法是一种称为 “Equivalent Inverse Cipher” 的技术，它以不同的方式生成解密密钥，但允许以在硬件中更快地实现的方式对解密步骤进行重新排序。x86 和 ARMv8-A 中的 AES 指令被设计用于第二种解密算法。您可以在<a href="https://www.intel.com/content/dam/doc/white-paper/advanced-encryption-standard-new-instructions-set-paper.pdf">Intel 白皮书</a>中阅读有关它的更多信息。</p>
<p>Intel 在 x86 中提供了 <code>AESDEC</code> 和 <code>AESDECLAST</code> 指令以帮助实现 AES 解密算法，而 ARM 则提供了 <code>AESD</code> 和 <code>AESIMC</code> 指令。就像加密一样，与其他架构相比，这些指令的语义略有不同。幸运的是，仍然可以使用用一系列 ARM 内部函数替换 Intel 内部函数。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">__m128i _mm_aesdec_si128 (__m128i a, __m128i RoundKey)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> vaesimcq_u8(vaesdq_u8(a, (__m128i)&#123;&#125;)) ^ RoundKey;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">__m128i _mm_aesdeclast_si128 (__m128i a, __m128i RoundKey)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> vaesdq_u8(a, (__m128i)&#123;&#125;) ^ RoundKey;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># clang-6.0 -target aarch64-none-linux -march=armv8+crypto -O3</span><br><span class="line"></span><br><span class="line">0000000000000060 &lt;_mm_aesdec_si128&gt;:</span><br><span class="line">  60:   6f00e402        movi    v2.2d, #0x0</span><br><span class="line">  64:   4e285840        aesd    v0.16b, v2.16b</span><br><span class="line">  68:   4e287800        aesimc  v0.16b, v0.16b</span><br><span class="line">  6c:   6e211c00        eor     v0.16b, v0.16b, v1.16b</span><br><span class="line">  70:   d65f03c0        ret</span><br><span class="line"></span><br><span class="line">0000000000000074 &lt;_mm_aesdeclast_si128&gt;:</span><br><span class="line">  74:   6f00e402        movi    v2.2d, #0x0</span><br><span class="line">  78:   4e285840        aesd    v0.16b, v2.16b</span><br><span class="line">  7c:   6e211c00        eor     v0.16b, v0.16b, v1.16b</span><br><span class="line">  80:   d65f03c0        ret</span><br></pre></td></tr></table></figure>
<h4 id="使用-ARM-指令实现-AESKEYGENASSIST"><a href="#使用-ARM-指令实现-AESKEYGENASSIST" class="headerlink" title="使用 ARM 指令实现 AESKEYGENASSIST"></a>使用 ARM 指令实现 AESKEYGENASSIST</h4><p>我掩盖了 AES 的一个部分是如何为 <code>AddRoundKey</code> 步骤生成轮函数。AES 标准定义了一种密钥生成算法，Intel 通过 <code>AESKEYGENASSIT</code> 指令实现了密钥生成算法。不幸的是，ARM 没有为 ARMv8-A 提供等效的指令，所以我们必须手动实现。</p>
<p><a href="https://software.intel.com/sites/landingpage/IntrinsicsGuide/#text=_mm_aeskeygenassist_si128">Intel 文档</a>为 <code>AESKEYGENASSIT</code> 指令的功能提供了相当精确的定义：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">X3[<span class="number">31</span>:<span class="number">0</span>] := a[<span class="number">127</span>:<span class="number">96</span>]</span><br><span class="line">X2[<span class="number">31</span>:<span class="number">0</span>] := a[<span class="number">95</span>:<span class="number">64</span>]</span><br><span class="line">X1[<span class="number">31</span>:<span class="number">0</span>] := a[<span class="number">63</span>:<span class="number">32</span>]</span><br><span class="line">X0[<span class="number">31</span>:<span class="number">0</span>] := a[<span class="number">31</span>:<span class="number">0</span>]</span><br><span class="line">RCON[<span class="number">31</span>:<span class="number">0</span>] := ZeroExtend(imm8[<span class="number">7</span>:<span class="number">0</span>]);</span><br><span class="line">dst[<span class="number">31</span>:<span class="number">0</span>] := SubWord(X1)</span><br><span class="line">dst[<span class="number">63</span>:<span class="number">32</span>] := (RotWord(SubWord(X1)) XOR RCON;</span><br><span class="line">dst[<span class="number">95</span>:<span class="number">64</span>] := SubWord(X3)</span><br><span class="line">dst[<span class="number">127</span>:<span class="number">96</span>] := RotWord(SubWord(X3)) XOR RCON;</span><br></pre></td></tr></table></figure>
<p>唯一真正棘手的部分是 <code>SubWord()</code> 函数，它使用与 AES 步骤相同的查表算法。实现自定义查找表不是很有效，因此使用 <code>AESE</code> 指令实现查找表会很方便。</p>
<p>就像使用 AES 加密一样，我使用了一个清零的轮密钥来跳过 <code>AddRoundKey</code>这一步。<code>AESE</code> 指令便只剩下使用<code>SubBytes</code> 和 <code>ShiftRows</code> 步骤用来对输入进行变换：</p>
<blockquote>
<p>|b0    b4    b8      b12|                    |sub(b0)    sub(b4)   sub(b8)    sub(b12)|<br>|b1    b5    b9      b13|      AESE      |sub(b5)    sub(b9)   sub(b13)  sub(b1)  |<br>|b2    b6    b10    b14|      ====&gt;     |sub(b10)  sub(b14)  sub(b2)    sub(b6) |<br>|b3    b7    b11    b15|                     |sub(b15)  sub(b3)   sub(b7)    sub(b11)|</p>
</blockquote>
<p>使用 NEON <code>TBL</code> 指令，我可以提取所需的字节来构建一个新的向量。在左侧，X1 是 b4、b5、b6、b7，在右侧，这些字节已移动到位置 4、1、14 和 11。同样，X3 是 b12、b13、b14、b15，这些字节已移至位置 9、6、3、12。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">__m128i dest = &#123;</span><br><span class="line">    <span class="comment">// Undo ShiftRows step from AESE and extract X1 and X3</span></span><br><span class="line">    a[<span class="number">0x4</span>], a[<span class="number">0x1</span>], a[<span class="number">0xE</span>], a[<span class="number">0xB</span>], <span class="comment">// SubBytes(X1)</span></span><br><span class="line">    a[<span class="number">0x4</span>], a[<span class="number">0x1</span>], a[<span class="number">0xE</span>], a[<span class="number">0xB</span>], <span class="comment">// SubBytes(X1)</span></span><br><span class="line">    a[<span class="number">0xC</span>], a[<span class="number">0x9</span>], a[<span class="number">0x6</span>], a[<span class="number">0x3</span>], <span class="comment">// SubBytes(X3)</span></span><br><span class="line">    a[<span class="number">0xC</span>], a[<span class="number">0x9</span>], a[<span class="number">0x6</span>], a[<span class="number">0x3</span>], <span class="comment">// SubBytes(X3)</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>下一步是旋转 X1 和 X3 的字节。没有一个很好的指令来做到这一点，但是由于我已经打乱了 <code>AESE</code> 的输出，我可以再打乱一点来执行旋转：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">__m128i dest = &#123;</span><br><span class="line">    <span class="comment">// Undo ShiftRows step from AESE and extract X1 and X3</span></span><br><span class="line">    a[<span class="number">0x4</span>], a[<span class="number">0x1</span>], a[<span class="number">0xE</span>], a[<span class="number">0xB</span>], <span class="comment">// SubBytes(X1)</span></span><br><span class="line">    a[<span class="number">0x1</span>], a[<span class="number">0xE</span>], a[<span class="number">0xB</span>], a[<span class="number">0x4</span>], <span class="comment">// ROT(SubBytes(X1))</span></span><br><span class="line">    a[<span class="number">0xC</span>], a[<span class="number">0x9</span>], a[<span class="number">0x6</span>], a[<span class="number">0x3</span>], <span class="comment">// SubBytes(X3)</span></span><br><span class="line">    a[<span class="number">0x9</span>], a[<span class="number">0x6</span>], a[<span class="number">0x3</span>], a[<span class="number">0xC</span>], <span class="comment">// ROT(SubBytes(X3))</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>最后，RCON 值需要是与 X1 和 X3 进行 XOR。这是最终的实现：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">__m128i _mm_aeskeygenassist_si128 (__m128i a, <span class="keyword">const</span> <span class="keyword">int</span> imm8)</span><br><span class="line">&#123;</span><br><span class="line">    a = vaeseq_u8(a, (__m128i)&#123;&#125;); <span class="comment">// AESE does ShiftRows and SubBytes on A</span></span><br><span class="line">    __m128i dest = &#123;</span><br><span class="line">        <span class="comment">// Undo ShiftRows step from AESE and extract X1 and X3</span></span><br><span class="line">        a[<span class="number">0x4</span>], a[<span class="number">0x1</span>], a[<span class="number">0xE</span>], a[<span class="number">0xB</span>], <span class="comment">// SubBytes(X1)</span></span><br><span class="line">        a[<span class="number">0x1</span>], a[<span class="number">0xE</span>], a[<span class="number">0xB</span>], a[<span class="number">0x4</span>], <span class="comment">// ROT(SubBytes(X1))</span></span><br><span class="line">        a[<span class="number">0xC</span>], a[<span class="number">0x9</span>], a[<span class="number">0x6</span>], a[<span class="number">0x3</span>], <span class="comment">// SubBytes(X3)</span></span><br><span class="line">        a[<span class="number">0x9</span>], a[<span class="number">0x6</span>], a[<span class="number">0x3</span>], a[<span class="number">0xC</span>], <span class="comment">// ROT(SubBytes(X3))</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">return</span> dest ^ (__m128i)((<span class="keyword">uint32x4_t</span>)&#123;<span class="number">0</span>, rcon, <span class="number">0</span>, rcon&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># clang-6.0 -target aarch64-none-linux -march=armv8+crypto -O3</span><br><span class="line"></span><br><span class="line">00000000000000d0 &lt;_mm_aeskeygenassist_si128&gt;:</span><br><span class="line">  d0:   90000008        adrp    x8, 0 &lt;load_8&gt;</span><br><span class="line">  d4:   3dc00102        ldr     q2, [x8]</span><br><span class="line">  d8:   6f00e401        movi    v1.2d, #0x0</span><br><span class="line">  dc:   4e040fe3        dup     v3.4s, wzr</span><br><span class="line">  e0:   4e284820        aese    v0.16b, v1.16b</span><br><span class="line">  e4:   4e0c1c03        mov     v3.s[1], w0</span><br><span class="line">  e8:   4e020000        tbl     v0.16b, &#123;v0.16b&#125;, v2.16b</span><br><span class="line">  ec:   4e1c1c03        mov     v3.s[3], w0</span><br><span class="line">  f0:   6e231c00        eor     v0.16b, v0.16b, v3.16b</span><br><span class="line">  f4:   d65f03c0        ret</span><br><span class="line"></span><br><span class="line">0000000000000000 &lt;.rodata.cst16&gt;:</span><br><span class="line">        ...</span><br><span class="line">  40:   0b0e0104        .word   0x0b0e0104</span><br><span class="line">  44:   040b0e01        .word   0x040b0e01</span><br><span class="line">  48:   0306090c        .word   0x0306090c</span><br><span class="line">  4c:   0c030609        .word   0x0c030609</span><br></pre></td></tr></table></figure>
<h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><p><a href="https://blog.michaelbrase.com/2018/05/08/emulating-x86-aes-intrinsics-on-armv8-a/">Emulating x86 AES Intrinsics on ARMv8-A</a></p>
<p><a href="https://blog.csdn.net/qq_32042527/article/details/88084130">Markdown表格合并单元格</a></p>
]]></content>
      <categories>
        <category>AES</category>
      </categories>
      <tags>
        <tag>intel AES intrinsics</tag>
        <tag>ARMv8-A</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 创建远程登陆用户</title>
    <url>/2021/12/13/Linux-%E5%88%9B%E5%BB%BA%E8%BF%9C%E7%A8%8B%E7%99%BB%E9%99%86%E7%94%A8%E6%88%B7/</url>
    <content><![CDATA[<h4 id="开启远程登陆"><a href="#开启远程登陆" class="headerlink" title="开启远程登陆"></a>开启远程登陆</h4><ul>
<li><p>修改 SSH 配置文件</p>
<p>修改配置文件 <code>/etc/ssh/sshd_config</code> 以下字段：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> /etc/ssh/sshd_config</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 设置允许远程登录</span></span><br><span class="line">PasswordAuthentication yes</span><br><span class="line">PermitRootLogin yes</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 新增 root 远程账户</span></span><br><span class="line">AllowUsers root</span><br><span class="line">AllowUsers &lt;user&gt;</span><br></pre></td></tr></table></figure>
<p>其中，<em><user></user></em> 为后续添加的其他远程登录账户。 </p>
</li>
<li><p>重启 SSH 服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service sshd restart</span><br></pre></td></tr></table></figure>
<p>重启完成之后即可借助远程连接工具连接到该远程服务器。</p>
</li>
</ul>
<span id="more"></span>
<h4 id="创建远程账户"><a href="#创建远程账户" class="headerlink" title="创建远程账户"></a>创建远程账户</h4><ul>
<li><p>创建本地用户</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">useradd -d /home/&lt;newuser&gt; -m &lt;newuser&gt;</span><br></pre></td></tr></table></figure>
<p>其中，</p>
<ul>
<li><p><code>-d</code> 表示该用户的家目录</p>
</li>
<li><p><code>-m</code> 表示创建该用户的家目录</p>
</li>
</ul>
</li>
<li><p>修改用户密码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">passwd &lt;newuser&gt;</span><br></pre></td></tr></table></figure>
<p>根据提示输入两次用户密码。</p>
</li>
<li><p>修改 SSH 配置文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> /etc/ssh/sshd_config</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 新增远程登录用户</span></span><br><span class="line">AllowUsers &lt;newuser&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>重启 SSH 服务</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">service sshd restart</span><br></pre></td></tr></table></figure>
<p>操作完成后即可使用新账号登录远程服务器。</p>
</li>
</ul>
<h4 id="删除远程登录账户"><a href="#删除远程登录账户" class="headerlink" title="删除远程登录账户"></a>删除远程登录账户</h4><ul>
<li><p>修改 SSH 配置文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> /etc/ssh/sshd_config</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 禁用远程用户</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> AllowUsers &lt;user&gt;</span></span><br></pre></td></tr></table></figure>
<p>修改配置文件后记得重启 SSH 服务。</p>
</li>
<li><p>删除本地用户</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">userdel -r &lt;user&gt;</span><br></pre></td></tr></table></figure>
<p><code>userdel</code> 命令默认会删除 <em>/etc/passwd</em>、<em>/etc/shadow</em>、<em>/etc/group</em>、<em>/etc/gshadow</em> 四个文件里该账户和组的信息，使用 <code>-r</code> 选项递归删除该用户家目录下的用户数据。</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
        <tag>创建用户</tag>
        <tag>远程登录</tag>
      </tags>
  </entry>
  <entry>
    <title>OpenSSL BN 大数库分析</title>
    <url>/2022/07/06/OpenSSL%20BN%20%E5%A4%A7%E6%95%B0%E5%BA%93%E5%88%86%E6%9E%90/</url>
    <content><![CDATA[<h4 id="大数表示方法"><a href="#大数表示方法" class="headerlink" title="大数表示方法"></a>大数表示方法</h4><p>对于大数 $A$，其基于底层数据类型 <code>BN_ULONG</code> 可以被表示为：</p>
<script type="math/tex; mode=display">
A=a_m * b^m + a_{m-1}*b^{m-1}+\dots+ a_1 * b + a_0</script><p>其中，底数 $b= 1 &lt;&lt; sizeof(BN_UNLOG)$。</p>
<p>对于 <code>LP64</code> 系统，<code>unsigned long</code> 和 <code>pointer</code> 数据类型长度为 64 比特，<strong>BN</strong> 定义了如下基本宏定义。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// crypto/bn/bn_lcl.h</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 64-bit processor with LP64 ABI</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">ifdef</span> SIXTY_FOUR_BIT_LONG</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> BN_ULLONG       unsigned long long</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> BN_BITS4        32</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> BN_MASK2        (0xffffffffffffffffL)</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> BN_MASK2l       (0xffffffffL)</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> BN_MASK2h       (0xffffffff00000000L)</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> BN_MASK2h1      (0xffffffff80000000L)</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> BN_DEC_CONV     (10000000000000000000UL)</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> BN_DEC_NUM      19                              <span class="comment">// 64-bit ~ 19-dec</span></span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> BN_DEC_FMT1     <span class="meta-string">&quot;%lu&quot;</span></span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> BN_DEC_FMT2     <span class="meta-string">&quot;%019lu&quot;</span></span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// include/openssl/bn.h</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">ifdef</span> SIXTY_FOUR_BIT_LONG</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> BN_ULONG        unsigned long</span></span><br><span class="line"><span class="meta">#  <span class="meta-keyword">define</span> BN_BYTES        8</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> BN_BITS2       (BN_BYTES * 8)					<span class="comment">// 64</span></span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> BN_BITS        (BN_BITS2 * 2)					<span class="comment">// 128</span></span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> BN_TBIT        ((BN_ULONG)1 &lt;&lt; (BN_BITS2 - 1))  <span class="comment">// 1 &lt;&lt; 63</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> BN_FLG_MALLOCED         0x01</span></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> BN_FLG_STATIC_DATA      0x02</span></span><br></pre></td></tr></table></figure>
<p>在定义大数的基本存储类型之后，<strong>BN</strong> 定义了 <code>BIGNUM</code> 结构体如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// crypto/bn/bn_lcl.h</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">bignum_st</span> &#123;</span></span><br><span class="line">    BN_ULONG *d;                <span class="comment">/* Pointer to an array of &#x27;BN_BITS2&#x27; bit chunks. */</span></span><br><span class="line">    <span class="keyword">int</span> top;                    <span class="comment">/* Index of last used d +1. */</span></span><br><span class="line">    <span class="comment">/* The next are internal book keeping for bn_expand. */</span></span><br><span class="line">    <span class="keyword">int</span> dmax;                   <span class="comment">/* Size of the d array. */</span></span><br><span class="line">    <span class="keyword">int</span> neg;                    <span class="comment">/* one if the number is negative */</span></span><br><span class="line">    <span class="keyword">int</span> flags;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>基于上述定义的大数，其十进制表示为：</p>
<script type="math/tex; mode=display">
A = A.d[top] * b^{top} + A.d[top-1]*b^{top-1}+\dots+A.d[1]*b+A.d[0]</script><p>此外，在 <code>crypto/bn/bn_lcl.h</code> 文件中还定义了 <code>bn_mont_ctx_st</code> <code>bn_recp_ctx_st</code> 和 <code>bn_gencb_st</code> 三种用于大整数乘法和除法的上下文。</p>
]]></content>
      <categories>
        <category>OpenSSL</category>
      </categories>
      <tags>
        <tag>OpenSSL</tag>
        <tag>大数表示</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux 远程登录常见问题</title>
    <url>/2022/06/20/Linux-%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<h4 id="XShell-远程登陆无法使用退格键"><a href="#XShell-远程登陆无法使用退格键" class="headerlink" title="XShell 远程登陆无法使用退格键"></a>XShell 远程登陆无法使用退格键</h4><p>打开终端属性界面，点击【键盘】，将键序列改为 ASCII 127，如图所示。</p>
<span id="more"></span>
<p><img src="/2022/06/20/Linux-%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/键盘序列.png" alt="img" style="zoom: 70%;"></p>
<p>点击【确定】后，退格键即可正常使用。</p>
<h4 id="远程登陆无法使用-Tab-补全键"><a href="#远程登陆无法使用-Tab-补全键" class="headerlink" title="远程登陆无法使用 Tab 补全键"></a>远程登陆无法使用 Tab 补全键</h4><p>Ubuntu 系统将默认的 bash shell 更换为了 <em>dash</em>。其表现是 <em>/bin/sh</em> 链接到了 <em>/bin/dash</em>，而不是传统的 <em>/bin/bash</em>。</p>
<p>一种解决办法是手动将 <em>/bin/sh</em> 软连接到 <em>/bin/bash</em>，不过此操作对所有用户生效，谨慎操作。</p>
<p>另外一种方法是修改 <em>/etc/passwd</em> 配置文件，将远程登陆用户的默认 shell 手动改为 <em>/bin/bash</em>。(<strong>推荐</strong>)</p>
<p><img src="/2022/06/20/Linux-%E8%BF%9C%E7%A8%8B%E7%99%BB%E5%BD%95%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/bash.png" alt="image-20220620145156339"></p>
<p>有关 <em>/etc/passwd</em> 配置文件的详细介绍请参考博客 <a href="https://www.sohu.com/a/320177323_505901">Linux中/etc/passwd配置文件详解</a>。</p>
<h4 id="xxx-is-not-in-the-sudoers-file"><a href="#xxx-is-not-in-the-sudoers-file" class="headerlink" title="xxx is not in the sudoers file."></a>xxx is not in the sudoers file.</h4><p>以 <strong>root</strong> 用户身份打开 <em>/etc/sudoers</em> 文件，找到 <code>root    ALL=(ALL)    ALL</code> 这一行，然后在下面添加一行本机账户的权限设置：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Allow root to run any commands anywhere</span></span><br><span class="line">root	ALL=(ALL)	ALL</span><br><span class="line">wang	ALL=(ALL)	ALL <span class="comment"># wang 是本机账户</span></span><br></pre></td></tr></table></figure>
<p>保存退出即可生效。</p>
<h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><p><a href="https://blog.csdn.net/qq_35663625/article/details/104632593">Ubuntu16.04系统用Xshell远程连接后无法使用tab补全键</a></p>
<p><a href="https://blog.csdn.net/qq_43871519/article/details/109080643">xshell退格键无法使用的解决方法</a></p>
<p><a href="https://blog.csdn.net/weixin_42919323/article/details/106821961">is not in the sudoers file</a></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>远程登陆</tag>
      </tags>
  </entry>
  <entry>
    <title>SM4 与 AES 算法 S 盒的关系</title>
    <url>/2021/09/06/SM4-AES-S%E7%9B%92%E7%BB%93%E6%9E%84%E5%85%B3%E7%B3%BB/</url>
    <content><![CDATA[<h4 id="SM4-Sbox-结构"><a href="#SM4-Sbox-结构" class="headerlink" title="SM4-Sbox 结构"></a>SM4-Sbox 结构</h4><p>SM4-Sbox 查找表如图 1 所示。对于 S 盒的每 8 位输入，将前 4 位作为行，后 4 位作为列，输出即为查找表对应的元素。</p>
<p><img src="/2021/09/06/SM4-AES-S%E7%9B%92%E7%BB%93%E6%9E%84%E5%85%B3%E7%B3%BB/SM4-Sbox.png" alt="image-20210906173135105"></p>
<p align="center">图 1 SM4-Sbox 结构</p>

<span id="more"></span>
<p>经过 LiuF 等人<a href="#ref1"><sup>[1]</sup></a>的分析验证，SM4-Sbox 的代数表达式为：</p>
<script type="math/tex; mode=display">
S_{SM4}(x) = A_{SM4}*I_{SM4}(A_{SM4}*x+C_{SM4})+C_{SM4} \tag{1}</script><p>其中，非线性运算 $I_{SM4}(x)$ 为有限域 $GF(2^8)$ 上的求逆运算，所用的素多项式为：</p>
<script type="math/tex; mode=display">
F(x) = x^8 + x^7 + x^6 + x^5 + x^4 + x^2 + 1</script><p>列向量 $C_{SM4}$ 为：</p>
<script type="math/tex; mode=display">
C_{SM4}=\begin{pmatrix}
1 & 1 & 0 & 1 & 0 & 0 & 1 & 1
\end{pmatrix}^{\mathrm{T}}</script><p>循环矩阵 $A_{SM4}$ 为：</p>
<script type="math/tex; mode=display">
A_{SM4}=\begin{pmatrix}
1 & 1 & 0 & 1 & 0 & 0 & 1 & 1 \\
1 & 1 & 1 & 0 & 1 & 0 & 0 & 1 \\
1 & 1 & 1 & 1 & 0 & 1 & 0 & 0 \\
0 & 1 & 1 & 1 & 1 & 0 & 1 & 0 \\
0 & 0 & 1 & 1 & 1 & 1 & 0 & 1 \\
1 & 0 & 0 & 1 & 1 & 1 & 1 & 0 \\
0 & 1 & 0 & 0 & 1 & 1 & 1 & 1 \\
1 & 0 & 1 & 0 & 0 & 1 & 1 & 1
\end{pmatrix}</script><blockquote>
<p>对于 S 盒的 8 位输入 $x \in Z_2^8$ ，将其表示为 8 位列向量 $x = (x_0,x_1,x_2,x_3,x_4,x_5,x_6,x_7)^\mathrm{T}$ ，随后将其带入 S 盒代数表达式参与 $GF(2)$ 上的运算即可。</p>
</blockquote>
<h4 id="AES-Sbox-结构"><a href="#AES-Sbox-结构" class="headerlink" title="AES-Sbox 结构"></a>AES-Sbox 结构</h4><p>AES-Sbox 查找表如图 2 所示。对于 S 盒的每 8 位输入，将前 4 位作为行，后 4 位作为列，输出即为查找表对应的元素。</p>
<p><img src="/2021/09/06/SM4-AES-S%E7%9B%92%E7%BB%93%E6%9E%84%E5%85%B3%E7%B3%BB/AES-Sbox.png" alt="image-20210906173135105"></p>
<p align="center">图 2 AES-Sbox 查找表</p>

<p>根据 AES 标准文档<a href="#ref2"><sup>[2]</sup></a>，AES-Sbox 的代数表达式为：</p>
<script type="math/tex; mode=display">
S_{AES}(x) = A_{AES}*I_{AES}(x)+C_{AES} \tag{2}</script><p>其中，非线性运算 $I_{AES}(x)$ 为有限域 $GF(2^8)$ 上的求逆运算，所用的不可约多项式为：</p>
<script type="math/tex; mode=display">
m(x) = x^8 + x^4 + x^3 + x + 1</script><p>列向量 $C_{AES}$ 为：</p>
<script type="math/tex; mode=display">
C_{AES} = \begin{pmatrix}
 0 & 1 & 1 & 0 & 0 & 0 & 1 & 1
\end{pmatrix}^\mathrm{T}</script><p>循环矩阵 $A_{AES}$ 为：</p>
<script type="math/tex; mode=display">
A_{AES} = \begin{pmatrix}
0 & 0 & 0 & 1 & 1 & 1 & 1 & 1 \\
0 & 0 & 1 & 1 & 1 & 1 & 1 & 0 \\
0 & 1 & 1 & 1 & 1 & 1 & 0 & 0 \\
1 & 1 & 1 & 1 & 1 & 0 & 0 & 0 \\
1 & 1 & 1 & 1 & 0 & 0 & 0 & 1 \\
1 & 1 & 1 & 0 & 0 & 0 & 1 & 1 \\
1 & 1 & 0 & 0 & 0 & 1 & 1 & 1 \\
1 & 0 & 0 & 0 & 1 & 1 & 1 & 1
\end{pmatrix}</script><h4 id="SM4-与-AES-算法-S-盒的关系"><a href="#SM4-与-AES-算法-S-盒的关系" class="headerlink" title="SM4 与 AES 算法 S 盒的关系"></a>SM4 与 AES 算法 S 盒的关系</h4><p>由于 SM4 算法与 AES 算法的 S 盒均位于有限域 $GF(2^8)$ ，因此，两者的 S 盒存在某种映射关系，使得 SM4 算法与 AES 算法之间的 S 盒可以互相替换。</p>
<p>假设映射矩阵 $T_{S2A}$ 将 SM4 有限域中的元素映射到 AES 有限域中，那么根据 SM4-Sbox 的代数表达式，有：</p>
<script type="math/tex; mode=display">
\begin{aligned}
S_{SM4} &= A_{SM4} * I_{SM4}(A_{SM4} * x + C_{SM4}) + C_{SM4} \\
        &= A_{SM4} * I_{SM4}(T_{S2A}^{-1}*T_{S2A}*\{A_{SM4} * x + C_{SM4}\}) + C_{SM4} \\
        &= A_{SM4} * T_{S2A}^{-1}* I_{AES}(T_{S2A}*\{A_{SM4} * x + C_{SM4}\}) + C_{SM4} \\
\end{aligned} \tag{3}</script><p>注意上式是如何从第 2 步变换到第 3 步的，根据文献<a href="#ref1"><sup>[1]</sup></a>可知，有限域中的求逆运算关于映射矩阵是同构的，因此把逆矩阵 $T_{S2A}^{-1}$ 从 $I_{SM4}$ 中提取出来后，此时求逆运算是在 AES 有限域上的元素进行运算的，因此在第 3 步中求逆运算由 $I_{SM4}$ 变成了 $I_{AES}$ 。</p>
<p>由 AES-Sbox 代数表达式可知：</p>
<script type="math/tex; mode=display">
I_{AES}(x) = A_{AES}^{-1} * \{S_{AES}(x) + C_{AES}\}</script><p>将其带入公式 (3) 中，可得：</p>
<script type="math/tex; mode=display">
\begin{aligned}
S_{SM4} &= A_{SM4} * T_{S2A}^{-1}* I_{AES}(T_{S2A}*\{A_{SM4} * x + C_{SM4}\}) + C_{SM4} \\
        &= A_{SM4} *  T_{S2A}^{-1}* A_{AES}^{-1} * \{S_{AES}(T_{S2A}*\{A_{SM4} * x + C_{SM4}\}) \\
        &\quad + C_{AES}\} + C_{SM4}
\end{aligned} \tag{4}</script><p>令 </p>
<script type="math/tex; mode=display">
\begin{cases}
M_1 = T_{S2A} \ast A_{SM4}, M_2 = A_{SM4} \ast T_{S2A}^{-1} \ast A_{AES}^{-1} \\
C_1 = T_{S2A} \ast C_{SM4},  C_2 = M_2 \ast C_{AES} + C_{SM4}
\end{cases}</script><p>，则有：</p>
<script type="math/tex; mode=display">
S_{SM4}(x) = M_2 * S_{AES}(M_1 * x + C_1) + C_2 \tag{5}</script><p>至此，我们便得到了 SM4 与 AES 算法两者 S 盒的变换关系。</p>
<h4 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h4><p><div id="ref1"></div> [1] Liu F, Ji W, Hu L, Ding JT. Analysis of the SMS4 block cipher. Australasian Conference on Information Security and Privacy. Springer, Berlin, Heidelberg, 2007: 158-170.</p>
<p><div id="ref2"></div> [2] Pub N F. 197: Advanced encryption standard (AES). Federal information processing standards publication, 2001, 197(441): 0311.</p>
]]></content>
      <categories>
        <category>国密算法</category>
      </categories>
      <tags>
        <tag>SM4 算法</tag>
        <tag>AES 算法</tag>
        <tag>S 盒</tag>
        <tag>有限域</tag>
      </tags>
  </entry>
  <entry>
    <title>SM4 分组密码算法简介</title>
    <url>/2021/09/05/SM4-%E5%AF%86%E7%A0%81%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<p>SM4 算法是我国商用分组密码算法，被广泛用于无线网络数据加密传输中。SM4 算法的密钥长度和分组长度均为 128 比特，解密算法是加密算法的逆运算，只需将轮密钥逆序输入即可得到明文。SM4 与 AES 算法的比较如表 1 所示。</p>
<span id="more"></span>
<p align="center">表 1 SM4 与 AES 算法比较</p>

<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">算法</th>
<th style="text-align:center">加密轮数</th>
<th style="text-align:center">密钥长度（比特）</th>
<th style="text-align:center">分组长度（比特）</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">SM4</td>
<td style="text-align:center">32</td>
<td style="text-align:center">128</td>
<td style="text-align:center">128</td>
</tr>
<tr>
<td style="text-align:center">AES-128</td>
<td style="text-align:center">10</td>
<td style="text-align:center">128</td>
<td style="text-align:center">128</td>
</tr>
<tr>
<td style="text-align:center">AES-192</td>
<td style="text-align:center">12</td>
<td style="text-align:center">192</td>
<td style="text-align:center">128</td>
</tr>
<tr>
<td style="text-align:center">AES-256</td>
<td style="text-align:center">14</td>
<td style="text-align:center">256</td>
<td style="text-align:center">128</td>
</tr>
</tbody>
</table>
</div>
<h4 id="SM4-加密算法"><a href="#SM4-加密算法" class="headerlink" title="SM4 加密算法"></a>SM4 加密算法</h4><p>为了方便说明，本文定义 $Z_2^m$ 表示 $m$ 比特向量，符号 $\oplus$ 表示异或运算。设明文输入为 $X = \left(X_0,X_1,X_2,X_3\right) \in \left(Z_2^{32}\right)^4$ ，密文输出为 $Y = \left(Y_0,Y_1,Y_2,Y_3\right) \in \left(Z_2^{32}\right)^4$ ，轮密钥为 $rk_i \in Z_2^{32}, i=0,1,\dots,31$ ，则 SM4 加密算法表示为：</p>
<script type="math/tex; mode=display">
\begin{aligned}
X_{i+4} &= F\left(X_i,X_{i+1},X_{i+2},X_{i+3},rk_i\right) \\
       &= X_i \oplus T\left(X_{i+1} \oplus X_{i+2} \oplus X_{i+3} \oplus rk_i \right) \quad i=0,1,\dots,31\\ \\
Y &= \left(Y_0,Y_1,Y_2,Y_3\right) = \left(X_{35},X_{34},X_{33},X_{32}\right)
\end{aligned}</script><p>其中，$T$ 是一个 $Z_2^{32} \to Z_2^{32}$ 的合成变换，包含线性变换 $L$ 和 非线性变换 $\tau$ ，即：$T(x) = L(\tau(x))$ 。</p>
<ol>
<li><p>非线性变换 $\tau$ 由 4 个并行的 8 进 8 出的 S 盒查表组成，设输入为 $x=(x_0,x_1,x_2,x_3) \in (Z_2^8)^4$ ，输出为 $y=(y_0,y_1,y_2,y_3) \in (Z_2^8)^4$ ，则：</p>
<script type="math/tex; mode=display">
(y_0,y_1,y_2,y_3) = \tau(x)=(S(x_0),S(x_1),S(x_2),S(x_3))</script><p>对于 S 盒的 8 位输入，将前 4 位作为行，后 4 位作为列，输出即为查找表中对应行列所对应的    值。S 盒如图 1 所示：</p>
<p><img src="/2021/09/05/SM4-%E5%AF%86%E7%A0%81%E7%AE%97%E6%B3%95/S 盒.png" alt="image-20210905154433201"></p>
<p align="center">图 1 S 盒</p>
</li>
<li><p>线性变换 $L$ 接收非线性变换 $\tau$ 的输出作为输入，设线性变换 $L$ 的输出为 $z \in Z_2^{32}$ ，则：</p>
<script type="math/tex; mode=display">
z=L(y) = y \oplus (y \lll 2) \oplus (y \lll 10) \oplus (y \lll 18) \oplus (y \lll 24)</script><p>其中，$\lll$ 表示循环左移，如 $y \lll 2$ 表示将 $y$ 循环左移 2 位。</p>
</li>
</ol>
<h4 id="SM4-密钥扩展算法"><a href="#SM4-密钥扩展算法" class="headerlink" title="SM4 密钥扩展算法"></a>SM4 密钥扩展算法</h4><p>SM4 算法使用密钥扩展算法对初始密钥进行扩展生成各轮子密钥。令初始密钥表示为 $MK=(MK_0,MK_1,MK_2,MK_3) \in (Z_2^{32})^4$ ，则按如下方式生成 32 轮子密钥：</p>
<script type="math/tex; mode=display">
\begin{aligned}
(K_0,K_1,K_2,K_3) &= (MK_0 \oplus FK_0,MK_1 \oplus FK_1,MK_2 \oplus FK_2,MK_3 \oplus FK_3) \\
rk_i = K_{i+4} &= K_i \oplus T^{\prime}(K_{i+1} \oplus K_{i+2} \oplus K_{i+3} \oplus CK_i) \quad i=0,1,\dots,31
\end{aligned}</script><p>其中：</p>
<ol>
<li><p>$T^{\prime} = L^{\prime}(\tau(\cdot))$ ，$L^{\prime}$ 表示为：</p>
<script type="math/tex; mode=display">
L^{\prime}(B) = B \oplus (B \lll 13) \oplus (B \lll 23)</script></li>
<li><p>$FK$ 是系统参数，取值为：</p>
<script type="math/tex; mode=display">FK_0 = (A3B1BAC6), FK_1 = (56AA3350)</script><script type="math/tex; mode=display">FK_2 = (677D9197),FK_3 = (B27022DC)</script></li>
<li><p>$CK$ 是固定参数，其构造方法为：</p>
<p>设 $CK_{i}$ 的第 $j$ 个字节为 $ck_{i,j} i=0,1,\dots,31; j=0,1,2,3$ ，即 $CK_i = (ck_{i,0}, ck_{i,1}, ck_{i,2}, ck_{i,3}) \in (Z_2^8)^4$ ，那么有：</p>
<script type="math/tex; mode=display">
ck_{i,j} = (4*i+j)*7 (mod 256)</script><p>根据此计算方法，可以计算出所有的 $CK$ 值，即：</p>
<blockquote>
<p>00070E15, 1C232A31, 383F464D, 545B6269,</p>
<p>70777E85, 8C939AA1, A8AFB6BD, C4CBD2D9,</p>
<p>E0E7EEF5, FC030A11, 181F262D, 343B4249,</p>
<p>50575E65, 6C737A81, 888F969D, A4ABB2B9,</p>
<p>C0C7CED5, DCE3EAF1, F8FF060D, 141B2229,</p>
<p>30373E45, 4C535A61, 686F767D, 848B9299,</p>
<p>A0A7AEB5, BCC3CAD1, D8DFE6ED, F4FB0209,</p>
<p>10171E25, 2C333A41, 484F565D, 646B7279</p>
</blockquote>
</li>
</ol>
<h4 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h4><p>[1] <a href="/download/SM4分组密码算法.pdf">SM4 分组密码算法</a></p>
]]></content>
      <categories>
        <category>国密算法</category>
      </categories>
      <tags>
        <tag>SM4 算法</tag>
        <tag>分组密码算法</tag>
      </tags>
  </entry>
  <entry>
    <title>tun/tap虚拟桥接</title>
    <url>/2022/05/22/tun-tap%E8%99%9A%E6%8B%9F%E6%A1%A5%E6%8E%A5/</url>
    <content><![CDATA[<h4 id="Tun-Tap-虚拟网卡"><a href="#Tun-Tap-虚拟网卡" class="headerlink" title="Tun/Tap 虚拟网卡"></a>Tun/Tap 虚拟网卡</h4><p>Tun/Tap 驱动程序实现了虚拟网卡的功能, Tun 表示虚拟的是点对点设备, Tap 表示虚拟的是以太网设备, 这两种设备针对网络包实施不同的封装. 利用 Tun/Tap 驱动, 可以将 TCP/IP 协议栈处理好的网络分包传给任何一个使用 Tun/Tap 驱动的进程, 由进程重新处理后再发送到物理链路中. </p>
<span id="more"></span>
<p>开源项目 <a href="https://github.com/smoltcp-rs/smoltcp">smoltcp</a>、<a href="https://github.com/nihalpasham/rustdhipv2">rustdhipv2</a> 都用到了 tun/tap 驱动实现的网络协议栈封装.</p>
<h4 id="Tun-Tap-驱动程序工作原理"><a href="#Tun-Tap-驱动程序工作原理" class="headerlink" title="Tun/Tap 驱动程序工作原理"></a>Tun/Tap 驱动程序工作原理</h4><p> 作为虚拟网卡驱动, Tun/Tap 驱动程序的数据接收和发送并不直接和真实网卡打交道, 而是 <strong><em>在 Linux 内核中添加了一个 Tun/Tap 虚拟网络设备的驱动程序和一个与之相关连的字符设备 /dev/net/tun</em></strong>, 字符设备 <strong><em>/dev/net/tun</em></strong> 作为用户空间和内核空间交换数据的接口.</p>
<p>当内核将数据包发送到虚拟网络设备时, 数据包被保存在设备相关的一个队 列中, 直到用户空间程序通过打开的字符设备 <strong><em>/dev/net/tun</em></strong> 的描述符读取时, 它才会被拷贝到用户空间的缓冲区中, 其效果就相当于数据包直接发送到了用户空间. 通过系统调用 write 发送数据包时其原理与此类似.</p>
<p> Tun/Tap 驱动程序中包含两个部分: 一部分是字符设备驱动, 还有一部分是网卡驱动部分. 利用网卡驱动部分接收来自 TCP/IP 协议栈的网络分包并发送或者反过来将接收到的网络分包传给协议栈处理; 而字符驱动部分则将网络分包在用户空间和内核空间之间传送, 模拟物理链路的数据接收和发送. </p>
<h4 id="创建和配置虚拟网桥"><a href="#创建和配置虚拟网桥" class="headerlink" title="创建和配置虚拟网桥"></a>创建和配置虚拟网桥</h4><p>Tun/Tap 通常用来创建虚拟网卡 Tap 和搭建虚拟网桥, 如图 1 所示.</p>
<p><img src="/2022/05/22/tun-tap%E8%99%9A%E6%8B%9F%E6%A1%A5%E6%8E%A5/bridge.png" alt></p>
<p align="center">图 1. 虚拟网桥</p>

<p>创建如上所示的网络拓扑所需步骤如下.</p>
<ul>
<li><p>安装两个配置网络所需的软件包</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install bridge-utils</span><br><span class="line">sudo apt install uml-utilities</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建虚拟网桥 <code>br0</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo brctl addbr br0</span><br></pre></td></tr></table></figure>
</li>
<li><p>将主机真实物理网卡的 IP 地址配置为 <code>0.0.0.0</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo ifconfig eth0 0.0.0.0</span><br></pre></td></tr></table></figure>
</li>
<li><p>将主机真实物理网卡添加到虚拟网桥 <code>br0</code> 中</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo brctl addif br0 eth0</span><br></pre></td></tr></table></figure>
</li>
<li><p>为虚拟网桥 <code>br0</code> 配置 IP 地址</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 方式一, 使用 dhclient 自动配置</span></span><br><span class="line">sudo dhclient br0</span><br><span class="line"><span class="meta">#</span><span class="bash"> 方式二, 使用 ifconfig 手动配置, 需同时配置路由表</span></span><br><span class="line">sudo ifconfig br0 &lt;ip&gt;</span><br><span class="line">sudo iptables -t nat -A POSTROUTING -s &lt;ip_mask&gt; -j MASQUERADE</span><br><span class="line">sudo sysctl net.ipv4.ip_forward=1</span><br></pre></td></tr></table></figure>
</li>
<li><p>创建 tun/tap 虚拟网卡</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo tunctl -t tap0 -u $(whoami)</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动 tun/tap 虚拟网卡, 并将其加入到虚拟网桥 <code>br0</code> 中</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo ifconfig tap0 up</span><br><span class="line">sudo brctl addif br0 tap0</span><br></pre></td></tr></table></figure>
<p>可以根据需要对任意数量的 Tap 接口重复最后 2 个步骤, 然后可以为这些 Tap 接口提供 IP 地址, 或者可以开始将 Tap 接口绑定到各种 VM 和仿真器中以相互使用.</p>
</li>
</ul>
<h4 id="删除虚拟网卡-网桥"><a href="#删除虚拟网卡-网桥" class="headerlink" title="删除虚拟网卡/网桥"></a>删除虚拟网卡/网桥</h4><ul>
<li><p>删除虚拟网卡</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo tunctl -d &lt;tap_name&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>将虚拟网卡 <code>tap0</code> 从虚拟网桥 <code>br0</code> 中移除</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo brctl delif br0 tap0</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除虚拟网桥</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo ifconfig &lt;br_name&gt; down</span><br><span class="line">sudo brctl delbr &lt;br_name&gt;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="样例介绍"><a href="#样例介绍" class="headerlink" title="样例介绍"></a>样例介绍</h4><h5 id="Qemu-虚拟机与外部网络通信"><a href="#Qemu-虚拟机与外部网络通信" class="headerlink" title="Qemu 虚拟机与外部网络通信"></a><strong>Qemu 虚拟机与外部网络通信</strong></h5><ol>
<li>Qemu 通信机制</li>
</ol>
<p>为了使虚拟机能够与外界通信, Qemu 需要为虚拟机提供网络设备. Qemu 支持的常用网卡包括 NE2000、rtl8139、pcnet32 等. 命令行上使用 <code>-net nic</code> 选项为虚拟机创建虚拟机网卡. 例如, 命令行选项</p>
<p align="center">-net nic,model=pcnet</p>

<p>表示为虚拟机添加一块 <code>pcnet</code> 类型的以太网卡. 如果省略 <code>model</code> 参数, qemu 会默认选择一种网卡类型, 可以在虚拟机启动后执行 <code>lspci</code> 命令查看. 有了虚拟网络设备, 下面的问题是如何用这些设备来联网.</p>
<p>首先, 虚拟机的网络设备连接在qemu 虚拟的 VLAN 中. 每个 qemu 的运行实例是宿主机中的一个进程, 而每个这样的进程中可以虚拟一些 VLAN, 虚拟机网络设备接入这些VLAN中. 当某个 VLAN 上连接的网络设备发送数据帧, 与它在同一个 VLAN 中的其它网络设备都能接收到数据帧. 上面的例子中对虚拟机的 pcnet 网卡没有指定其连接的 VLAN 号, 那么 qemu 默认会将该网卡连入vlan0. 下面这个例子更具一般性：</p>
   <p align="center">-net nic,model=pcnet -net nic,model=rtl8139,vlan=1, -net nic,model=ne2k_pci,vlan=1</p>

<p>该命令为虚拟机创建了三块网卡: 其中第一块网卡类型是 pcnet, 连入vlan0; 第二块网卡类型是 rtl8139, 第三块网卡类型是 ne2k_pci, 这两块都连入vlan1. 所以第二块网卡与第三块网卡可以互相通信, 但它们与第一块网卡不能直接通信.</p>
<p>接下来, 各个 VLAN 再通过 qemu 提供的 4 种通信方式与外界联网, 包括: <strong>User mode stack、socket、TAP、VDE</strong>. 这里重点介绍 <strong>TAP</strong> 通信方式.</p>
<ul>
<li><p><strong>TAP</strong></p>
<p>这种方式首先需要在宿主机中<em>创建并配置一个 TAP 设备</em>, qemu 进程将该 TAP 设备连接到虚拟机 VLAN 中. 其次, 为了实现虚拟机与外部网络的通信, 在宿主机中通常还要<em>创建并配置一个网桥</em>，并将<em>宿主机的网络接口（通常是 eth0）作为该网桥的一个接口</em>. 最后, 只要<em>将 TAP 设备作为网桥的另一个接口</em>, 虚拟机 VLAN 通过 TAP 设备就可以与外部网络完全通信了. </p>
<p>这是因为, 宿主机的 eth0 接口作为网桥的接口, 与外部网络连接; TAP 设备作为网桥的另一个接口, 与虚拟机 VLAN 连接, 这样两个网络就连通了. 此时, 网桥在这两个网络之间转发数据帧.<br>这里有两个问题需要注意：<br>（1）网桥的转发工作需要得到内核的支持, 所以在编译宿主机内核时需要选择与桥接相关的配置选项;<br>（2）当宿主机 eth0 接口作为网桥接口时, 不能为其配置 IP 地址, 而要位将IP地址配置给网桥.</p>
</li>
</ul>
<ol>
<li>Qemu 运行实例</li>
</ol>
<p>假设已经按照图 1 配置好 <em>tap0、br0 以及 eth0</em> 桥接模型, 这里以 <code>ubuntu16-x86_64.iso</code> 为例介绍如何启动 qemu:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">SYSTEMISO=&quot;./ubuntu-16.04.7-desktop-amd64.iso&quot;</span><br><span class="line">DISKFILE=&quot;./ubuntu-hd.qcow2&quot;</span><br><span class="line"><span class="meta">#</span><span class="bash"> BIOS=<span class="string">&quot;./QEMU_EFI.fd&quot;</span></span></span><br><span class="line"></span><br><span class="line">if [ ! -e $SYSTEMISO ]; then</span><br><span class="line">	echo &quot;ISO $SYSTEMISO does NOT exist&quot;</span><br><span class="line">	exit 1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">if [ ! -e $DISKFILE ]; then</span><br><span class="line">	echo &quot;formating $DISKFILE&quot;</span><br><span class="line">	qemu-img create -f qcow2 $DISKFILE 30G</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line">qemu-system-x86_64 -machine type=q35,accel=kvm -m 2048 -smp 1 \</span><br><span class="line">	-hda $DISKFILE \</span><br><span class="line">	-cdrom $SYSTEMISO \</span><br><span class="line">	-vga virtio \</span><br><span class="line">	-usb \</span><br><span class="line">	-device usb-tablet \</span><br><span class="line">	-net nic \</span><br><span class="line">	-net tap,ifname=tap0,script=no,downscript=no</span><br></pre></td></tr></table></figure>
<p>如果省略 <code>script</code> 和 <code>downscript</code> 参数, qemu 在启动时会以第一个不存在的 tap 接口名（通常是 tap0）为参数去调用 <em>/etc/qemu-ifup</em> 脚本, 而在退出时调用 <em>/etc/qemu-ifdown</em> 脚本. 这两个脚本需要用户自行编写, 其主要作用通常是: 在启动时创建和打开指定的 TAP 接口, 并将该接口添加到虚拟网桥中; 退出时将该接口从虚拟网桥中移除, 然后关闭该接口. 由于配置 TAP 设备的操作前面已经做过了, 所以启动 qemu 时显式地告诉 qemu 不要执行这两个脚本.</p>
<p><strong><em>注意：如果是桥接模型, 则需要为虚拟网桥 <code>br0</code> 配置路由表项; 如果是 TAP 模型, 则需要为 TAP 虚拟网卡配置路由表项 !!!</em></strong></p>
<h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><p><a href="https://www.linux.com/training-tutorials/howto-make-virtual-bridged-network/">Howto make a virtual bridged network</a></p>
<p><a href="https://developers.redhat.com/blog/2018/10/22/introduction-to-linux-interfaces-for-virtual-networking#">Introduction to Linux interfaces for virtual networking</a></p>
<p><a href="https://stty.io/2019/05/13/qemu-vm-wireguard-vpn-tun-tap-networking/">Setting up TUN/TAP networking for QEMU VM’s (and bonus wireguard)</a></p>
<p><a href="http://blog.chinaunix.net/uid-26061689-id-2981914.html">qemu虚拟机与外部网络的通信</a></p>
<p><a href="https://blog.csdn.net/zhaihaifei/article/details/23168621">tunctl添加虚拟网卡TUN/TAP与brctl添加网桥</a></p>
<p><a href="https://www.zhihu.com/question/43590414">Linux中本机和本机Socket通信会走网卡吗</a></p>
<p><a href="https://blog.csdn.net/weixin_29214715/article/details/116694596">linux 多块网卡 bridge,理解linux虚拟网络设备bridge</a></p>
<h4 id="smoltcp-issue"><a href="#smoltcp-issue" class="headerlink" title="smoltcp issue"></a>smoltcp issue</h4><p><a href="https://github.com/smoltcp-rs/smoltcp/issues/97">segment not in receive window in server example</a></p>
]]></content>
      <tags>
        <tag>tun/tap</tag>
        <tag>虚拟桥接</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 介绍</title>
    <url>/2021/07/29/hexo-%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h4 id="使用-Github-空间搭建-Hexo-技术博客"><a href="#使用-Github-空间搭建-Hexo-技术博客" class="headerlink" title="使用 Github 空间搭建 Hexo 技术博客"></a>使用 Github 空间搭建 Hexo 技术博客</h4><ol>
<li><a href="https://blog.csdn.net/wugenqiang/article/details/88373385">使用 Github 空间搭建 Hexo 技术博客</a></li>
<li><a href="https://blog.csdn.net/qq_41907993/article/details/104387191?utm_medium=distribute.pc_relevant.none-task-blog-2~default~baidujs_title~default-1.readhide&amp;spm=1001.2101.3001.4242">个人博客搭建——基于HEXO框架</a></li>
</ol>
<h4 id="使用-Gitee-空间搭建-Hexo-技术博客"><a href="#使用-Gitee-空间搭建-Hexo-技术博客" class="headerlink" title="使用 Gitee 空间搭建 Hexo 技术博客"></a>使用 Gitee 空间搭建 Hexo 技术博客</h4><ol>
<li><a href="https://telcruel.gitee.io/2020/02/13/Hexo/">Hexo + Gitee 博客搭建</a></li>
</ol>
<span id="more"></span>
<h4 id="主题配置"><a href="#主题配置" class="headerlink" title="主题配置"></a>主题配置</h4><ol>
<li><a href="https://wugenqiang.github.io/articles/hexo-do-optimization.html">Hexo+NexT+Gemini 搭建博客拥抱舒爽</a></li>
<li><a href="http://yearito.cn/posts/hexo-theme-beautify.html">Hexo 搭建个人博客系列：主题美化篇</a></li>
<li><a href="https://www.cnblogs.com/TechSnail/p/12933623.html">Hexo进阶设置</a></li>
</ol>
<h4 id="Hexo-添加本地文件下载"><a href="#Hexo-添加本地文件下载" class="headerlink" title="Hexo 添加本地文件下载"></a>Hexo 添加本地文件下载</h4><ol>
<li><a href="https://www.dazhuanlan.com/fanhuajiantu/topics/1376769">Hexo中添加本地文件下载</a></li>
</ol>
<h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><ol>
<li><a href="https://novnan.github.io/Hexo/hexo-draft/">Hexo 文章保存为草稿</a></li>
<li><a href="https://sophistt.github.io/2020/07/22/mathjax-render-error-in-hexo/">Hexo Mathjax 公式渲染</a></li>
</ol>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>github 博客</tag>
        <tag>gitee 博客</tag>
      </tags>
  </entry>
  <entry>
    <title>虚拟机挂载共享目录</title>
    <url>/2022/05/19/%E8%99%9A%E6%8B%9F%E6%9C%BA%E6%8C%82%E8%BD%BD%E5%85%B1%E4%BA%AB%E7%9B%AE%E5%BD%95/</url>
    <content><![CDATA[<h4 id="安装-vmware-tools"><a href="#安装-vmware-tools" class="headerlink" title="安装 vmware-tools"></a>安装 vmware-tools</h4><p>参考链接1。</p>
<h4 id="挂载目录"><a href="#挂载目录" class="headerlink" title="挂载目录"></a>挂载目录</h4><p>若重启后，发现共享文件夹不显示，则检查 vmware-tools 服务是否没有启动，执行以下命令启动服务：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">service vmware-tools start</span><br></pre></td></tr></table></figure>
<p>或者执行如下命令手动挂载：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 方式一</span></span><br><span class="line">vmhgfs-fuse -o subtype=vmhgfs-fuse,allow_other /mnt/hgfs/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式二</span></span><br><span class="line">mount -f vmhgfs .host:/ /mnt/hgfs</span><br></pre></td></tr></table></figure>
<h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><p><a href="https://www.cnblogs.com/woodyoilove/p/8479458.html">vmware Linux虚拟机挂载共享文件夹</a></p>
]]></content>
      <tags>
        <tag>虚拟机</tag>
        <tag>共享目录</tag>
      </tags>
  </entry>
  <entry>
    <title>SM2调研</title>
    <url>/2022/06/29/SM2%E8%B0%83%E7%A0%94/</url>
    <content><![CDATA[<h4 id="大整数乘法"><a href="#大整数乘法" class="headerlink" title="大整数乘法"></a>大整数乘法</h4><ul>
<li><p>基线算法</p>
<p>使用 <strong>双精度</strong> 中间变量，算法复杂度 $O(n^2)$，进位累加次数 $n*n$</p>
</li>
<li><p>Comba 算法</p>
<p>使用 <strong>三精度</strong> 中间变量，算法复杂度 $O(n^2)$，进位累加次数 $2*n$</p>
</li>
<li><p>Karatsuba 算法</p>
<p>使用 <strong>分而治之</strong> 思想，算法复杂度 $O(n^{log_23}) \approx O(n^{1.585})$</p>
</li>
<li><p>Montgomery 算法（蒙哥马利算法）</p>
<p>快速计算模乘、模幂运算（<a href="https://blog.csdn.net/a675115471/article/details/107553091">蒙哥马利算法</a>）</p>
</li>
</ul>
<span id="more"></span>
<h4 id="大数库"><a href="#大数库" class="headerlink" title="大数库"></a>大数库</h4><ul>
<li><p><a href="https://github.com/miracl/MIRACL">MIRACL</a></p>
<p>MIRACL Cryptographic SDK: Multiprecision Integer and Rational Arithmetic Cryptographic Library is a C software library that is widely regarded by developers as the gold standard open source SDK for elliptic curve cryptography (ECC).</p>
<p>针对椭圆曲线进行优化</p>
</li>
<li><p><a href="https://gmplib.org/">GMP</a></p>
<p>GMP is a free library for arbitrary precision arithmetic, operating on signed integers, rational numbers, and floating-point numbers. There is no practical limit to the precision except the ones implied by the available memory in the machine GMP runs on. GMP has a rich set of functions, and the functions have a regular interface.</p>
<p>主要用于整数、有理数和浮点数运算，针对椭圆曲线支持较少</p>
</li>
<li><p><a href="#">OpenSSL</a></p>
<p>包含大数库</p>
</li>
</ul>
<h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>SM2-Sign 中的关键步骤为 $k*G$，其中 $G$ 为椭圆曲线生成元。由于椭圆曲线参数是确定的，因此可针对 $G$ 预先生成查找表，从而加速点乘运算。</p>
<p>SM2-Verify 中的关键步骤为 $s^{\prime}<em>G + r^{\prime}</em>P$, 由于 $P$ 为用户公钥，是可变参数，因此无法针对 $r^{\prime}*P$ 预先生成查找表，只能在验签过程中实时计算部分查找表加速验签过程。</p>
<ul>
<li><p>SM2-GmSSL</p>
<ol>
<li><p>不预先生成查找表(no <code>EC_KEY_precompute_mult</code>)</p>
<p>wang@ubuntu:~/project/sm2-base$ ./main<br>test gmssl sm2 speed in 10s<br>sm2 verify count: 8176.000<br>time cost: 11.314</p>
<font color="red">verify speed: 722.662287/s</font>

<p>test gmssl sm2 verify speed in 10s<br>gmssl sm2 verify count: 8176.000<br>time cost: 13.246</p>
<font color="red">verify speed: 617.263539/s</font>
</li>
<li><p>预先生成乘法查找表(<code>EC_KEY_precompute_mult</code>)</p>
<p>test gmssl sm2 speed in 10s<br>sm2 verify count: 65520.000<br>time cost: 18.185</p>
<font color="red">verify speed: 3603.007366/s</font>

<p>test gmssl sm2 verify speed in 10s<br>gmssl sm2 verify count: 8176.000<br>time cost: 12.835</p>
<font color="red">verify speed: 637.009360/s</font>



</li>
</ol>
</li>
</ul>
<pre><code> wang@ubuntu:~$ gmssl speed sm2
                               sign    verify    sign/s verify/s
  &lt;font color=red&gt;256 bit sm2 (sm2p256v1)   0.0003s   0.0015s   3601.3    668.8&lt;/font&gt;
</code></pre><ol>
<li><p>最新版</p>
<ul>
<li><p>两个查找表—关闭 <code>SM2_NO_CONST_TIME</code><br>GmSSL 2.1.0 - OpenSSL 1.1.0d  03 Jan 2018<br>built on: reproducible build, date unspecified<br>options:bn(64,64) rc4(char) des(int) aes(partial) idea(int) blowfish(ptr)<br>compiler: gcc -DDSO_DLFCN -DHAVE_DLFCN_H -DNDEBUG -DOPENSSL_THREADS -DOPENSSL_NO_STATIC_ENGINE -DOPENSSL_PIC -DOPENSSL_BN_ASM_MONT -DSHA1_ASM -DSHA256_ASM -DSHA512_ASM -DVPAES_ASM -DECP_NISTZ256_ASM -DPOLY1305_ASM -DGMSSL_NO_TURBO -DOPENSSLDIR=”\”/home/wang/local/gmssl\”” -DENGINESDIR=”\”/home/wang/local/gmssl/lib/engines-1.1\””  -Wa,—noexecstack</p>
<pre><code>                          sign    verify    sign/s verify/s
</code></pre><p> 256 bit sm2 (sm2p256v1)   0.0002s   0.0008s   5196.5   1306.8</p>
<pre><code>                          encrypt decrypt   enc/s  dec/s
</code></pre><p> 256 bit sm2 (sm2p256v1)   0.0009s   0.0007s   1165.1   1397.3</p>
</li>
<li><p>两个查找表—开启 <code>SM2_NO_CONST_TIME</code><br>GmSSL 2.1.0 - OpenSSL 1.1.0d  03 Jan 2018<br>built on: reproducible build, date unspecified<br>options:bn(64,64) rc4(char) des(int) aes(partial) idea(int) blowfish(ptr)<br>compiler: gcc -DDSO_DLFCN -DHAVE_DLFCN_H -DNDEBUG -DOPENSSL_THREADS -DOPENSSL_NO_STATIC_ENGINE -DOPENSSL_PIC -DOPENSSL_BN_ASM_MONT -DSHA1_ASM -DSHA256_ASM -DSHA512_ASM -DVPAES_ASM -DECP_NISTZ256_ASM -DPOLY1305_ASM -DSM2_NO_CONST_TIME -DGMSSL_NO_TURBO -DOPENSSLDIR=”\”/home/wang/local/gmssl\”” -DENGINESDIR=”\”/home/wang/local/gmssl/lib/engines-1.1\””  -Wa,—noexecstack</p>
<pre><code>                          sign    verify    sign/s verify/s
</code></pre><p> 256 bit sm2 (sm2p256v1)   0.0002s   0.0008s   5203.7   1331.6</p>
<pre><code>                          encrypt decrypt   enc/s  dec/s
</code></pre><p> 256 bit sm2 (sm2p256v1)   0.0009s   0.0007s   1160.1   1423.</p>
</li>
<li><p>SM2默认曲线——使用NISTP查表（关闭 <code>ec_nistp_64_gcc_128</code>, 开启 <code>SM2_NO_CONST_TIME</code>）</p>
<p>GmSSL 2.5.4 - OpenSSL 1.1.0d  19 Jun 2019<br>built on: reproducible build, date unspecified<br>options:bn(64,64) rc4(char) des(int) aes(partial) idea(int) blowfish(ptr)<br>compiler: gcc -DDSO_DLFCN -DHAVE_DLFCN_H -DNDEBUG -DOPENSSL_THREADS -DOPENSSL_NO_STATIC_ENGINE -DOPENSSL_PIC -DOPENSSL_BN_ASM_MONT -DSHA1_ASM -DSHA256_ASM -DSHA512_ASM -DVPAES_ASM -DECP_NISTZ256_ASM -DPOLY1305_ASM <strong>-DSM2_NO_CONST_TIME</strong> -DGMSSL_NO_TURBO -DOPENSSLDIR=”\”/home/wang/local/gmssl\”” -DENGINESDIR=”\”/home/wang/local/gmssl/lib/engines-1.1\””  -Wa,—noexecstack</p>
<pre><code>                          sign    verify    sign/s verify/s
</code></pre><p> 256 bit sm2 (sm2p256v1)   0.0002s   0.0007s   6457.7   1340.3</p>
<pre><code>                          encrypt decrypt   enc/s  dec/s
</code></pre><p> 256 bit sm2 (sm2p256v1)   0.0008s   0.0007s   1190.5   1406.4</p>
</li>
<li><p>SM2默认曲线——使用SM2P256查表（开启 <code>ec_nistp_64_gcc_128</code>, 开启 <code>SM2_NO_CONST_TIME</code>）</p>
<p>GmSSL 2.5.4 - OpenSSL 1.1.0d  19 Jun 2019<br>built on: reproducible build, date unspecified<br>options:bn(64,64) rc4(char) des(int) aes(partial) idea(int) blowfish(ptr)<br>compiler: gcc -DDSO_DLFCN -DHAVE_DLFCN_H -DNDEBUG -DOPENSSL_THREADS -DOPENSSL_NO_STATIC_ENGINE -DOPENSSL_PIC -DOPENSSL_BN_ASM_MONT -DSHA1_ASM -DSHA256_ASM -DSHA512_ASM -DVPAES_ASM -DECP_NISTZ256_ASM -DPOLY1305_ASM <strong>-DL_ENDIAN -D__arch64__ -DSM2_NO_CONST_TIME</strong> -DGMSSL_NO_TURBO -DOPENSSLDIR=”\”/home/wang/local/gmssl\”” -DENGINESDIR=”\”/home/wang/local/gmssl/lib/engines-1.1\””  -Wa,—noexecstack</p>
<pre><code>                          sign    verify    sign/s verify/s
</code></pre><p> 256 bit sm2 (sm2p256v1)   0.0001s   0.0004s   7275.6   2594.0</p>
<pre><code>                          encrypt decrypt   enc/s  dec/s
</code></pre><p> 256 bit sm2 (sm2p256v1)   0.0007s   0.0006s   1394.6   1691.9</p>
</li>
<li><p>SM2默认曲线——32个查找表（开启 <code>ec_nistp_64_gcc_128</code>, 开启 <code>SM2_NO_CONST_TIME</code>, 开启<code>SM2P256TABLE</code>）</p>
<p>GmSSL 2.5.4 - OpenSSL 1.1.0d  19 Jun 2019<br>built on: reproducible build, date unspecified<br>options:bn(64,64) rc4(char) des(int) aes(partial) idea(int) blowfish(ptr)<br>compiler: gcc -DDSO_DLFCN -DHAVE_DLFCN_H -DNDEBUG -DOPENSSL_THREADS -DOPENSSL_NO_STATIC_ENGINE -DOPENSSL_PIC -DOPENSSL_BN_ASM_MONT -DSHA1_ASM -DSHA256_ASM -DSHA512_ASM -DVPAES_ASM -DECP_NISTZ256_ASM -DPOLY1305_ASM <strong>-DSM2P256TABLE -DL_ENDIAN -D__arch64__ -DSM2_NO_CONST_TIME</strong> -DGMSSL_NO_TURBO -DOPENSSLDIR=”\”/home/wang/local/gmssl\”” -DENGINESDIR=”\”/home/wang/local/gmssl/lib/engines-1.1\””  -Wa,—noexecstack</p>
<pre><code>                          sign    verify    sign/s verify/s
</code></pre><p> 256 bit sm2 (sm2p256v1)   0.0001s   0.0003s  12838.6   2915.4</p>
<pre><code>                          encrypt decrypt   enc/s  dec/s
</code></pre><p> 256 bit sm2 (sm2p256v1)   0.0007s   0.0006s   1512.6   1718.2</p>
</li>
</ul>
</li>
</ol>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> gmssl ecparam -text -noout -name sm2p256v1 -param_enc explicit</span></span><br><span class="line">Field Type: prime-field</span><br><span class="line">Prime:</span><br><span class="line">    00:ff:ff:ff:fe:ff:ff:ff:ff:ff:ff:ff:ff:ff:ff:</span><br><span class="line">    ff:ff:ff:ff:ff:ff:00:00:00:00:ff:ff:ff:ff:ff:</span><br><span class="line">    ff:ff:ff</span><br><span class="line">A:   </span><br><span class="line">    00:ff:ff:ff:fe:ff:ff:ff:ff:ff:ff:ff:ff:ff:ff:</span><br><span class="line">    ff:ff:ff:ff:ff:ff:00:00:00:00:ff:ff:ff:ff:ff:</span><br><span class="line">    ff:ff:fc</span><br><span class="line">B:   </span><br><span class="line">    28:e9:fa:9e:9d:9f:5e:34:4d:5a:9e:4b:cf:65:09:</span><br><span class="line">    a7:f3:97:89:f5:15:ab:8f:92:dd:bc:bd:41:4d:94:</span><br><span class="line">    0e:93</span><br><span class="line">Generator (uncompressed):</span><br><span class="line">    04:32:c4:ae:2c:1f:19:81:19:5f:99:04:46:6a:39:</span><br><span class="line">    c9:94:8f:e3:0b:bf:f2:66:0b:e1:71:5a:45:89:33:</span><br><span class="line">    4c:74:c7:bc:37:36:a2:f4:f6:77:9c:59:bd:ce:e3:</span><br><span class="line">    6b:69:21:53:d0:a9:87:7c:c6:2a:47:40:02:df:32:</span><br><span class="line">    e5:21:39:f0:a0</span><br><span class="line">Order: </span><br><span class="line">    00:ff:ff:ff:fe:ff:ff:ff:ff:ff:ff:ff:ff:ff:ff:</span><br><span class="line">    ff:ff:72:03:df:6b:21:c6:05:2b:53:bb:f4:09:39:</span><br><span class="line">    d5:41:23</span><br><span class="line">Cofactor:  1 (0x1)</span><br></pre></td></tr></table></figure>
<p>对于 <code>P256</code> 上的一个点 <code>x</code>，其大小为 <strong>256 bits = 32 bytes = 8 words = 4 dwords</strong>，对于定义在 <code>P256</code> 上的椭圆曲线点 <code>G=(Gx, Gy)</code>，其大小为 <strong>8 dwords</strong>。考虑 $k*G$：</p>
<script type="math/tex; mode=display">
\begin{align}
k*G &= \left(k_{3}*2^{192} + k_{2}*2^{128} + k_{1}*2^{64} + k_{0}\right)*G\\
    &= \left((k_{3,1}*2^{32}+k_{3,0})*2^{192} + \right.\\
    &\quad\quad (k_{2,1}*2^{32}+k_{2,0})*2^{128} + \\
    &\quad\quad (k_{1,1}*2^{32}+k_{1,0})*2^{64} + \\
    &\left.\quad\quad (k_{0,1}*2^{32}+k_{0,0})\right)*G \\
    &=\left(k_{3,1}*2^{192+32}+k_{2,1}*2^{128+32}+k_{1,1}*2^{64+32}+k_{0,1}*2^{32}\right)*G+\\
    &\quad \left(k_{3,0}*2^{192}+k_{2,0}*2^{128}+k_{1,0}*2^{64}+k_{0,0}\right)*G
\end{align}</script><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*-</span></span><br><span class="line"><span class="comment"> * Base point pre computation</span></span><br><span class="line"><span class="comment"> * --------------------------</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Two different sorts of precomputed tables are used in the following code.</span></span><br><span class="line"><span class="comment"> * Each contain various points on the curve, where each point is three field</span></span><br><span class="line"><span class="comment"> * elements (x, y, z).</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * For the base point table, z is usually 1 (0 for the point at infinity).</span></span><br><span class="line"><span class="comment"> * This table has 2 * 16 elements, starting with the following:</span></span><br><span class="line"><span class="comment"> * index | bits    | point</span></span><br><span class="line"><span class="comment"> * ------+---------+------------------------------</span></span><br><span class="line"><span class="comment"> *     0 | 0 0 0 0 | 0G</span></span><br><span class="line"><span class="comment"> *     1 | 0 0 0 1 | 1G</span></span><br><span class="line"><span class="comment"> *     2 | 0 0 1 0 | 2^64G</span></span><br><span class="line"><span class="comment"> *     3 | 0 0 1 1 | (2^64 + 1)G</span></span><br><span class="line"><span class="comment"> *     4 | 0 1 0 0 | 2^128G</span></span><br><span class="line"><span class="comment"> *     5 | 0 1 0 1 | (2^128 + 1)G</span></span><br><span class="line"><span class="comment"> *     6 | 0 1 1 0 | (2^128 + 2^64)G</span></span><br><span class="line"><span class="comment"> *     7 | 0 1 1 1 | (2^128 + 2^64 + 1)G</span></span><br><span class="line"><span class="comment"> *     8 | 1 0 0 0 | 2^192G</span></span><br><span class="line"><span class="comment"> *     9 | 1 0 0 1 | (2^192 + 1)G</span></span><br><span class="line"><span class="comment"> *    10 | 1 0 1 0 | (2^192 + 2^64)G</span></span><br><span class="line"><span class="comment"> *    11 | 1 0 1 1 | (2^192 + 2^64 + 1)G</span></span><br><span class="line"><span class="comment"> *    12 | 1 1 0 0 | (2^192 + 2^128)G5</span></span><br><span class="line"><span class="comment"> *    13 | 1 1 0 1 | (2^192 + 2^128 + 1)G</span></span><br><span class="line"><span class="comment"> *    14 | 1 1 1 0 | (2^192 + 2^128 + 2^64)G</span></span><br><span class="line"><span class="comment"> *    15 | 1 1 1 1 | (2^192 + 2^128 + 2^64 + 1)G</span></span><br><span class="line"><span class="comment"> * followed by a copy of this with each element multiplied by 2^32.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * The reason for this is so that we can clock bits into four different</span></span><br><span class="line"><span class="comment"> * locations when doing simple scalar multiplies against the base point,</span></span><br><span class="line"><span class="comment"> * and then another four locations using the second 16 elements.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * Tables for other points have table[i] = iG for i in 0 .. 16. */</span></span><br></pre></td></tr></table></figure>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * select_point selects the |idx|th point from a precomputation table and</span></span><br><span class="line"><span class="comment"> * copies it to out.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">select_point</span><span class="params">(<span class="keyword">const</span> u64 idx, <span class="keyword">unsigned</span> <span class="keyword">int</span> size,</span></span></span><br><span class="line"><span class="params"><span class="function">                         <span class="keyword">const</span> smallfelem pre_comp[<span class="number">16</span>][<span class="number">3</span>], smallfelem out[<span class="number">3</span>])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> j;</span><br><span class="line">    u64 *outlimbs = &amp;out[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> SM2_NO_CONST_TIME</span></span><br><span class="line">    <span class="keyword">const</span> u64 *inlimbs = (u64 *)&amp;pre_comp[idx][<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; NLIMBS * <span class="number">3</span>; j++) &#123;</span><br><span class="line">        outlimbs[j] = inlimbs[j];</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    <span class="built_in">memset</span>(out, <span class="number">0</span>, <span class="keyword">sizeof</span>(*out) * <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">        <span class="keyword">const</span> u64 *inlimbs = (u64 *)&amp;pre_comp[i][<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">        u64 mask = i ^ idx;</span><br><span class="line">        mask |= mask &gt;&gt; <span class="number">4</span>;</span><br><span class="line">        mask |= mask &gt;&gt; <span class="number">2</span>;</span><br><span class="line">        mask |= mask &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        mask &amp;= <span class="number">1</span>;</span><br><span class="line">        mask--;</span><br><span class="line">        <span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; NLIMBS * <span class="number">3</span>; j++)</span><br><span class="line">            outlimbs[j] |= inlimbs[j] &amp; mask;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Interleaved point multiplication using precomputed point multiples: The</span></span><br><span class="line"><span class="comment"> * small point multiples 0*P, 1*P, ..., 17*P are in pre_comp[], the scalars</span></span><br><span class="line"><span class="comment"> * in scalars[]. If g_scalar is non-NULL, we also add this multiple of the</span></span><br><span class="line"><span class="comment"> * generator, using certain (large) precomputed multiples in g_pre_comp.</span></span><br><span class="line"><span class="comment"> * Output point (X, Y, Z) is stored in x_out, y_out, z_out</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">batch_mul</span><span class="params">(felem x_out, felem y_out, felem z_out,</span></span></span><br><span class="line"><span class="params"><span class="function">                      <span class="keyword">const</span> felem_bytearray scalars[],</span></span></span><br><span class="line"><span class="params"><span class="function">                      <span class="keyword">const</span> <span class="keyword">unsigned</span> num_points, <span class="keyword">const</span> u8 *g_scalar,</span></span></span><br><span class="line"><span class="params"><span class="function">                      <span class="keyword">const</span> <span class="keyword">int</span> mixed, <span class="keyword">const</span> smallfelem pre_comp[][<span class="number">17</span>][<span class="number">3</span>],</span></span></span><br><span class="line"><span class="params"><span class="function">                      <span class="keyword">const</span> smallfelem g_pre_comp[<span class="number">2</span>][<span class="number">16</span>][<span class="number">3</span>])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i, skip;</span><br><span class="line">    <span class="keyword">unsigned</span> num, gen_mul = (g_scalar != <span class="literal">NULL</span>);</span><br><span class="line">    felem nq[<span class="number">3</span>], ftmp;</span><br><span class="line">    smallfelem tmp[<span class="number">3</span>];</span><br><span class="line">    u64 bits;</span><br><span class="line">    u8 sign, digit;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/* set nq to the point at infinity */</span></span><br><span class="line">    <span class="built_in">memset</span>(nq, <span class="number">0</span>, <span class="keyword">sizeof</span>(nq));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Loop over all scalars msb-to-lsb, interleaving additions of multiples</span></span><br><span class="line"><span class="comment">     * of the generator (two in each of the last 32 rounds) and additions of</span></span><br><span class="line"><span class="comment">     * other points multiples (every 5th round).</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    skip = <span class="number">1</span>;                   <span class="comment">/* save two point operations in the first</span></span><br><span class="line"><span class="comment">                                 * round */</span></span><br><span class="line">    <span class="keyword">for</span> (i = (num_points ? <span class="number">255</span> : <span class="number">31</span>); i &gt;= <span class="number">0</span>; --i) &#123;</span><br><span class="line">        <span class="comment">/* double */</span></span><br><span class="line">        <span class="keyword">if</span> (!skip)</span><br><span class="line">            point_double(nq[<span class="number">0</span>], nq[<span class="number">1</span>], nq[<span class="number">2</span>], nq[<span class="number">0</span>], nq[<span class="number">1</span>], nq[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* add multiples of the generator */</span></span><br><span class="line">        <span class="keyword">if</span> (gen_mul &amp;&amp; (i &lt;= <span class="number">31</span>)) &#123;</span><br><span class="line">            <span class="comment">/* first, look 32 bits upwards */</span></span><br><span class="line">            bits = get_bit(g_scalar, i + <span class="number">224</span>) &lt;&lt; <span class="number">3</span>;</span><br><span class="line">            bits |= get_bit(g_scalar, i + <span class="number">160</span>) &lt;&lt; <span class="number">2</span>;</span><br><span class="line">            bits |= get_bit(g_scalar, i + <span class="number">96</span>) &lt;&lt; <span class="number">1</span>;</span><br><span class="line">            bits |= get_bit(g_scalar, i + <span class="number">32</span>);</span><br><span class="line">            <span class="comment">/* select the point to add, in constant time */</span></span><br><span class="line">            select_point(bits, <span class="number">16</span>, g_pre_comp[<span class="number">1</span>], tmp);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!skip) &#123;</span><br><span class="line">                <span class="comment">/* Arg 1 below is for &quot;mixed&quot; */</span></span><br><span class="line">                point_add(nq[<span class="number">0</span>], nq[<span class="number">1</span>], nq[<span class="number">2</span>],</span><br><span class="line">                          nq[<span class="number">0</span>], nq[<span class="number">1</span>], nq[<span class="number">2</span>], <span class="number">1</span>, tmp[<span class="number">0</span>], tmp[<span class="number">1</span>], tmp[<span class="number">2</span>]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                smallfelem_expand(nq[<span class="number">0</span>], tmp[<span class="number">0</span>]);</span><br><span class="line">                smallfelem_expand(nq[<span class="number">1</span>], tmp[<span class="number">1</span>]);</span><br><span class="line">                smallfelem_expand(nq[<span class="number">2</span>], tmp[<span class="number">2</span>]);</span><br><span class="line">                skip = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">/* second, look at the current position */</span></span><br><span class="line">            bits = get_bit(g_scalar, i + <span class="number">192</span>) &lt;&lt; <span class="number">3</span>;</span><br><span class="line">            bits |= get_bit(g_scalar, i + <span class="number">128</span>) &lt;&lt; <span class="number">2</span>;</span><br><span class="line">            bits |= get_bit(g_scalar, i + <span class="number">64</span>) &lt;&lt; <span class="number">1</span>;</span><br><span class="line">            bits |= get_bit(g_scalar, i);</span><br><span class="line">            <span class="comment">/* select the point to add, in constant time */</span></span><br><span class="line">            select_point(bits, <span class="number">16</span>, g_pre_comp[<span class="number">0</span>], tmp);</span><br><span class="line">            <span class="comment">/* Arg 1 below is for &quot;mixed&quot; */</span></span><br><span class="line">            point_add(nq[<span class="number">0</span>], nq[<span class="number">1</span>], nq[<span class="number">2</span>],</span><br><span class="line">                      nq[<span class="number">0</span>], nq[<span class="number">1</span>], nq[<span class="number">2</span>], <span class="number">1</span>, tmp[<span class="number">0</span>], tmp[<span class="number">1</span>], tmp[<span class="number">2</span>]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* do other additions every 5 doublings */</span></span><br><span class="line">        <span class="keyword">if</span> (num_points &amp;&amp; (i % <span class="number">5</span> == <span class="number">0</span>)) &#123;</span><br><span class="line">            <span class="comment">/* loop over all scalars */</span></span><br><span class="line">            <span class="keyword">for</span> (num = <span class="number">0</span>; num &lt; num_points; ++num) &#123;</span><br><span class="line">                bits = get_bit(scalars[num], i + <span class="number">4</span>) &lt;&lt; <span class="number">5</span>;</span><br><span class="line">                bits |= get_bit(scalars[num], i + <span class="number">3</span>) &lt;&lt; <span class="number">4</span>;</span><br><span class="line">                bits |= get_bit(scalars[num], i + <span class="number">2</span>) &lt;&lt; <span class="number">3</span>;</span><br><span class="line">                bits |= get_bit(scalars[num], i + <span class="number">1</span>) &lt;&lt; <span class="number">2</span>;</span><br><span class="line">                bits |= get_bit(scalars[num], i) &lt;&lt; <span class="number">1</span>;</span><br><span class="line">                bits |= get_bit(scalars[num], i - <span class="number">1</span>);</span><br><span class="line">                ec_GFp_nistp_recode_scalar_bits(&amp;sign, &amp;digit, bits);</span><br><span class="line">                <span class="comment">/*</span></span><br><span class="line"><span class="comment">                 * select the point to add or subtract, in constant time</span></span><br><span class="line"><span class="comment">                 */</span></span><br><span class="line">                select_point(digit, <span class="number">17</span>, pre_comp[num], tmp);</span><br><span class="line">                smallfelem_neg(ftmp, tmp[<span class="number">1</span>]); <span class="comment">/* (X, -Y, Z) is the negative</span></span><br><span class="line"><span class="comment">                                               * point */</span></span><br><span class="line">                copy_small_conditional(ftmp, tmp[<span class="number">1</span>], (((limb) sign) - <span class="number">1</span>));</span><br><span class="line">                felem_contract(tmp[<span class="number">1</span>], ftmp);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (!skip) &#123;</span><br><span class="line">                    point_add(nq[<span class="number">0</span>], nq[<span class="number">1</span>], nq[<span class="number">2</span>],</span><br><span class="line">                              nq[<span class="number">0</span>], nq[<span class="number">1</span>], nq[<span class="number">2</span>],</span><br><span class="line">                              mixed, tmp[<span class="number">0</span>], tmp[<span class="number">1</span>], tmp[<span class="number">2</span>]);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    smallfelem_expand(nq[<span class="number">0</span>], tmp[<span class="number">0</span>]);</span><br><span class="line">                    smallfelem_expand(nq[<span class="number">1</span>], tmp[<span class="number">1</span>]);</span><br><span class="line">                    smallfelem_expand(nq[<span class="number">2</span>], tmp[<span class="number">2</span>]);</span><br><span class="line">                    skip = <span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    felem_assign(x_out, nq[<span class="number">0</span>]);</span><br><span class="line">    felem_assign(y_out, nq[<span class="number">1</span>]);</span><br><span class="line">    felem_assign(z_out, nq[<span class="number">2</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="GmSSL-SM2-依赖项"><a href="#GmSSL-SM2-依赖项" class="headerlink" title="GmSSL SM2 依赖项"></a>GmSSL SM2 依赖项</h4><blockquote>
<p>wang@ubuntu:~/project/sm2-base$ gcc -M sm2test.c | grep openssl<br> /usr/local/include/openssl/bn.h /usr/local/include/openssl/e_os2.h \<br> /usr/local/include/openssl/opensslconf.h /usr/include/inttypes.h \<br> /usr/local/include/openssl/ossl_typ.h \<br> /usr/local/include/openssl/crypto.h /usr/include/time.h \<br> /usr/local/include/openssl/stack.h \<br> /usr/local/include/openssl/safestack.h \<br> /usr/local/include/openssl/opensslv.h \<br> /usr/local/include/openssl/symhacks.h /usr/include/pthread.h \<br> /usr/local/include/openssl/ec.h /usr/local/include/openssl/asn1.h \<br> /usr/local/include/openssl/bio.h /usr/local/include/openssl/evp.h \<br> /usr/local/include/openssl/objects.h \<br> /usr/local/include/openssl/obj_mac.h /usr/local/include/openssl/rand.h \<br> /usr/local/include/openssl/sm2.h /usr/local/include/openssl/err.h \<br> /usr/local/include/openssl/lhash.h /usr/include/errno.h \<br> /usr/local/include/openssl/kdf2.h /usr/local/include/openssl/kdf.h \<br> /usr/local/include/openssl/x509.h /usr/local/include/openssl/buffer.h \<br> /usr/local/include/openssl/paillier.h /usr/local/include/openssl/sm9.h \<br> /usr/local/include/openssl/rsa.h /usr/local/include/openssl/dsa.h \<br> /usr/local/include/openssl/dh.h /usr/local/include/openssl/sha.h \<br> /usr/local/include/openssl/x509_vfy.h /usr/local/include/openssl/pkcs7.h \<br> /usr/local/include/openssl/ecies.h /usr/local/include/openssl/sm3.h</p>
</blockquote>
<h4 id="BUG"><a href="#BUG" class="headerlink" title="BUG"></a>BUG</h4><ul>
<li><p><code>src/bn_sm2p256.c</code></p>
<p>当未定义 L_ENDIAN 时，编译的 <strong>BN</strong> 大数库有问题</p>
</li>
</ul>
<h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><p><a href="https://blog.csdn.net/weixin_34354945/article/details/94491043">大整数算法[09] Comba乘法（原理）</a></p>
<p><a href="https://iq.opengenus.org/karatsuba-algorithm/">Karatsuba Algorithm (for fast integer multiplication)</a></p>
<p><a href="https://blog.csdn.net/samsho2/article/details/85840200">OpenSSL密码库算法笔记——第1.2.2章 comba乘法</a></p>
<p><img src="/2022/06/29/SM2%E8%B0%83%E7%A0%94/openssl-mul.png" alt="img"></p>
]]></content>
      <categories>
        <category>国密算法</category>
      </categories>
      <tags>
        <tag>大整数乘法</tag>
        <tag>大数库</tag>
        <tag>SM2算法优化</tag>
      </tags>
  </entry>
  <entry>
    <title>NEON 指令速查</title>
    <url>/2022/04/10/NEON-%E6%8C%87%E4%BB%A4%E9%80%9F%E6%9F%A5/</url>
    <content><![CDATA[<h4 id="NEON-指令速查"><a href="#NEON-指令速查" class="headerlink" title="NEON 指令速查"></a>NEON 指令速查</h4><p>以下是 NEON 指令，所在头文件为 <code>&lt;arm_neon.h&gt;</code>。包含部分 NEON 与 SSE 对应关系。</p>
<span id="more"></span>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __ARM_NEON__</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">error</span> You must enable NEON instructions (e.g. -mfloat-abi=softfp -mfpu=neon) to use arm_neon.h</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">(1) 正常指令：生成大小相同且类型通常与操作数向量相同的结果向量；</span></span><br><span class="line"><span class="comment">(2) 长指令：对双字向量操作数执行运算，生成四字向量的结果。所生成的元素一般是操作数元素宽度的两倍，</span></span><br><span class="line"><span class="comment">并属于同一类型；</span></span><br><span class="line"><span class="comment">(3) 宽指令：一个双字向量操作数和一个四字向量操作数执行运算，生成四字向量结果。所生成的元素和第一个</span></span><br><span class="line"><span class="comment">操作数的元素是第二个操作数元素宽度的两倍；</span></span><br><span class="line"><span class="comment">(4) 窄指令：四字向量操作数执行运算，并生成双字向量结果，所生成的元素一般是操作数元素宽度的一半，</span></span><br><span class="line"><span class="comment">(5) 饱和指令：当超过数据类型指定的范围则自动限制在该范围内。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/******************************************************Addition*************************/</span></span><br><span class="line"><span class="comment">/*--1、Vector add(正常指令): vadd -&gt; ri = ai + bi; r, a, b have equal lane sizes--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vadd_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a, <span class="keyword">int8x8_t</span> __b)</span></span>;<span class="comment">//_mm_add_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vadd_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b)</span></span>;<span class="comment">//_mm_add_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vadd_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b)</span></span>;<span class="comment">//_mm_add_epi32</span></span><br><span class="line"><span class="function"><span class="keyword">int64x1_t</span> <span class="title">vadd_s64</span> <span class="params">(<span class="keyword">int64x1_t</span> __a, <span class="keyword">int64x1_t</span> __b)</span></span>;<span class="comment">//_mm_add_epi64</span></span><br><span class="line"><span class="comment">//_mm_add_ps, SSE, use only low 64 bits</span></span><br><span class="line"><span class="function"><span class="keyword">float32x2_t</span> <span class="title">vadd_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a, <span class="keyword">float32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vadd_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">uint8x8_t</span> __b)</span></span>;<span class="comment">//_mm_add_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vadd_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">uint16x4_t</span> __b)</span></span>;<span class="comment">//_mm_add_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vadd_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">uint32x2_t</span> __b)</span></span>;<span class="comment">//_mm_add_epi32</span></span><br><span class="line"><span class="function"><span class="keyword">uint64x1_t</span> <span class="title">vadd_u64</span> <span class="params">(<span class="keyword">uint64x1_t</span> __a, <span class="keyword">uint64x1_t</span> __b)</span></span>;<span class="comment">//_mm_add_epi64</span></span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vaddq_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a, <span class="keyword">int8x16_t</span> __b)</span></span>;<span class="comment">//_mm_add_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vaddq_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">int16x8_t</span> __b)</span></span>;<span class="comment">//_mm_add_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vaddq_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int32x4_t</span> __b)</span></span>;<span class="comment">//_mm_add_epi32</span></span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vaddq_s64</span> <span class="params">(<span class="keyword">int64x2_t</span> __a, <span class="keyword">int64x2_t</span> __b)</span></span>;<span class="comment">//_mm_add_epi64</span></span><br><span class="line"><span class="function"><span class="keyword">float32x4_t</span> <span class="title">vaddq_f32</span> <span class="params">(<span class="keyword">float32x4_t</span> __a, <span class="keyword">float32x4_t</span> __b)</span></span>;<span class="comment">//_mm_add_ps</span></span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vaddq_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a, <span class="keyword">uint8x16_t</span> __b)</span></span>;<span class="comment">//_mm_add_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vaddq_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">uint16x8_t</span> __b)</span></span>;<span class="comment">//_mm_add_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vaddq_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">uint32x4_t</span> __b)</span></span>;<span class="comment">//_mm_add_epi32</span></span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vaddq_u64</span> <span class="params">(<span class="keyword">uint64x2_t</span> __a, <span class="keyword">uint64x2_t</span> __b)</span></span>;<span class="comment">//_mm_add_epi64</span></span><br><span class="line"><span class="comment">/*--2、Vector long add(长指令): vaddl -&gt; ri = ai + bi; a, b have equal lane sizes, </span></span><br><span class="line"><span class="comment">result is a 128 bit vector of lanes that are twice the width--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vaddl_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a, <span class="keyword">int8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vaddl_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vaddl_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vaddl_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">uint8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vaddl_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">uint16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vaddl_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">uint32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/*--3、Vector wide add(宽指令): vaddw -&gt; ri = ai + bi--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vaddw_s8</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">int8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vaddw_s16</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vaddw_s32</span> <span class="params">(<span class="keyword">int64x2_t</span> __a, <span class="keyword">int32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vaddw_u8</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">uint8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vaddw_u16</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">uint16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vaddw_u32</span> <span class="params">(<span class="keyword">uint64x2_t</span> __a, <span class="keyword">uint32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/*--4、Vector halving add: vhadd -&gt; ri = (ai + bi) &gt;&gt; 1; </span></span><br><span class="line"><span class="comment">shifts each result right one bit, Results are truncated--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vhadd_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a, <span class="keyword">int8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vhadd_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vhadd_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vhadd_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">uint8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vhadd_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">uint16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vhadd_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">uint32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vhaddq_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a, <span class="keyword">int8x16_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vhaddq_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">int16x8_t</span> __b)</span></span></span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vhaddq_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int32x4_t</span> __b)</span></span></span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vhaddq_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a, <span class="keyword">uint8x16_t</span> __b)</span></span></span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vhaddq_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">uint16x8_t</span> __b)</span></span></span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vhaddq_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">uint32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/*--5、Vector rounding halving add: vrhadd -&gt; ri = (ai + bi + 1) &gt;&gt; 1; </span></span><br><span class="line"><span class="comment">shifts each result right one bit, Results are rounded(四舍五入)--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vrhadd_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a, <span class="keyword">int8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vrhadd_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vrhadd_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vrhadd_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">uint8x8_t</span> __b)</span></span>;<span class="comment">//_mm_avg_epu8</span></span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vrhadd_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">uint16x4_t</span> __b)</span></span>;<span class="comment">//_mm_avg_epu16</span></span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vrhadd_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">uint32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vrhaddq_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a, <span class="keyword">int8x16_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vrhaddq_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">int16x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vrhaddq_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vrhaddq_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a, <span class="keyword">uint8x16_t</span> __b)</span></span>;<span class="comment">//_mm_avg_epu8</span></span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vrhaddq_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">uint16x8_t</span> __b)</span></span>;<span class="comment">//_mm_avg_epu16</span></span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vrhaddq_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">uint32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/*--6、Vector saturating add(饱和指令): vqadd -&gt; ri = sat(ai + bi); </span></span><br><span class="line"><span class="comment">the results are saturated if they overflow--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vqadd_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a, <span class="keyword">int8x8_t</span> __b)</span></span>;<span class="comment">//_mm_adds_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vqadd_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b)</span></span>;<span class="comment">//_mm_adds_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vqadd_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x1_t</span> <span class="title">vqadd_s64</span> <span class="params">(<span class="keyword">int64x1_t</span> __a, <span class="keyword">int64x1_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vqadd_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">uint8x8_t</span> __b)</span></span>;<span class="comment">//_mm_adds_epu8</span></span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vqadd_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">uint16x4_t</span> __b)</span></span>;<span class="comment">//_mm_adds_epu16</span></span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vqadd_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">uint32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x1_t</span> <span class="title">vqadd_u64</span> <span class="params">(<span class="keyword">uint64x1_t</span> __a, <span class="keyword">uint64x1_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vqaddq_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a, <span class="keyword">int8x16_t</span> __b)</span></span>;<span class="comment">//_mm_adds_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vqaddq_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">int16x8_t</span> __b)</span></span>;<span class="comment">//_mm_adds_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vqaddq_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vqaddq_s64</span> <span class="params">(<span class="keyword">int64x2_t</span> __a, <span class="keyword">int64x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vqaddq_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a, <span class="keyword">uint8x16_t</span> __b)</span></span>;<span class="comment">//_mm_adds_epu8</span></span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vqaddq_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">uint16x8_t</span> __b)</span></span>;<span class="comment">//_mm_adds_epu16</span></span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vqaddq_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">uint32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vqaddq_u64</span> <span class="params">(<span class="keyword">uint64x2_t</span> __a, <span class="keyword">uint64x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/*--7、Vector add high half(窄指令): vaddhn -&gt; ri = sat(ai + bi); </span></span><br><span class="line"><span class="comment">selecting High half, The results are truncated--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vaddhn_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">int16x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vaddhn_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vaddhn_s64</span> <span class="params">(<span class="keyword">int64x2_t</span> __a, <span class="keyword">int64x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vaddhn_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">uint16x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vaddhn_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">uint32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vaddhn_u64</span> <span class="params">(<span class="keyword">uint64x2_t</span> __a, <span class="keyword">uint64x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/*--8、Vector rounding add high half(窄指令): vraddhn -&gt; ri = ai + bi; </span></span><br><span class="line"><span class="comment">selecting High half, The results are rounded--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vraddhn_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">int16x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vraddhn_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int32x4_t</span> __b)</span></span></span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vraddhn_s64</span> <span class="params">(<span class="keyword">int64x2_t</span> __a, <span class="keyword">int64x2_t</span> __b)</span></span></span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vraddhn_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">uint16x8_t</span> __b)</span></span></span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vraddhn_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">uint32x4_t</span> __b)</span></span></span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vraddhn_u64</span> <span class="params">(<span class="keyword">uint64x2_t</span> __a, <span class="keyword">uint64x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/*******************************************Multiplication******************************/</span></span><br><span class="line"><span class="comment">/*--1、Vector multiply(正常指令): vmul -&gt; ri = ai * bi;--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vmul_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a, <span class="keyword">int8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vmul_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b)</span></span>;<span class="comment">//_mm_mullo_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vmul_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x2_t</span> <span class="title">vmul_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a, <span class="keyword">float32x2_t</span> __b)</span></span>;<span class="comment">//_mm_mul_ps</span></span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vmul_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">uint8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vmul_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">uint16x4_t</span> __b)</span></span>;<span class="comment">//_mm_mullo_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vmul_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">uint32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x8_t</span> <span class="title">vmul_p8</span> <span class="params">(<span class="keyword">poly8x8_t</span> __a, <span class="keyword">poly8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vmulq_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a, <span class="keyword">int8x16_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vmulq_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">int16x8_t</span> __b)</span></span>;<span class="comment">//_mm_mullo_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vmulq_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x4_t</span> <span class="title">vmulq_f32</span> <span class="params">(<span class="keyword">float32x4_t</span> __a, <span class="keyword">float32x4_t</span> __b)</span></span>;<span class="comment">//_mm_mul_ps</span></span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vmulq_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a, <span class="keyword">uint8x16_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vmulq_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">uint16x8_t</span> __b)</span></span>;<span class="comment">//_mm_mullo_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vmulq_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">uint32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x16_t</span> <span class="title">vmulq_p8</span> <span class="params">(<span class="keyword">poly8x16_t</span> __a, <span class="keyword">poly8x16_t</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/*--2、Vector multiply accumulate: vmla -&gt; ri = ai + bi * ci; --*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vmla_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a, <span class="keyword">int8x8_t</span> __b, <span class="keyword">int8x8_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vmla_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b, <span class="keyword">int16x4_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vmla_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b, <span class="keyword">int32x2_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x2_t</span> <span class="title">vmla_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a, <span class="keyword">float32x2_t</span> __b, <span class="keyword">float32x2_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vmla_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">uint8x8_t</span> __b, <span class="keyword">uint8x8_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vmla_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">uint16x4_t</span> __b, <span class="keyword">uint16x4_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vmla_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">uint32x2_t</span> __b, <span class="keyword">uint32x2_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vmlaq_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a, <span class="keyword">int8x16_t</span> __b, <span class="keyword">int8x16_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vmlaq_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">int16x8_t</span> __b, <span class="keyword">int16x8_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vmlaq_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int32x4_t</span> __b, <span class="keyword">int32x4_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x4_t</span> <span class="title">vmlaq_f32</span> <span class="params">(<span class="keyword">float32x4_t</span> __a, <span class="keyword">float32x4_t</span> __b, <span class="keyword">float32x4_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vmlaq_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a, <span class="keyword">uint8x16_t</span> __b, <span class="keyword">uint8x16_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vmlaq_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">uint16x8_t</span> __b, <span class="keyword">uint16x8_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vmlaq_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">uint32x4_t</span> __b, <span class="keyword">uint32x4_t</span> __c)</span></span>;</span><br><span class="line"><span class="comment">/*--3、Vector multiply accumulate long: vmlal -&gt; ri = ai + bi * ci --*/</span></span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vmlal_s8</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">int8x8_t</span> __b, <span class="keyword">int8x8_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vmlal_s16</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int16x4_t</span> __b, <span class="keyword">int16x4_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vmlal_s32</span> <span class="params">(<span class="keyword">int64x2_t</span> __a, <span class="keyword">int32x2_t</span> __b, <span class="keyword">int32x2_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vmlal_u8</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">uint8x8_t</span> __b, <span class="keyword">uint8x8_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vmlal_u16</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">uint16x4_t</span> __b, <span class="keyword">uint16x4_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vmlal_u32</span> <span class="params">(<span class="keyword">uint64x2_t</span> __a, <span class="keyword">uint32x2_t</span> __b, <span class="keyword">uint32x2_t</span> __c)</span></span>;</span><br><span class="line"><span class="comment">/*--4、Vector multiply subtract: vmls -&gt; ri = ai - bi * ci --*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vmls_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a, <span class="keyword">int8x8_t</span> __b, <span class="keyword">int8x8_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vmls_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b, <span class="keyword">int16x4_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vmls_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b, <span class="keyword">int32x2_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x2_t</span> <span class="title">vmls_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a, <span class="keyword">float32x2_t</span> __b, <span class="keyword">float32x2_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vmls_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">uint8x8_t</span> __b, <span class="keyword">uint8x8_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vmls_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">uint16x4_t</span> __b, <span class="keyword">uint16x4_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vmls_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">uint32x2_t</span> __b, <span class="keyword">uint32x2_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vmlsq_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a, <span class="keyword">int8x16_t</span> __b, <span class="keyword">int8x16_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vmlsq_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">int16x8_t</span> __b, <span class="keyword">int16x8_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vmlsq_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int32x4_t</span> __b, <span class="keyword">int32x4_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x4_t</span> <span class="title">vmlsq_f32</span> <span class="params">(<span class="keyword">float32x4_t</span> __a, <span class="keyword">float32x4_t</span> __b, <span class="keyword">float32x4_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vmlsq_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a, <span class="keyword">uint8x16_t</span> __b, <span class="keyword">uint8x16_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vmlsq_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">uint16x8_t</span> __b, <span class="keyword">uint16x8_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vmlsq_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">uint32x4_t</span> __b, <span class="keyword">uint32x4_t</span> __c)</span></span>;</span><br><span class="line"><span class="comment">/*--5、Vector multiply subtract long&amp;#xff1a;vmlsl -&gt; ri = ai - bi * ci --*/</span></span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vmlsl_s8</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">int8x8_t</span> __b, <span class="keyword">int8x8_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vmlsl_s16</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int16x4_t</span> __b, <span class="keyword">int16x4_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vmlsl_s32</span> <span class="params">(<span class="keyword">int64x2_t</span> __a, <span class="keyword">int32x2_t</span> __b, <span class="keyword">int32x2_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vmlsl_u8</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">uint8x8_t</span> __b, <span class="keyword">uint8x8_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vmlsl_u16</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">uint16x4_t</span> __b, <span class="keyword">uint16x4_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vmlsl_u32</span> <span class="params">(<span class="keyword">uint64x2_t</span> __a, <span class="keyword">uint32x2_t</span> __b, <span class="keyword">uint32x2_t</span> __c)</span></span>;</span><br><span class="line"><span class="comment">/*--6、Vector saturating doubling multiply high: vqdmulh -&gt; ri = sat(ai * bi); </span></span><br><span class="line"><span class="comment">doubles the results and returns only the high half of the truncated results--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vqdmulh_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vqdmulh_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vqdmulhq_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">int16x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vqdmulhq_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/*--7、Vector saturating rounding doubling multiply high vqrdmulh -&gt; ri = ai * bi: </span></span><br><span class="line"><span class="comment">doubles the results and returns only the high half of the rounded results. </span></span><br><span class="line"><span class="comment">The results are saturated if they overflow--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vqrdmulh_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vqrdmulh_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vqrdmulhq_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">int16x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vqrdmulhq_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/*--8、Vector saturating doubling multiply accumulate long: vqdmlal -&gt; ri = ai + bi * ci;</span></span><br><span class="line"><span class="comment">multiplies the elements in the second and third vectors, doubles the results and adds the</span></span><br><span class="line"><span class="comment">results to the values in the first vector. The results are saturated if they overflow--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vqdmlal_s16</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int16x4_t</span> __b, <span class="keyword">int16x4_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span>  <span class="title">vqdmlal_s32</span> <span class="params">(<span class="keyword">int64x2_t</span> __a, <span class="keyword">int32x2_t</span> __b, <span class="keyword">int32x2_t</span> __c)</span></span>;</span><br><span class="line"><span class="comment">/*--9、Vector saturating doubling multiply subtract long: vqdmlsl -&gt; ri = ai - bi * ci;</span></span><br><span class="line"><span class="comment">multiplies the elements in the second and third vectors, doubles the results and subtracts </span></span><br><span class="line"><span class="comment">the results from the elements in the first vector. </span></span><br><span class="line"><span class="comment">The results are saturated if they overflow--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vqdmlsl_s16</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int16x4_t</span> __b, <span class="keyword">int16x4_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vqdmlsl_s32</span> <span class="params">(<span class="keyword">int64x2_t</span> __a, <span class="keyword">int32x2_t</span> __b, <span class="keyword">int32x2_t</span> __c)</span></span>;</span><br><span class="line"><span class="comment">/*--10、Vector long multiply(长指令): vmull -&gt; ri = ai * bi;--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vmull_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a, <span class="keyword">int8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vmull_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vmull_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vmull_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">uint8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vmull_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">uint16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vmull_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">uint32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x8_t</span> <span class="title">vmull_p8</span> <span class="params">(<span class="keyword">poly8x8_t</span> __a, <span class="keyword">poly8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/*--11、Vector saturating doubling long multiply: vqdmull -&gt; ri = ai * bi;</span></span><br><span class="line"><span class="comment">If any of the results overflow, they are saturated--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vqdmull_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vqdmull_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/*--12、Fused multiply accumulate: vfma -&gt; ri = ai + bi * ci; </span></span><br><span class="line"><span class="comment">The result of the multiply is not rounded before the accumulation--*/</span></span><br><span class="line"><span class="function"><span class="keyword">float32x2_t</span> <span class="title">vfma_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a, <span class="keyword">float32x2_t</span> __b, <span class="keyword">float32x2_t</span> __c)</span></span></span><br><span class="line"><span class="function"><span class="keyword">float32x4_t</span> <span class="title">vfmaq_f32</span> <span class="params">(<span class="keyword">float32x4_t</span> __a, <span class="keyword">float32x4_t</span> __b, <span class="keyword">float32x4_t</span> __c)</span></span>;</span><br><span class="line"><span class="comment">/*--13、Fused multiply subtract: vfms -&gt; ri = ai - bi * ci; </span></span><br><span class="line"><span class="comment">The result of the multiply is not rounded before the subtraction--*/</span></span><br><span class="line"><span class="function"><span class="keyword">float32x2_t</span> <span class="title">vfms_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a, <span class="keyword">float32x2_t</span> __b, <span class="keyword">float32x2_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x4_t</span> <span class="title">vfmsq_f32</span> <span class="params">(<span class="keyword">float32x4_t</span> __a, <span class="keyword">float32x4_t</span> __b, <span class="keyword">float32x4_t</span> __c)</span></span>;</span><br><span class="line"><span class="comment">/******************************************************Round to integral****************/</span></span><br><span class="line"><span class="comment">/*--1、to nearest, ties to even--*/</span></span><br><span class="line"><span class="function"><span class="keyword">float32x2_t</span> <span class="title">vrndn_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x4_t</span> <span class="title">vrndqn_f32</span> <span class="params">(<span class="keyword">float32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="comment">/*--2、to nearest, ties away from zero--*/</span></span><br><span class="line"><span class="function"><span class="keyword">float32x2_t</span> <span class="title">vrnda_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x4_t</span> <span class="title">vrndqa_f32</span> <span class="params">(<span class="keyword">float32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="comment">/*--3、towards +Inf--*/</span></span><br><span class="line"><span class="function"><span class="keyword">float32x2_t</span> <span class="title">vrndp_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x4_t</span> <span class="title">vrndqp_f32</span> <span class="params">(<span class="keyword">float32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="comment">/*--4、towards -Inf--*/</span></span><br><span class="line"><span class="function"><span class="keyword">float32x2_t</span> <span class="title">vrndm_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x4_t</span> <span class="title">vrndqm_f32</span> <span class="params">(<span class="keyword">float32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="comment">/*--5、towards 0--*/</span></span><br><span class="line"><span class="function"><span class="keyword">float32x2_t</span> <span class="title">vrnd_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x4_t</span> <span class="title">vrndq_f32</span> <span class="params">(<span class="keyword">float32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="comment">/**********************************************Subtraction******************************/</span></span><br><span class="line"><span class="comment">/*--1、Vector subtract(正常指令):vsub -&gt; ri = ai - bi;--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vsub_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a, <span class="keyword">int8x8_t</span> __b)</span></span>;<span class="comment">//_mm_sub_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vsub_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b)</span></span>;<span class="comment">//_mm_sub_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vsub_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b)</span></span>;<span class="comment">//_mm_sub_epi32</span></span><br><span class="line"><span class="function"><span class="keyword">int64x1_t</span> <span class="title">vsub_s64</span> <span class="params">(<span class="keyword">int64x1_t</span> __a, <span class="keyword">int64x1_t</span> __b)</span></span>;<span class="comment">//_mm_sub_epi64</span></span><br><span class="line"><span class="function"><span class="keyword">float32x2_t</span> <span class="title">vsub_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a, <span class="keyword">float32x2_t</span> __b)</span></span>;<span class="comment">//_mm_sub_ps</span></span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vsub_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">uint8x8_t</span> __b)</span></span>;<span class="comment">//_mm_sub_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vsub_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">uint16x4_t</span> __b)</span></span>;<span class="comment">//_mm_sub_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vsub_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">uint32x2_t</span> __b)</span></span>;<span class="comment">//_mm_sub_epi32</span></span><br><span class="line"><span class="function"><span class="keyword">uint64x1_t</span> <span class="title">vsub_u64</span> <span class="params">(<span class="keyword">uint64x1_t</span> __a, <span class="keyword">uint64x1_t</span> __b)</span></span>;<span class="comment">//_mm_sub_epi64</span></span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vsubq_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a, <span class="keyword">int8x16_t</span> __b)</span></span>;<span class="comment">//_mm_sub_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vsubq_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">int16x8_t</span> __b)</span></span>;<span class="comment">//_mm_sub_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vsubq_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int32x4_t</span> __b)</span></span>;<span class="comment">//_mm_sub_epi32</span></span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vsubq_s64</span> <span class="params">(<span class="keyword">int64x2_t</span> __a, <span class="keyword">int64x2_t</span> __b)</span></span>;<span class="comment">//_mm_sub_epi64</span></span><br><span class="line"><span class="function"><span class="keyword">float32x4_t</span> <span class="title">vsubq_f32</span> <span class="params">(<span class="keyword">float32x4_t</span> __a, <span class="keyword">float32x4_t</span> __b)</span></span>;<span class="comment">//_mm_sub_ps</span></span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vsubq_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a, <span class="keyword">uint8x16_t</span> __b)</span></span>;<span class="comment">//_mm_sub_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vsubq_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">uint16x8_t</span> __b)</span></span>;<span class="comment">//_mm_sub_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vsubq_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">uint32x4_t</span> __b)</span></span>;<span class="comment">//_mm_sub_epi32</span></span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vsubq_u64</span> <span class="params">(<span class="keyword">uint64x2_t</span> __a, <span class="keyword">uint64x2_t</span> __b)</span></span>;<span class="comment">//_mm_sub_epi64</span></span><br><span class="line"><span class="comment">/*--2、Vector long subtract(长指令): vsubl -&gt; ri = ai - bi; --*/</span></span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vsubl_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a, <span class="keyword">int8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vsubl_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vsubl_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vsubl_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">uint8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vsubl_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">uint16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vsubl_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">uint32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/*--3、Vector wide subtract(宽指令): vsubw -&gt; ri = ai - bi;--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vsubw_s8</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">int8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vsubw_s16</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vsubw_s32</span> <span class="params">(<span class="keyword">int64x2_t</span> __a, <span class="keyword">int32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vsubw_u8</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">uint8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vsubw_u16</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">uint16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vsubw_u32</span> <span class="params">(<span class="keyword">uint64x2_t</span> __a, <span class="keyword">uint32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/*--4、Vector saturating subtract(饱和指令): vqsub -&gt; ri = sat(ai - bi);</span></span><br><span class="line"><span class="comment">If any of the results overflow, they are saturated--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vqsub_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a, <span class="keyword">int8x8_t</span> __b)</span></span>;<span class="comment">//_mm_subs_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vqsub_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b)</span></span>;<span class="comment">//_mm_subs_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vqsub_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b)</span></span>;<span class="comment">//_mm_subs_epi32</span></span><br><span class="line"><span class="function"><span class="keyword">int64x1_t</span> <span class="title">vqsub_s64</span> <span class="params">(<span class="keyword">int64x1_t</span> __a, <span class="keyword">int64x1_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vqsub_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">uint8x8_t</span> __b)</span></span>;<span class="comment">//_mm_subs_epu8</span></span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vqsub_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">uint16x4_t</span> __b)</span></span>;<span class="comment">//_mm_subs_epu16</span></span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vqsub_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">uint32x2_t</span> __b)</span></span>;<span class="comment">//_mm_subs_epu32</span></span><br><span class="line"><span class="function"><span class="keyword">uint64x1_t</span> <span class="title">vqsub_u64</span> <span class="params">(<span class="keyword">uint64x1_t</span> __a, <span class="keyword">uint64x1_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vqsubq_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a, <span class="keyword">int8x16_t</span> __b)</span></span>;<span class="comment">//_mm_subs_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vqsubq_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">int16x8_t</span> __b)</span></span>;<span class="comment">//_mm_subs_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vqsubq_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int32x4_t</span> __b)</span></span>;<span class="comment">//_mm_subs_epi32</span></span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vqsubq_s64</span> <span class="params">(<span class="keyword">int64x2_t</span> __a, <span class="keyword">int64x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vqsubq_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a, <span class="keyword">uint8x16_t</span> __b)</span></span>;<span class="comment">//_mm_subs_epu8</span></span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vqsubq_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">uint16x8_t</span> __b)</span></span>;<span class="comment">//_mm_subs_epu16</span></span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vqsubq_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">uint32x4_t</span> __b)</span></span>;<span class="comment">//_mm_subs_epu32</span></span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vqsubq_u64</span> <span class="params">(<span class="keyword">uint64x2_t</span> __a, <span class="keyword">uint64x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/*--5、Vector halving subtract: vhsub -&gt; ri = (ai - bi) &gt;&gt; 1; </span></span><br><span class="line"><span class="comment">shifts each result right one bit, The results are truncated.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vhsub_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a, <span class="keyword">int8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vhsub_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vhsub_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vhsub_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">uint8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vhsub_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">uint16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vhsub_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">uint32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vhsubq_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a, <span class="keyword">int8x16_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vhsubq_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">int16x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vhsubq_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vhsubq_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a, <span class="keyword">uint8x16_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vhsubq_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">uint16x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vhsubq_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">uint32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/*--6、Vector subtract high half(窄指令): vsubhn -&gt; ri = ai - bi;</span></span><br><span class="line"><span class="comment">It returns the most significant halves of the results. The results are truncated--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vsubhn_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">int16x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vsubhn_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vsubhn_s64</span> <span class="params">(<span class="keyword">int64x2_t</span> __a, <span class="keyword">int64x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vsubhn_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">uint16x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vsubhn_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">uint32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vsubhn_u64</span> <span class="params">(<span class="keyword">uint64x2_t</span> __a, <span class="keyword">uint64x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/*--7、Vector rounding subtract high half(窄指令): vrsubhn -&gt; ai - bi; </span></span><br><span class="line"><span class="comment">It returns the most significant halves of the results. The results are rounded--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vrsubhn_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">int16x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vrsubhn_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vrsubhn_s64</span> <span class="params">(<span class="keyword">int64x2_t</span> __a, <span class="keyword">int64x2_t</span> __b)</span></span></span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vrsubhn_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">uint16x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vrsubhn_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">uint32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vrsubhn_u64</span> <span class="params">(<span class="keyword">uint64x2_t</span> __a, <span class="keyword">uint64x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/******************************************************Comparison***********************/</span></span><br><span class="line"><span class="comment">/*--1、Vector compare equal(正常指令): vceq -&gt; ri = ai == bi ? 1...1 : 0...0; </span></span><br><span class="line"><span class="comment">If they are equal, the corresponding element in the destination vector is set to all ones.</span></span><br><span class="line"><span class="comment">Otherwise, it is set to all zeros--*/</span></span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vceq_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a, <span class="keyword">int8x8_t</span> __b)</span></span>;<span class="comment">//_mm_cmpeq_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vceq_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b)</span></span>;<span class="comment">//_mm_cmpeq_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vceq_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b)</span></span>;<span class="comment">//_mm_cmpeq_epi32</span></span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vceq_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a, <span class="keyword">float32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vceq_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">uint8x8_t</span> __b)</span></span>;<span class="comment">//_mm_cmpeq_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vceq_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">uint16x4_t</span> __b)</span></span>;<span class="comment">//_mm_cmpeq_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vceq_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">uint32x2_t</span> __b)</span></span>;<span class="comment">//_mm_cmpeq_epi32</span></span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vceq_p8</span> <span class="params">(<span class="keyword">poly8x8_t</span> __a, <span class="keyword">poly8x8_t</span> __b)</span></span>;<span class="comment">//_mm_cmpeq_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vceqq_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a, <span class="keyword">int8x16_t</span> __b)</span></span>;<span class="comment">//_mm_cmpeq_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vceqq_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">int16x8_t</span> __b)</span></span>;<span class="comment">//_mm_cmpeq_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vceqq_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int32x4_t</span> __b)</span></span>;<span class="comment">//_mm_cmpeq_epi32</span></span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vceqq_f32</span> <span class="params">(<span class="keyword">float32x4_t</span> __a, <span class="keyword">float32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vceqq_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a, <span class="keyword">uint8x16_t</span> __b)</span></span>;<span class="comment">//_mm_cmpeq_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vceqq_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">uint16x8_t</span> __b)</span></span>;<span class="comment">//_mm_cmpeq_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vceqq_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">uint32x4_t</span> __b)</span></span>;<span class="comment">//_mm_cmpeq_epi32</span></span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vceqq_p8</span> <span class="params">(<span class="keyword">poly8x16_t</span> __a, <span class="keyword">poly8x16_t</span> __b)</span></span>;<span class="comment">//_mm_cmpeq_epi8</span></span><br><span class="line"><span class="comment">/*--2、Vector compare greater-than or equal(正常指令): vcge-&gt; ri = ai &gt;= bi ? 1...1:0...0;</span></span><br><span class="line"><span class="comment">If it is greater than or equal to it, the corresponding element in the destination </span></span><br><span class="line"><span class="comment">vector is set to all ones. Otherwise, it is set to all zeros.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vcge_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a, <span class="keyword">int8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vcge_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vcge_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vcge_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a, <span class="keyword">float32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vcge_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">uint8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vcge_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">uint16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vcge_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">uint32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vcgeq_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a, <span class="keyword">int8x16_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vcgeq_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">int16x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vcgeq_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vcgeq_f32</span> <span class="params">(<span class="keyword">float32x4_t</span> __a, <span class="keyword">float32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vcgeq_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a, <span class="keyword">uint8x16_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vcgeq_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">uint16x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vcgeq_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">uint32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/*--3、Vector compare less-than or equal(正常指令): vcle -&gt; ri = ai &amp;lt;= bi ? 1...1:0...0;</span></span><br><span class="line"><span class="comment">If it is less than or equal to it, the corresponding element in the destination vector </span></span><br><span class="line"><span class="comment">is set to all ones. Otherwise, it is set to all zeros.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vcle_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a, <span class="keyword">int8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vcle_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vcle_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vcle_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a, <span class="keyword">float32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vcle_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">uint8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vcle_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">uint16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vcle_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">uint32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vcleq_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a, <span class="keyword">int8x16_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vcleq_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">int16x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vcleq_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vcleq_f32</span> <span class="params">(<span class="keyword">float32x4_t</span> __a, <span class="keyword">float32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vcleq_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a, <span class="keyword">uint8x16_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vcleq_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">uint16x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vcleq_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">uint32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/*--4、Vector compare greater-than(正常指令): vcgt -&gt; ri = ai &gt; bi ? 1...1:0...0;</span></span><br><span class="line"><span class="comment">If it is greater than it, the corresponding element in the destination vector is</span></span><br><span class="line"><span class="comment">set to all ones. Otherwise, it is set to all zeros--*/</span></span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vcgt_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a, <span class="keyword">int8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vcgt_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vcgt_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vcgt_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a, <span class="keyword">float32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vcgt_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">uint8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vcgt_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">uint16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vcgt_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">uint32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vcgtq_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a, <span class="keyword">int8x16_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vcgtq_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">int16x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vcgtq_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vcgtq_f32</span> <span class="params">(<span class="keyword">float32x4_t</span> __a, <span class="keyword">float32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vcgtq_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a, <span class="keyword">uint8x16_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vcgtq_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">uint16x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vcgtq_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">uint32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/*--5、Vector compare less-than(正常指令): vclt -&gt; ri = ai &amp;lt; bi ? 1...1:0...0;</span></span><br><span class="line"><span class="comment">If it is less than it, the corresponding element in the destination vector is set </span></span><br><span class="line"><span class="comment">to all ones.Otherwise, it is set to all zeros--*/</span></span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vclt_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a, <span class="keyword">int8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vclt_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vclt_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vclt_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a, <span class="keyword">float32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vclt_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">uint8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vclt_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">uint16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vclt_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">uint32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vcltq_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a, <span class="keyword">int8x16_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vcltq_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">int16x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vcltq_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vcltq_f32</span> <span class="params">(<span class="keyword">float32x4_t</span> __a, <span class="keyword">float32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vcltq_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a, <span class="keyword">uint8x16_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vcltq_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">uint16x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vcltq_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">uint32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/*--6、Vector compare absolute greater-than or equal(正常指令): </span></span><br><span class="line"><span class="comment">vcage -&gt; ri = |ai| &gt;= |bi| ? 1...1:0...0;</span></span><br><span class="line"><span class="comment">compares the absolute value of each element in a vector with the absolute value of the </span></span><br><span class="line"><span class="comment">corresponding element of a second vector. If it is greater than or equal to it, </span></span><br><span class="line"><span class="comment">the corresponding element in the destination vector is set to all ones.</span></span><br><span class="line"><span class="comment">Otherwise, it is set to all zeros.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vcage_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a, <span class="keyword">float32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vcageq_f32</span> <span class="params">(<span class="keyword">float32x4_t</span> __a, <span class="keyword">float32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/*--7、Vector compare absolute less-than or equal(正常指令):</span></span><br><span class="line"><span class="comment">vcale -&gt; ri = |ai| &amp;lt;= |bi| ? 1...1:0...0;</span></span><br><span class="line"><span class="comment">compares the absolute value of each element in a vector with the absolute value of the </span></span><br><span class="line"><span class="comment">corresponding element of a second vector. If it is less than or equal to it, </span></span><br><span class="line"><span class="comment">the corresponding element in the destination vector is set to all ones.</span></span><br><span class="line"><span class="comment">Otherwise, it is set to all zeros--*/</span></span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vcale_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a, <span class="keyword">float32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vcaleq_f32</span> <span class="params">(<span class="keyword">float32x4_t</span> __a, <span class="keyword">float32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/*--8、Vector compare absolute greater-than(正常指令):</span></span><br><span class="line"><span class="comment">vcage -&gt; ri = |ai| &gt; |bi| ? 1...1:0...0;</span></span><br><span class="line"><span class="comment">compares the absolute value of each element in a vector with the absolute value of the</span></span><br><span class="line"><span class="comment">corresponding element of a second vector. If it is greater than it, </span></span><br><span class="line"><span class="comment">the corresponding element in the destination vector is set to all ones. </span></span><br><span class="line"><span class="comment">Otherwise, it is set to all zeros.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vcagt_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a, <span class="keyword">float32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vcagtq_f32</span> <span class="params">(<span class="keyword">float32x4_t</span> __a, <span class="keyword">float32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/*--9、Vector compare absolute less-than(正常指令):</span></span><br><span class="line"><span class="comment">vcalt -&gt; ri = |ai| &amp;lt; |bi| ? 1...1:0...0;</span></span><br><span class="line"><span class="comment">compares the absolute value of each element in a vector with the absolute value of the</span></span><br><span class="line"><span class="comment">corresponding element of a second vector.If it is less than it, the corresponding </span></span><br><span class="line"><span class="comment">element in the destination vector is set to all ones. Otherwise,it is set to all zeros--*/</span></span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vcalt_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a, <span class="keyword">float32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vcaltq_f32</span> <span class="params">(<span class="keyword">float32x4_t</span> __a, <span class="keyword">float32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/**********************************************Vector test bits*************************/</span></span><br><span class="line"><span class="comment">/*--正常指令&amp;#xff0c;vtst -&gt; ri = (ai &amp;amp; bi != 0) ? 1...1:0...0;</span></span><br><span class="line"><span class="comment">bitwise logical ANDs each element in a vector with the corresponding element of a second </span></span><br><span class="line"><span class="comment">vector.If the result is not zero, the corresponding element in the destination vector </span></span><br><span class="line"><span class="comment">is set to all ones. Otherwise, it is set to all zeros--*/</span></span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vtst_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a, <span class="keyword">int8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vtst_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vtst_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vtst_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">uint8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vtst_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">uint16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vtst_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">uint32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vtst_p8</span> <span class="params">(<span class="keyword">poly8x8_t</span> __a, <span class="keyword">poly8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vtstq_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a, <span class="keyword">int8x16_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vtstq_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">int16x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vtstq_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vtstq_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a, <span class="keyword">uint8x16_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vtstq_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">uint16x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vtstq_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">uint32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vtstq_p8</span> <span class="params">(<span class="keyword">poly8x16_t</span> __a, <span class="keyword">poly8x16_t</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/**********************************************Absolute difference**********************/</span></span><br><span class="line"><span class="comment">/*--1、Absolute difference between the arguments(正常指令): vabd -&gt; ri = |ai - bi|;</span></span><br><span class="line"><span class="comment">returns the absolute values of the results--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vabd_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a, <span class="keyword">int8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vabd_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vabd_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x2_t</span> <span class="title">vabd_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a, <span class="keyword">float32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vabd_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">uint8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vabd_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">uint16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vabd_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">uint32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vabdq_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a, <span class="keyword">int8x16_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vabdq_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">int16x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vabdq_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x4_t</span> <span class="title">vabdq_f32</span> <span class="params">(<span class="keyword">float32x4_t</span> __a, <span class="keyword">float32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vabdq_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a, <span class="keyword">uint8x16_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vabdq_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">uint16x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vabdq_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">uint32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/*--2、Absolute difference - long(长指令): vabdl -&gt; ri = |ai - bi|; </span></span><br><span class="line"><span class="comment">The elements in the result vector are wider--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vabdl_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a, <span class="keyword">int8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vabdl_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vabdl_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vabdl_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">uint8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vabdl_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">uint16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vabdl_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">uint32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/*--3、Absolute difference and accumulate: vaba -&gt; ri = ai + |bi - ci|;--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vaba_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a, <span class="keyword">int8x8_t</span> __b, <span class="keyword">int8x8_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vaba_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b, <span class="keyword">int16x4_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vaba_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b, <span class="keyword">int32x2_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vaba_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">uint8x8_t</span> __b, <span class="keyword">uint8x8_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vaba_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">uint16x4_t</span> __b, <span class="keyword">uint16x4_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vaba_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">uint32x2_t</span> __b, <span class="keyword">uint32x2_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vabaq_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a, <span class="keyword">int8x16_t</span> __b, <span class="keyword">int8x16_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vabaq_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">int16x8_t</span> __b, <span class="keyword">int16x8_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vabaq_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int32x4_t</span> __b, <span class="keyword">int32x4_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vabaq_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a, <span class="keyword">uint8x16_t</span> __b, <span class="keyword">uint8x16_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vabaq_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">uint16x8_t</span> __b, <span class="keyword">uint16x8_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vabaq_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">uint32x4_t</span> __b, <span class="keyword">uint32x4_t</span> __c)</span></span>;</span><br><span class="line"><span class="comment">/*--4、Absolute difference and accumulate - long: vabal -&gt; ri = ai + |bi - ci|; </span></span><br><span class="line"><span class="comment">The elements in the result are wider--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vabal_s8</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">int8x8_t</span> __b, <span class="keyword">int8x8_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vabal_s16</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int16x4_t</span> __b, <span class="keyword">int16x4_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vabal_s32</span> <span class="params">(<span class="keyword">int64x2_t</span> __a, <span class="keyword">int32x2_t</span> __b, <span class="keyword">int32x2_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vabal_u8</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">uint8x8_t</span> __b, <span class="keyword">uint8x8_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vabal_u16</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">uint16x4_t</span> __b, <span class="keyword">uint16x4_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vabal_u32</span> <span class="params">(<span class="keyword">uint64x2_t</span> __a, <span class="keyword">uint32x2_t</span> __b, <span class="keyword">uint32x2_t</span> __c)</span></span>;</span><br><span class="line"><span class="comment">/***********************************************Max*************************************/</span></span><br><span class="line"><span class="comment">/*--正常指令, vmax -&gt; ri = ai &gt;= bi ? ai : bi; returns the larger of each pair--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vmax_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a, <span class="keyword">int8x8_t</span> __b)</span></span>;<span class="comment">//_mm_max_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vmax_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b)</span></span>;<span class="comment">//_mm_max_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vmax_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b)</span></span>;<span class="comment">//_mm_max_epi32</span></span><br><span class="line"><span class="function"><span class="keyword">float32x2_t</span> <span class="title">vmax_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a, <span class="keyword">float32x2_t</span> __b)</span></span>;<span class="comment">//_mm_max_ps</span></span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vmax_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">uint8x8_t</span> __b)</span></span>;<span class="comment">//_mm_max_epu8</span></span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vmax_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">uint16x4_t</span> __b)</span></span>;<span class="comment">//_mm_max_epu16</span></span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vmax_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">uint32x2_t</span> __b)</span></span>;<span class="comment">//_mm_max_epu32</span></span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vmaxq_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a, <span class="keyword">int8x16_t</span> __b)</span></span>;<span class="comment">//_mm_max_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vmaxq_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">int16x8_t</span> __b)</span></span>;<span class="comment">//_mm_max_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vmaxq_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int32x4_t</span> __b)</span></span>;<span class="comment">//_mm_max_epi32</span></span><br><span class="line"><span class="function"><span class="keyword">float32x4_t</span> <span class="title">vmaxq_f32</span> <span class="params">(<span class="keyword">float32x4_t</span> __a, <span class="keyword">float32x4_t</span> __b)</span></span>;<span class="comment">//_mm_max_ps</span></span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vmaxq_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a, <span class="keyword">uint8x16_t</span> __b)</span></span>;<span class="comment">//_mm_max_epu8</span></span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vmaxq_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">uint16x8_t</span> __b)</span></span>;<span class="comment">//_mm_max_epu16</span></span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vmaxq_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">uint32x4_t</span> __b)</span></span>;<span class="comment">//_mm_max_epu32</span></span><br><span class="line"><span class="comment">/****************************************************Min********************************/</span></span><br><span class="line"><span class="comment">/*--正常指令, vmin -&gt; ri = ai &gt;= bi ? bi : ai; returns the smaller of each pair--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vmin_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a, <span class="keyword">int8x8_t</span> __b)</span></span>;<span class="comment">//_mm_min_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vmin_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b)</span></span>;<span class="comment">//_mm_min_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vmin_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b)</span></span>;<span class="comment">//_mm_min_epi32</span></span><br><span class="line"><span class="function"><span class="keyword">float32x2_t</span> <span class="title">vmin_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a, <span class="keyword">float32x2_t</span> __b)</span></span>;<span class="comment">//_mm_min_ps</span></span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vmin_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">uint8x8_t</span> __b)</span></span>;<span class="comment">//_mm_min_epu8</span></span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vmin_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">uint16x4_t</span> __b)</span></span>;<span class="comment">//_mm_min_epu16</span></span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vmin_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">uint32x2_t</span> __b)</span></span>;<span class="comment">//_mm_min_epu32</span></span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vminq_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a, <span class="keyword">int8x16_t</span> __b)</span></span>;<span class="comment">//_mm_min_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vminq_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">int16x8_t</span> __b)</span></span>;<span class="comment">//_mm_min_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vminq_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int32x4_t</span> __b)</span></span>;<span class="comment">//_mm_min_epi32</span></span><br><span class="line"><span class="function"><span class="keyword">float32x4_t</span> <span class="title">vminq_f32</span> <span class="params">(<span class="keyword">float32x4_t</span> __a, <span class="keyword">float32x4_t</span> __b)</span></span>;<span class="comment">//_mm_min_ps</span></span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vminq_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a, <span class="keyword">uint8x16_t</span> __b)</span></span>;<span class="comment">//_mm_min_epu8</span></span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vminq_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">uint16x8_t</span> __b)</span></span>;<span class="comment">//_mm_min_epu16</span></span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vminq_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">uint32x4_t</span> __b)</span></span>;<span class="comment">//_mm_min_epu32</span></span><br><span class="line"><span class="comment">/*******************************************Pairwise addition***************************/</span></span><br><span class="line"><span class="comment">/*--1、Pairwise add(正常指令): </span></span><br><span class="line"><span class="comment">vpadd -&gt; r0 = a0 + a1, ..., r3 = a6 + a7, r4 = b0 + b1, ..., r7 = b6 + b7</span></span><br><span class="line"><span class="comment">adds adjacent pairs of elements of two vectors, </span></span><br><span class="line"><span class="comment">and places the results in the destination vector.--*/</span></span><br><span class="line"><span class="comment">//r0 = a0 + a1, ...,r3 = a6 + a7, r4 = b0 + b1, ...,r7 = b6 + b7</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vpadd_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a, <span class="keyword">int8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vpadd_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vpadd_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x2_t</span> <span class="title">vpadd_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a, <span class="keyword">float32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vpadd_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">uint8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vpadd_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">uint16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vpadd_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">uint32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/*--2、Long pairwise add: vpaddl vpaddl -&gt; r0 = a0 + a1, ..., r3 = a6 + a7;</span></span><br><span class="line"><span class="comment">adds adjacent pairs of elements of a vector, sign extends or zero extends the results to </span></span><br><span class="line"><span class="comment">twice their original width, and places the final results in the destination vector--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vpaddl_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vpaddl_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x1_t</span> <span class="title">vpaddl_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vpaddl_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vpaddl_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x1_t</span> <span class="title">vpaddl_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vpaddlq_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vpaddlq_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vpaddlq_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vpaddlq_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vpaddlq_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vpaddlq_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="comment">/*--3、Long pairwise add and accumulate: </span></span><br><span class="line"><span class="comment">vpadal -&gt; r0 = a0 + (b0 + b1), ..., r3 = a3 + (b6 + b7);</span></span><br><span class="line"><span class="comment">adds adjacent pairs of elements in the second vector, sign extends or zero extends the</span></span><br><span class="line"><span class="comment">results to twice the original width.  It then accumulates this with the corresponding </span></span><br><span class="line"><span class="comment">element in the first vector and places the final results in the destination vector--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vpadal_s8</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vpadal_s16</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x1_t</span> <span class="title">vpadal_s32</span> <span class="params">(<span class="keyword">int64x1_t</span> __a, <span class="keyword">int32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vpadal_u8</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">uint8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vpadal_u16</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">uint16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x1_t</span> <span class="title">vpadal_u32</span> <span class="params">(<span class="keyword">uint64x1_t</span> __a, <span class="keyword">uint32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vpadalq_s8</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">int8x16_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vpadalq_s16</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int16x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vpadalq_s32</span> <span class="params">(<span class="keyword">int64x2_t</span> __a, <span class="keyword">int32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vpadalq_u8</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">uint8x16_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vpadalq_u16</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">uint16x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vpadalq_u32</span> <span class="params">(<span class="keyword">uint64x2_t</span> __a, <span class="keyword">uint32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/**********************************************Folding maximum**************************/</span></span><br><span class="line"><span class="comment">/*--饱和指令, vpmax -&gt; vpmax r0 = a0 &gt;= a1 ? a0 : a1, ..., r4 = b0 &gt;= b1 ? b0 : b1, ...;</span></span><br><span class="line"><span class="comment">compares adjacent pairs of elements, and copies the larger of each pair into the </span></span><br><span class="line"><span class="comment">destination vector.The maximums from each pair of the first input vector are stored in </span></span><br><span class="line"><span class="comment">the lower half of the destination vector. The maximums from each pair of the second input </span></span><br><span class="line"><span class="comment">vector are stored in the higher half of the destination vector--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vpmax_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a, <span class="keyword">int8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vpmax_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vpmax_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x2_t</span> <span class="title">vpmax_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a, <span class="keyword">float32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vpmax_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">uint8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vpmax_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">uint16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vpmax_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">uint32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/***************************************************Folding minimum*********************/</span></span><br><span class="line"><span class="comment">/*--饱和指令, vpmin -&gt; r0 = a0 &gt;= a1 ? a1 : a0, ..., r4 = b0 &gt;= b1 ? b1 : b0, ...;</span></span><br><span class="line"><span class="comment">compares adjacent pairs of elements, and copies the smaller of each pair into the </span></span><br><span class="line"><span class="comment">destination vector.The minimums from each pair of the first input vector are stored in </span></span><br><span class="line"><span class="comment">the lower half of the destination vector. The minimums from each pair of the second </span></span><br><span class="line"><span class="comment">input vector are stored in the higher half of the destination vector.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vpmin_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a, <span class="keyword">int8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vpmin_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vpmin_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x2_t</span> <span class="title">vpmin_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a, <span class="keyword">float32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vpmin_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">uint8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vpmin_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">uint16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vpmin_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">uint32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/***************************************************Reciprocal**************************/</span></span><br><span class="line"><span class="comment">/*--1、饱和指令, Newton-Raphson iteration(牛顿 - 拉夫逊迭代)</span></span><br><span class="line"><span class="comment">performs a Newton-Raphson step for finding the reciprocal. It multiplies the elements of</span></span><br><span class="line"><span class="comment">one vector by the corresponding elements of another vector, subtracts each of the results</span></span><br><span class="line"><span class="comment">from 2, and places the final results into the elements of the destination vector--*/</span></span><br><span class="line"><span class="function"><span class="keyword">float32x2_t</span> <span class="title">vrecps_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a, <span class="keyword">float32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x4_t</span> <span class="title">vrecpsq_f32</span> <span class="params">(<span class="keyword">float32x4_t</span> __a, <span class="keyword">float32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/*--2、饱和指令,performs a Newton-Raphson step for finding the reciprocal square root. </span></span><br><span class="line"><span class="comment">It multiplies the elements of one vector by the corresponding elements of another vector, </span></span><br><span class="line"><span class="comment">subtracts each of the results from 3, divides these results by two, and places </span></span><br><span class="line"><span class="comment">the final results into the elements of the destination vector--*/</span></span><br><span class="line"><span class="function"><span class="keyword">float32x2_t</span> <span class="title">vrsqrts_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a, <span class="keyword">float32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x4_t</span> <span class="title">vrsqrtsq_f32</span> <span class="params">(<span class="keyword">float32x4_t</span> __a, <span class="keyword">float32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/************************************************Shifts by signed variable**************/</span></span><br><span class="line"><span class="comment">/*--1、Vector shift left(饱和指令): vshl -&gt; ri = ai &amp;lt;&amp;lt; bi; (negative values shift right)</span></span><br><span class="line"><span class="comment">left shifts each element in a vector by an amount specified in the corresponding element </span></span><br><span class="line"><span class="comment">in the second input vector. The shift amount is the signed integer value of the least </span></span><br><span class="line"><span class="comment">significant byte of the element in the second input vector. The bits shifted out of each</span></span><br><span class="line"><span class="comment">element are lost.If the signed integer value is negative, it results in a right shift--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vshl_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a, <span class="keyword">int8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vshl_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vshl_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x1_t</span> <span class="title">vshl_s64</span> <span class="params">(<span class="keyword">int64x1_t</span> __a, <span class="keyword">int64x1_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vshl_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">int8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vshl_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vshl_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x1_t</span> <span class="title">vshl_u64</span> <span class="params">(<span class="keyword">uint64x1_t</span> __a, <span class="keyword">int64x1_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vshlq_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a, <span class="keyword">int8x16_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vshlq_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">int16x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vshlq_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vshlq_s64</span> <span class="params">(<span class="keyword">int64x2_t</span> __a, <span class="keyword">int64x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vshlq_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a, <span class="keyword">int8x16_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vshlq_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">int16x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vshlq_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">int32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vshlq_u64</span> <span class="params">(<span class="keyword">uint64x2_t</span> __a, <span class="keyword">int64x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/*--2、Vector saturating shift left(饱和指令): </span></span><br><span class="line"><span class="comment">vqshl -&gt; ri = ai &amp;lt;&amp;lt; bi;(negative values shift right)</span></span><br><span class="line"><span class="comment">If the shift value is positive, the operation is a left shift. Otherwise, it is a </span></span><br><span class="line"><span class="comment">truncating right shift. left shifts each element in a vector of integers and places</span></span><br><span class="line"><span class="comment">the results in the destination vector. It is similar to VSHL. </span></span><br><span class="line"><span class="comment">The difference is that the sticky QC flag is set if saturation occurs--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vqshl_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a, <span class="keyword">int8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vqshl_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vqshl_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x1_t</span> <span class="title">vqshl_s64</span> <span class="params">(<span class="keyword">int64x1_t</span> __a, <span class="keyword">int64x1_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vqshl_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">int8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vqshl_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vqshl_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x1_t</span> <span class="title">vqshl_u64</span> <span class="params">(<span class="keyword">uint64x1_t</span> __a, <span class="keyword">int64x1_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vqshlq_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a, <span class="keyword">int8x16_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vqshlq_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">int16x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vqshlq_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vqshlq_s64</span> <span class="params">(<span class="keyword">int64x2_t</span> __a, <span class="keyword">int64x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vqshlq_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a, <span class="keyword">int8x16_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vqshlq_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">int16x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vqshlq_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">int32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vqshlq_u64</span> <span class="params">(<span class="keyword">uint64x2_t</span> __a, <span class="keyword">int64x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/*--3、Vector rounding shift left(饱和指令): </span></span><br><span class="line"><span class="comment">vrshl -&gt; ri = ai &amp;lt;&amp;lt; bi;(negative values shift right)</span></span><br><span class="line"><span class="comment">If the shift value is positive, the operation is a left shift. Otherwise, it is a</span></span><br><span class="line"><span class="comment">rounding right shift. left shifts each element in a vector of integers and places</span></span><br><span class="line"><span class="comment">the results in the destination vector. It is similar to VSHL. </span></span><br><span class="line"><span class="comment">The difference is that the shifted value is then rounded.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vrshl_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a, <span class="keyword">int8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vrshl_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vrshl_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x1_t</span> <span class="title">vrshl_s64</span> <span class="params">(<span class="keyword">int64x1_t</span> __a, <span class="keyword">int64x1_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vrshl_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">int8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vrshl_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vrshl_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x1_t</span> <span class="title">vrshl_u64</span> <span class="params">(<span class="keyword">uint64x1_t</span> __a, <span class="keyword">int64x1_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vrshlq_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a, <span class="keyword">int8x16_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vrshlq_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">int16x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vrshlq_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vrshlq_s64</span> <span class="params">(<span class="keyword">int64x2_t</span> __a, <span class="keyword">int64x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vrshlq_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a, <span class="keyword">int8x16_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vrshlq_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">int16x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vrshlq_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">int32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vrshlq_u64</span> <span class="params">(<span class="keyword">uint64x2_t</span> __a, <span class="keyword">int64x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/*--4、Vector saturating rounding shift left(饱和指令):</span></span><br><span class="line"><span class="comment">vqrshl -&gt; ri = ai &amp;lt;&amp;lt; bi;(negative values shift right)</span></span><br><span class="line"><span class="comment">left shifts each element in a vector of integers and places the results in the </span></span><br><span class="line"><span class="comment">destination vector.It is similar to VSHL. The difference is that the shifted value</span></span><br><span class="line"><span class="comment">is rounded, and the sticky QC flag is set if saturation occurs.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vqrshl_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a, <span class="keyword">int8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vqrshl_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vqrshl_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x1_t</span> <span class="title">vqrshl_s64</span> <span class="params">(<span class="keyword">int64x1_t</span> __a, <span class="keyword">int64x1_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vqrshl_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">int8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vqrshl_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vqrshl_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x1_t</span> <span class="title">vqrshl_u64</span> <span class="params">(<span class="keyword">uint64x1_t</span> __a, <span class="keyword">int64x1_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vqrshlq_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a, <span class="keyword">int8x16_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vqrshlq_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">int16x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vqrshlq_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vqrshlq_s64</span> <span class="params">(<span class="keyword">int64x2_t</span> __a, <span class="keyword">int64x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vqrshlq_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a, <span class="keyword">int8x16_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vqrshlq_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">int16x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vqrshlq_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">int32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vqrshlq_u64</span> <span class="params">(<span class="keyword">uint64x2_t</span> __a, <span class="keyword">int64x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/****************************************Shifts by a constant***************************/</span></span><br><span class="line"><span class="comment">/*--1、Vector shift right by constant: vshr -&gt; ri = ai &gt;&gt; b;The results are truncated.</span></span><br><span class="line"><span class="comment">right shifts each element in a vector by an immediate value, </span></span><br><span class="line"><span class="comment">and places the results in the destination vector.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vshr_n_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vshr_n_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vshr_n_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x1_t</span> <span class="title">vshr_n_s64</span> <span class="params">(<span class="keyword">int64x1_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vshr_n_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vshr_n_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vshr_n_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x1_t</span> <span class="title">vshr_n_u64</span> <span class="params">(<span class="keyword">uint64x1_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vshrq_n_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vshrq_n_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vshrq_n_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vshrq_n_s64</span> <span class="params">(<span class="keyword">int64x2_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vshrq_n_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vshrq_n_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vshrq_n_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vshrq_n_u64</span> <span class="params">(<span class="keyword">uint64x2_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/*--2、Vector shift left by constant: vshl -&gt; ri = ai &amp;lt;&amp;lt; b;</span></span><br><span class="line"><span class="comment">left shifts each element in a vector by an immediate value, and places the results in the </span></span><br><span class="line"><span class="comment">destination vector. The bits shifted out of the left of each element are lost--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vshl_n_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vshl_n_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vshl_n_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x1_t</span> <span class="title">vshl_n_s64</span> <span class="params">(<span class="keyword">int64x1_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vshl_n_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vshl_n_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vshl_n_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x1_t</span> <span class="title">vshl_n_u64</span> <span class="params">(<span class="keyword">uint64x1_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vshlq_n_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vshlq_n_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vshlq_n_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vshlq_n_s64</span> <span class="params">(<span class="keyword">int64x2_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vshlq_n_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vshlq_n_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vshlq_n_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vshlq_n_u64</span> <span class="params">(<span class="keyword">uint64x2_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/*--3、Vector rounding shift right by constant: vrshr -&gt; ri = ai &gt;&gt; b;</span></span><br><span class="line"><span class="comment">right shifts each element in a vector by an immediate value, and places the results</span></span><br><span class="line"><span class="comment">in the destination vector. The shifted values are rounded.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vrshr_n_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vrshr_n_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vrshr_n_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x1_t</span> <span class="title">vrshr_n_s64</span> <span class="params">(<span class="keyword">int64x1_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vrshr_n_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vrshr_n_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vrshr_n_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x1_t</span> <span class="title">vrshr_n_u64</span> <span class="params">(<span class="keyword">uint64x1_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vrshrq_n_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vrshrq_n_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vrshrq_n_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vrshrq_n_s64</span> <span class="params">(<span class="keyword">int64x2_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vrshrq_n_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vrshrq_n_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vrshrq_n_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vrshrq_n_u64</span> <span class="params">(<span class="keyword">uint64x2_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/*--4、Vector shift right by constant and accumulate: vsra -&gt; ri = (ai &gt;&gt; c) + (bi &gt;&gt; c); </span></span><br><span class="line"><span class="comment">The results are truncated. right shifts each element in a vector by an immediate value, </span></span><br><span class="line"><span class="comment">and accumulates the results into the destination vector.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vsra_n_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a, <span class="keyword">int8x8_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vsra_n_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vsra_n_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x1_t</span> <span class="title">vsra_n_s64</span> <span class="params">(<span class="keyword">int64x1_t</span> __a, <span class="keyword">int64x1_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vsra_n_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">uint8x8_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vsra_n_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">uint16x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vsra_n_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">uint32x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x1_t</span> <span class="title">vsra_n_u64</span> <span class="params">(<span class="keyword">uint64x1_t</span> __a, <span class="keyword">uint64x1_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vsraq_n_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a, <span class="keyword">int8x16_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vsraq_n_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">int16x8_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vsraq_n_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int32x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vsraq_n_s64</span> <span class="params">(<span class="keyword">int64x2_t</span> __a, <span class="keyword">int64x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vsraq_n_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a, <span class="keyword">uint8x16_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vsraq_n_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">uint16x8_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vsraq_n_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">uint32x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vsraq_n_u64</span> <span class="params">(<span class="keyword">uint64x2_t</span> __a, <span class="keyword">uint64x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="comment">/*--5、Vector rounding shift right by constant and accumulate: </span></span><br><span class="line"><span class="comment">vrsra -&gt; ri = (ai &gt;&gt; c) + (bi &gt;&gt; c);</span></span><br><span class="line"><span class="comment">The results are rounded.right shifts each element in a vector by an immediate value, </span></span><br><span class="line"><span class="comment">and accumulates the rounded results into the destination vector.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vrsra_n_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a, <span class="keyword">int8x8_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vrsra_n_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vrsra_n_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x1_t</span> <span class="title">vrsra_n_s64</span> <span class="params">(<span class="keyword">int64x1_t</span> __a, <span class="keyword">int64x1_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vrsra_n_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">uint8x8_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vrsra_n_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">uint16x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vrsra_n_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">uint32x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x1_t</span> <span class="title">vrsra_n_u64</span> <span class="params">(<span class="keyword">uint64x1_t</span> __a, <span class="keyword">uint64x1_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vrsraq_n_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a, <span class="keyword">int8x16_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vrsraq_n_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">int16x8_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vrsraq_n_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int32x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vrsraq_n_s64</span> <span class="params">(<span class="keyword">int64x2_t</span> __a, <span class="keyword">int64x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vrsraq_n_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a, <span class="keyword">uint8x16_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vrsraq_n_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">uint16x8_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vrsraq_n_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">uint32x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vrsraq_n_u64</span> <span class="params">(<span class="keyword">uint64x2_t</span> __a, <span class="keyword">uint64x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="comment">/*--6、Vector saturating shift left by constant: vqshl -&gt; ri = sat(ai &amp;lt;&amp;lt; b); </span></span><br><span class="line"><span class="comment">left shifts each element in a vector of integers by an immediate value, and places the </span></span><br><span class="line"><span class="comment">results in the destination vector,and the sticky QC flag is set if saturation occurs.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vqshl_n_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vqshl_n_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vqshl_n_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x1_t</span> <span class="title">vqshl_n_s64</span> <span class="params">(<span class="keyword">int64x1_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vqshl_n_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vqshl_n_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vqshl_n_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x1_t</span> <span class="title">vqshl_n_u64</span> <span class="params">(<span class="keyword">uint64x1_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vqshlq_n_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vqshlq_n_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vqshlq_n_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vqshlq_n_s64</span> <span class="params">(<span class="keyword">int64x2_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vqshlq_n_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vqshlq_n_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vqshlq_n_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vqshlq_n_u64</span> <span class="params">(<span class="keyword">uint64x2_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/*--7、Vector signed-&gt;unsigned saturating shift left by constant: vqshlu -&gt; ri = ai &amp;lt;&amp;lt; b; </span></span><br><span class="line"><span class="comment">left shifts each element in a vector of integers by an immediate value, places the </span></span><br><span class="line"><span class="comment">results in the destination vector, the sticky QC flag is set if saturation occurs, </span></span><br><span class="line"><span class="comment">and indicates that the results are unsigned even though the operands are signed.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vqshlu_n_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vqshlu_n_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vqshlu_n_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x1_t</span> <span class="title">vqshlu_n_s64</span> <span class="params">(<span class="keyword">int64x1_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vqshluq_n_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vqshluq_n_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vqshluq_n_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vqshluq_n_s64</span> <span class="params">(<span class="keyword">int64x2_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/*--8、Vector narrowing shift right by constant: vshrn -&gt; ri = ai &gt;&gt; b;</span></span><br><span class="line"><span class="comment">The results are truncated.right shifts each element in the input vector by an </span></span><br><span class="line"><span class="comment">immediate value. It then narrows the result by storing only the least significant</span></span><br><span class="line"><span class="comment">half of each element into the destination vector.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vshrn_n_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vshrn_n_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vshrn_n_s64</span> <span class="params">(<span class="keyword">int64x2_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vshrn_n_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vshrn_n_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vshrn_n_u64</span> <span class="params">(<span class="keyword">uint64x2_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/*--9、Vector signed-&gt;unsigned narrowing saturating shift right by constant: </span></span><br><span class="line"><span class="comment">vqshrun -&gt; ri = ai &gt;&gt; b; </span></span><br><span class="line"><span class="comment">Results are truncated. right shifts each element in a quadword vector of integers by an</span></span><br><span class="line"><span class="comment">immediate value, and places the results in a doubleword vector. The results are unsigned, </span></span><br><span class="line"><span class="comment">although the operands are signed. The sticky QC flag is set if saturation occurs.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vqshrun_n_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vqshrun_n_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vqshrun_n_s64</span> <span class="params">(<span class="keyword">int64x2_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/*--10、Vector signed-&gt;unsigned rounding narrowing saturating shift right by constant: </span></span><br><span class="line"><span class="comment">vqrshrun -&gt; ri = ai &gt;&gt; b; Results are rounded. right shifts each element in a quadword </span></span><br><span class="line"><span class="comment">vector of integers by an immediate value, and places the rounded results in a doubleword </span></span><br><span class="line"><span class="comment">vector. The results are unsigned, although the operands are signed.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vqrshrun_n_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vqrshrun_n_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vqrshrun_n_s64</span> <span class="params">(<span class="keyword">int64x2_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/*--11、Vector narrowing saturating shift right by constant: vqshrn -&gt; ri = ai &gt;&gt; b; </span></span><br><span class="line"><span class="comment">Results are truncated. right shifts each element in a quadword vector of integers by an </span></span><br><span class="line"><span class="comment">immediate value, and places the results in a doubleword vector, </span></span><br><span class="line"><span class="comment">and the sticky QC flag is set if saturation occurs.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vqshrn_n_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vqshrn_n_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vqshrn_n_s64</span> <span class="params">(<span class="keyword">int64x2_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vqshrn_n_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vqshrn_n_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vqshrn_n_u64</span> <span class="params">(<span class="keyword">uint64x2_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/*--12、Vector rounding narrowing shift right by constant: vrshrn -&gt; ri = ai &gt;&gt; b; </span></span><br><span class="line"><span class="comment">The results are rounded. right shifts each element in a vector by an immediate value,</span></span><br><span class="line"><span class="comment">and places the rounded,narrowed results in the destination vector.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vrshrn_n_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vrshrn_n_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vrshrn_n_s64</span> <span class="params">(<span class="keyword">int64x2_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vrshrn_n_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vrshrn_n_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vrshrn_n_u64</span> <span class="params">(<span class="keyword">uint64x2_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/*--13、Vector rounding narrowing saturating shift right by constant:</span></span><br><span class="line"><span class="comment">vqrshrn -&gt; ri = ai &gt;&gt; b;</span></span><br><span class="line"><span class="comment">Results are rounded. right shifts each element in a quadword vector of integers by an </span></span><br><span class="line"><span class="comment">immediate value,and places the rounded,narrowed results in a doubleword vector. </span></span><br><span class="line"><span class="comment">The sticky QC flag is set if saturation occurs.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vqrshrn_n_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vqrshrn_n_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vqrshrn_n_s64</span> <span class="params">(<span class="keyword">int64x2_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vqrshrn_n_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vqrshrn_n_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vqrshrn_n_u64</span> <span class="params">(<span class="keyword">uint64x2_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/*--14、Vector widening shift left by constant: vshll -&gt; ri = ai &amp;lt;&amp;lt; b; </span></span><br><span class="line"><span class="comment">left shifts each element in a vector of integers by an immediate value, </span></span><br><span class="line"><span class="comment">and place the results in the destination vector. Bits shifted out of the left of each</span></span><br><span class="line"><span class="comment">element are lost and values are sign extended or zero extended.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vshll_n_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vshll_n_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vshll_n_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vshll_n_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vshll_n_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vshll_n_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/********************************************Shifts with insert*************************/</span></span><br><span class="line"><span class="comment">/*--1、Vector shift right and insert: vsri -&gt; ; The two most significant bits in the </span></span><br><span class="line"><span class="comment">destination vector are unchanged. right shifts each element in the second input vector </span></span><br><span class="line"><span class="comment">by an immediate value, and inserts the results in the destination vector. It does not </span></span><br><span class="line"><span class="comment">affect the highest n significant bits of the elements in the destination register.</span></span><br><span class="line"><span class="comment">Bits shifted out of the right of each element are lost.The first input vector holds</span></span><br><span class="line"><span class="comment">the elements of the destination vector before the operation is performed.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vsri_n_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a, <span class="keyword">int8x8_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vsri_n_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vsri_n_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x1_t</span> <span class="title">vsri_n_s64</span> <span class="params">(<span class="keyword">int64x1_t</span> __a, <span class="keyword">int64x1_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vsri_n_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">uint8x8_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vsri_n_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">uint16x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vsri_n_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">uint32x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x1_t</span> <span class="title">vsri_n_u64</span> <span class="params">(<span class="keyword">uint64x1_t</span> __a, <span class="keyword">uint64x1_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x8_t</span> <span class="title">vsri_n_p8</span> <span class="params">(<span class="keyword">poly8x8_t</span> __a, <span class="keyword">poly8x8_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x4_t</span> <span class="title">vsri_n_p16</span> <span class="params">(<span class="keyword">poly16x4_t</span> __a, <span class="keyword">poly16x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vsriq_n_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a, <span class="keyword">int8x16_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vsriq_n_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">int16x8_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vsriq_n_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int32x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vsriq_n_s64</span> <span class="params">(<span class="keyword">int64x2_t</span> __a, <span class="keyword">int64x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vsriq_n_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a, <span class="keyword">uint8x16_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vsriq_n_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">uint16x8_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vsriq_n_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">uint32x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vsriq_n_u64</span> <span class="params">(<span class="keyword">uint64x2_t</span> __a, <span class="keyword">uint64x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x16_t</span> <span class="title">vsriq_n_p8</span> <span class="params">(<span class="keyword">poly8x16_t</span> __a, <span class="keyword">poly8x16_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x8_t</span> <span class="title">vsriq_n_p16</span> <span class="params">(<span class="keyword">poly16x8_t</span> __a, <span class="keyword">poly16x8_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="comment">/*--2、Vector shift left and insert: vsli -&gt;; The least significant bit in each element</span></span><br><span class="line"><span class="comment">in the destination vector is unchanged. left shifts each element in the second input </span></span><br><span class="line"><span class="comment">vector by an immediate value, and inserts the results in the destination vector.</span></span><br><span class="line"><span class="comment">It does not affect the lowest n significant bits of the elements in the destination </span></span><br><span class="line"><span class="comment">register. Bits shifted out of the left of each element are lost. The first input vector</span></span><br><span class="line"><span class="comment">holds the elements of the destination vector before the operation is performed.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vsli_n_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a, <span class="keyword">int8x8_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vsli_n_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vsli_n_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x1_t</span> <span class="title">vsli_n_s64</span> <span class="params">(<span class="keyword">int64x1_t</span> __a, <span class="keyword">int64x1_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vsli_n_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">uint8x8_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vsli_n_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">uint16x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vsli_n_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">uint32x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x1_t</span> <span class="title">vsli_n_u64</span> <span class="params">(<span class="keyword">uint64x1_t</span> __a, <span class="keyword">uint64x1_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x8_t</span> <span class="title">vsli_n_p8</span> <span class="params">(<span class="keyword">poly8x8_t</span> __a, <span class="keyword">poly8x8_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x4_t</span> <span class="title">vsli_n_p16</span> <span class="params">(<span class="keyword">poly16x4_t</span> __a, <span class="keyword">poly16x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vsliq_n_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a, <span class="keyword">int8x16_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vsliq_n_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">int16x8_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vsliq_n_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int32x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vsliq_n_s64</span> <span class="params">(<span class="keyword">int64x2_t</span> __a, <span class="keyword">int64x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vsliq_n_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a, <span class="keyword">uint8x16_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vsliq_n_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">uint16x8_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vsliq_n_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">uint32x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vsliq_n_u64</span> <span class="params">(<span class="keyword">uint64x2_t</span> __a, <span class="keyword">uint64x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x16_t</span> <span class="title">vsliq_n_p8</span> <span class="params">(<span class="keyword">poly8x16_t</span> __a, <span class="keyword">poly8x16_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x8_t</span> <span class="title">vsliq_n_p16</span> <span class="params">(<span class="keyword">poly16x8_t</span> __a, <span class="keyword">poly16x8_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="comment">/*****************************************Absolute value********************************/</span></span><br><span class="line"><span class="comment">/*--1、Absolute(正常指令): vabs -&gt; ri = |ai|;</span></span><br><span class="line"><span class="comment">returns the absolute value of each element in a vector.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vabs_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a)</span></span>;<span class="comment">//_mm_abs_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vabs_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a)</span></span>;<span class="comment">//_mm_abs_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vabs_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a)</span></span>;<span class="comment">//_mm_abs_epi32</span></span><br><span class="line"><span class="function"><span class="keyword">float32x2_t</span> <span class="title">vabs_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vabsq_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a)</span></span>;<span class="comment">//_mm_abs_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vabsq_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a)</span></span>;<span class="comment">//_mm_abs_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vabsq_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a)</span></span>;<span class="comment">//_mm_abs_epi32</span></span><br><span class="line"><span class="function"><span class="keyword">float32x4_t</span> <span class="title">vabsq_f32</span> <span class="params">(<span class="keyword">float32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="comment">/*--2、Saturating absolute(饱和指令): vqabs -&gt; ri = sat(|ai|);</span></span><br><span class="line"><span class="comment">returns the absolute value of each element in a vector. If any of the results overflow,</span></span><br><span class="line"><span class="comment">they are saturated and the sticky QC flag is set.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vqabs_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vqabs_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vqabs_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vqabsq_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vqabsq_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vqabsq_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="comment">/***************************************************Negation****************************/</span></span><br><span class="line"><span class="comment">/*--1、Negate(正常指令): vneg -&gt; ri = -ai; negates each element in a vector.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vneg_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vneg_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vneg_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x2_t</span> <span class="title">vneg_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vnegq_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vnegq_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vnegq_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x4_t</span> <span class="title">vnegq_f32</span> <span class="params">(<span class="keyword">float32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="comment">/*--2、Saturating Negate: vqneg -&gt; ri = sat(-ai);</span></span><br><span class="line"><span class="comment">negates each element in a vector. If any of the results overflow, </span></span><br><span class="line"><span class="comment">they are saturated and the sticky QC flag is set.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vqneg_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vqneg_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vqneg_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vqnegq_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vqnegq_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vqnegq_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="comment">/********************************************Logical operations*************************/</span></span><br><span class="line"><span class="comment">/*--1、Bitwise not(正常指令): vmvn -&gt; ri = ~ai; </span></span><br><span class="line"><span class="comment">performs a bitwise inversion of each element from the input vector.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vmvn_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vmvn_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vmvn_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vmvn_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vmvn_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vmvn_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x8_t</span> <span class="title">vmvn_p8</span> <span class="params">(<span class="keyword">poly8x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vmvnq_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vmvnq_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vmvnq_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vmvnq_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vmvnq_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vmvnq_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x16_t</span> <span class="title">vmvnq_p8</span> <span class="params">(<span class="keyword">poly8x16_t</span> __a)</span></span>;</span><br><span class="line"><span class="comment">/*--2、Bitwise and(正常指令): vand -&gt; ri = ai &amp;amp; bi; performs a bitwise AND between </span></span><br><span class="line"><span class="comment">corresponding elements of the input vectors.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vand_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a, <span class="keyword">int8x8_t</span> __b)</span></span>;<span class="comment">//_mm_and_si128</span></span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vand_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b)</span></span>;<span class="comment">//_mm_and_si128</span></span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vand_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b)</span></span>;<span class="comment">//_mm_and_si128</span></span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vand_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">uint8x8_t</span> __b)</span></span>;<span class="comment">//_mm_and_si128</span></span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vand_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">uint16x4_t</span> __b)</span></span>;<span class="comment">//_mm_and_si128</span></span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vand_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">uint32x2_t</span> __b)</span></span>;<span class="comment">//_mm_and_si128</span></span><br><span class="line"><span class="function"><span class="keyword">int64x1_t</span> <span class="title">vand_s64</span> <span class="params">(<span class="keyword">int64x1_t</span> __a, <span class="keyword">int64x1_t</span> __b)</span></span>;<span class="comment">//_mm_and_si128</span></span><br><span class="line"><span class="function"><span class="keyword">uint64x1_t</span> <span class="title">vand_u64</span> <span class="params">(<span class="keyword">uint64x1_t</span> __a, <span class="keyword">uint64x1_t</span> __b)</span></span>;<span class="comment">//_mm_and_si128</span></span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vandq_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a, <span class="keyword">int8x16_t</span> __b)</span></span>;<span class="comment">//_mm_and_si128</span></span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vandq_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">int16x8_t</span> __b)</span></span>;<span class="comment">//_mm_and_si128</span></span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vandq_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int32x4_t</span> __b)</span></span>;<span class="comment">//_mm_and_si128</span></span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vandq_s64</span> <span class="params">(<span class="keyword">int64x2_t</span> __a, <span class="keyword">int64x2_t</span> __b)</span></span>;<span class="comment">//_mm_and_si128</span></span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vandq_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a, <span class="keyword">uint8x16_t</span> __b)</span></span>;<span class="comment">//_mm_and_si128</span></span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vandq_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">uint16x8_t</span> __b)</span></span>;<span class="comment">//_mm_and_si128</span></span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vandq_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">uint32x4_t</span> __b)</span></span>;<span class="comment">//_mm_and_si128</span></span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vandq_u64</span> <span class="params">(<span class="keyword">uint64x2_t</span> __a, <span class="keyword">uint64x2_t</span> __b)</span></span>;<span class="comment">//_mm_and_si128</span></span><br><span class="line"><span class="comment">/*--3、Bitwise or(正常指令): vorr -&gt; ri = ai | bi; performs a bitwise OR between</span></span><br><span class="line"><span class="comment">corresponding elements of the input vectors.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vorr_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a, <span class="keyword">int8x8_t</span> __b)</span></span>;<span class="comment">//_mm_or_si128</span></span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vorr_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b)</span></span>;<span class="comment">//_mm_or_si128</span></span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vorr_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b)</span></span>;<span class="comment">//_mm_or_si128</span></span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vorr_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">uint8x8_t</span> __b)</span></span>;<span class="comment">//_mm_or_si128</span></span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vorr_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">uint16x4_t</span> __b)</span></span>;<span class="comment">//_mm_or_si128</span></span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vorr_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">uint32x2_t</span> __b)</span></span>;<span class="comment">//_mm_or_si128</span></span><br><span class="line"><span class="function"><span class="keyword">int64x1_t</span> <span class="title">vorr_s64</span> <span class="params">(<span class="keyword">int64x1_t</span> __a, <span class="keyword">int64x1_t</span> __b)</span></span>;<span class="comment">//_mm_or_si128</span></span><br><span class="line"><span class="function"><span class="keyword">uint64x1_t</span> <span class="title">vorr_u64</span> <span class="params">(<span class="keyword">uint64x1_t</span> __a, <span class="keyword">uint64x1_t</span> __b)</span></span>;<span class="comment">//_mm_or_si128</span></span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vorrq_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a, <span class="keyword">int8x16_t</span> __b)</span></span>;<span class="comment">//_mm_or_si128</span></span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vorrq_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">int16x8_t</span> __b)</span></span>;<span class="comment">//_mm_or_si128</span></span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vorrq_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int32x4_t</span> __b)</span></span>;<span class="comment">//_mm_or_si128</span></span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vorrq_s64</span> <span class="params">(<span class="keyword">int64x2_t</span> __a, <span class="keyword">int64x2_t</span> __b)</span></span>;<span class="comment">//_mm_or_si128</span></span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vorrq_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a, <span class="keyword">uint8x16_t</span> __b)</span></span>;<span class="comment">//_mm_or_si128</span></span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vorrq_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">uint16x8_t</span> __b)</span></span>;<span class="comment">//_mm_or_si128</span></span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vorrq_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">uint32x4_t</span> __b)</span></span>;<span class="comment">//_mm_or_si128</span></span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vorrq_u64</span> <span class="params">(<span class="keyword">uint64x2_t</span> __a, <span class="keyword">uint64x2_t</span> __b)</span></span>;<span class="comment">//_mm_or_si128</span></span><br><span class="line"><span class="comment">/*--4、Bitwise exclusive or (EOR or XOR)(正常指令): veor -&gt; ri = ai ^ bi; </span></span><br><span class="line"><span class="comment">performs a bitwise exclusive-OR between corresponding elements of the input vectors.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">veor_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a, <span class="keyword">int8x8_t</span> __b)</span></span>;<span class="comment">//_mm_xor_si128</span></span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">veor_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b)</span></span>;<span class="comment">//_mm_xor_si128</span></span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">veor_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b)</span></span>;<span class="comment">//_mm_xor_si128</span></span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">veor_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">uint8x8_t</span> __b)</span></span>;<span class="comment">//_mm_xor_si128</span></span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">veor_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">uint16x4_t</span> __b)</span></span>;<span class="comment">//_mm_xor_si128</span></span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">veor_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">uint32x2_t</span> __b)</span></span>;<span class="comment">//_mm_xor_si128</span></span><br><span class="line"><span class="function"><span class="keyword">int64x1_t</span> <span class="title">veor_s64</span> <span class="params">(<span class="keyword">int64x1_t</span> __a, <span class="keyword">int64x1_t</span> __b)</span></span>;<span class="comment">//_mm_xor_si128</span></span><br><span class="line"><span class="function"><span class="keyword">uint64x1_t</span> <span class="title">veor_u64</span> <span class="params">(<span class="keyword">uint64x1_t</span> __a, <span class="keyword">uint64x1_t</span> __b)</span></span>;<span class="comment">//_mm_xor_si128</span></span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">veorq_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a, <span class="keyword">int8x16_t</span> __b)</span></span>;<span class="comment">//_mm_xor_si128</span></span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">veorq_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">int16x8_t</span> __b)</span></span>;<span class="comment">//_mm_xor_si128</span></span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">veorq_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int32x4_t</span> __b)</span></span>;<span class="comment">//_mm_xor_si128</span></span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">veorq_s64</span> <span class="params">(<span class="keyword">int64x2_t</span> __a, <span class="keyword">int64x2_t</span> __b)</span></span>;<span class="comment">//_mm_xor_si128</span></span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">veorq_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a, <span class="keyword">uint8x16_t</span> __b)</span></span>;<span class="comment">//_mm_xor_si128</span></span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">veorq_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">uint16x8_t</span> __b)</span></span>;<span class="comment">//_mm_xor_si128</span></span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">veorq_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">uint32x4_t</span> __b)</span></span>;<span class="comment">//_mm_xor_si128</span></span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">veorq_u64</span> <span class="params">(<span class="keyword">uint64x2_t</span> __a, <span class="keyword">uint64x2_t</span> __b)</span></span>;<span class="comment">//_mm_xor_si128</span></span><br><span class="line"><span class="comment">/*--5、Bit Clear(正常指令): vbic -&gt; ri = ai &amp;amp; ~bi;</span></span><br><span class="line"><span class="comment">VBIC (Vector Bitwise Clear) performs a bitwise logical AND complement operation between</span></span><br><span class="line"><span class="comment">values in two registers, and places the results in the destination register.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vbic_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a, <span class="keyword">int8x8_t</span> __b)</span></span>;<span class="comment">//_mm_andnot_si128</span></span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vbic_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b)</span></span>;<span class="comment">//_mm_andnot_si128</span></span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vbic_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b)</span></span>;<span class="comment">//_mm_andnot_si128</span></span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vbic_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">uint8x8_t</span> __b)</span></span>;<span class="comment">//_mm_andnot_si128</span></span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vbic_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">uint16x4_t</span> __b)</span></span>;<span class="comment">//_mm_andnot_si128</span></span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vbic_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">uint32x2_t</span> __b)</span></span>;<span class="comment">//_mm_andnot_si128</span></span><br><span class="line"><span class="function"><span class="keyword">int64x1_t</span> <span class="title">vbic_s64</span> <span class="params">(<span class="keyword">int64x1_t</span> __a, <span class="keyword">int64x1_t</span> __b)</span></span>;<span class="comment">//_mm_andnot_si128</span></span><br><span class="line"><span class="function"><span class="keyword">uint64x1_t</span> <span class="title">vbic_u64</span> <span class="params">(<span class="keyword">uint64x1_t</span> __a, <span class="keyword">uint64x1_t</span> __b)</span></span>;<span class="comment">//_mm_andnot_si128</span></span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vbicq_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a, <span class="keyword">int8x16_t</span> __b)</span></span>;<span class="comment">//_mm_andnot_si128</span></span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vbicq_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">int16x8_t</span> __b)</span></span>;<span class="comment">//_mm_andnot_si128</span></span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vbicq_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int32x4_t</span> __b)</span></span>;<span class="comment">//_mm_andnot_si128</span></span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vbicq_s64</span> <span class="params">(<span class="keyword">int64x2_t</span> __a, <span class="keyword">int64x2_t</span> __b)</span></span>;<span class="comment">//_mm_andnot_si128</span></span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vbicq_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a, <span class="keyword">uint8x16_t</span> __b)</span></span>;<span class="comment">//_mm_andnot_si128</span></span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vbicq_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">uint16x8_t</span> __b)</span></span>;<span class="comment">//_mm_andnot_si128</span></span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vbicq_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">uint32x4_t</span> __b)</span></span>;<span class="comment">//_mm_andnot_si128</span></span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vbicq_u64</span> <span class="params">(<span class="keyword">uint64x2_t</span> __a, <span class="keyword">uint64x2_t</span> __b)</span></span>;<span class="comment">//_mm_andnot_si128</span></span><br><span class="line"><span class="comment">/*--6、Bitwise OR complement(正常指令): vorn -&gt; ri = ai | (~bi); </span></span><br><span class="line"><span class="comment">performs a bitwise logical OR NOT operation </span></span><br><span class="line"><span class="comment">between values in two registers, and places the results in the destination register.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vorn_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a, <span class="keyword">int8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vorn_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vorn_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vorn_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">uint8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vorn_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">uint16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vorn_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">uint32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x1_t</span> <span class="title">vorn_s64</span> <span class="params">(<span class="keyword">int64x1_t</span> __a, <span class="keyword">int64x1_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x1_t</span> <span class="title">vorn_u64</span> <span class="params">(<span class="keyword">uint64x1_t</span> __a, <span class="keyword">uint64x1_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vornq_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a, <span class="keyword">int8x16_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vornq_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">int16x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vornq_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vornq_s64</span> <span class="params">(<span class="keyword">int64x2_t</span> __a, <span class="keyword">int64x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vornq_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a, <span class="keyword">uint8x16_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vornq_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">uint16x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vornq_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">uint32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vornq_u64</span> <span class="params">(<span class="keyword">uint64x2_t</span> __a, <span class="keyword">uint64x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/****************************************Count leading sign bits************************/</span></span><br><span class="line"><span class="comment">/*--正常指令, vcls -&gt; ; counts the number of consecutive bits, starting from the most </span></span><br><span class="line"><span class="comment">significant bit,that are the same as the most significant bit, in each element in a </span></span><br><span class="line"><span class="comment">vector, and places the count in the result vector.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vcls_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vcls_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vcls_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vclsq_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vclsq_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vclsq_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="comment">/*******************************************Count leading zeros*************************/</span></span><br><span class="line"><span class="comment">/*--正常指令, vclz -&gt; ; counts the number of consecutive zeros, starting from the most</span></span><br><span class="line"><span class="comment">significant bit, in each element in a vector, and places the count in result vector.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vclz_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vclz_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vclz_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vclz_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vclz_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vclz_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vclzq_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vclzq_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vclzq_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vclzq_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vclzq_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vclzq_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="comment">/*******************************************Count number of set bits********************/</span></span><br><span class="line"><span class="comment">/*--正常指令, vcnt -&gt; counts the number of bits that are one in each element in a vector, </span></span><br><span class="line"><span class="comment">and places the count in the result vector.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vcnt_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vcnt_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x8_t</span> <span class="title">vcnt_p8</span> <span class="params">(<span class="keyword">poly8x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vcntq_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vcntq_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x16_t</span> <span class="title">vcntq_p8</span> <span class="params">(<span class="keyword">poly8x16_t</span> __a)</span></span>;</span><br><span class="line"><span class="comment">/*****************************************Reciprocal estimate***************************/</span></span><br><span class="line"><span class="comment">/*--正常指令, vrecpe -&gt; ; finds an approximate reciprocal of each element in a vector, </span></span><br><span class="line"><span class="comment">and places it in the result vector.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">float32x2_t</span> <span class="title">vrecpe_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vrecpe_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x4_t</span> <span class="title">vrecpeq_f32</span> <span class="params">(<span class="keyword">float32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vrecpeq_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="comment">/****************************************Reciprocal square-root estimate****************/</span></span><br><span class="line"><span class="comment">/*--正常指令, vrsqrte -&gt; ; finds an approximate reciprocal square root of each element</span></span><br><span class="line"><span class="comment">in a vector, and places it in the return vector.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">float32x2_t</span> <span class="title">vrsqrte_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vrsqrte_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x4_t</span> <span class="title">vrsqrteq_f32</span> <span class="params">(<span class="keyword">float32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vrsqrteq_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="comment">/*******************************************Get lanes from a vector*********************/</span></span><br><span class="line"><span class="comment">/*--vmov -&gt; r = a[b]; returns the value from the specified lane of a vector.</span></span><br><span class="line"><span class="comment">Extract lanes from a vector and put into a register. </span></span><br><span class="line"><span class="comment">These intrinsics extract a single lane (element) from a vector.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8_t</span> <span class="title">vget_lane_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;<span class="comment">//_mm_extract_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">int16_t</span> <span class="title">vget_lane_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;<span class="comment">//_mm_extract_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">int32_t</span> <span class="title">vget_lane_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;<span class="comment">//_mm_extract_epi32</span></span><br><span class="line"><span class="function"><span class="keyword">float32_t</span> <span class="title">vget_lane_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8_t</span> <span class="title">vget_lane_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;<span class="comment">//_mm_extract_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">uint16_t</span> <span class="title">vget_lane_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;<span class="comment">//_mm_extract_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">uint32_t</span> <span class="title">vget_lane_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;<span class="comment">//_mm_extract_epi32</span></span><br><span class="line"><span class="function"><span class="keyword">poly8_t</span> <span class="title">vget_lane_p8</span> <span class="params">(<span class="keyword">poly8x8_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;<span class="comment">//_mm_extract_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">poly16_t</span> <span class="title">vget_lane_p16</span> <span class="params">(<span class="keyword">poly16x4_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;<span class="comment">//_mm_extract_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">int64_t</span> <span class="title">vget_lane_s64</span> <span class="params">(<span class="keyword">int64x1_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;<span class="comment">//_mm_extract_epi64</span></span><br><span class="line"><span class="function"><span class="keyword">uint64_t</span> <span class="title">vget_lane_u64</span> <span class="params">(<span class="keyword">uint64x1_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;<span class="comment">//_mm_extract_epi64</span></span><br><span class="line"><span class="function"><span class="keyword">int8_t</span> <span class="title">vgetq_lane_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;<span class="comment">//_mm_extract_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">int16_t</span> <span class="title">vgetq_lane_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;<span class="comment">//_mm_extract_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">int32_t</span> <span class="title">vgetq_lane_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;<span class="comment">//_mm_extract_epi32</span></span><br><span class="line"><span class="function"><span class="keyword">float32_t</span> <span class="title">vgetq_lane_f32</span> <span class="params">(<span class="keyword">float32x4_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8_t</span> <span class="title">vgetq_lane_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;<span class="comment">//_mm_extract_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">uint16_t</span> <span class="title">vgetq_lane_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;<span class="comment">//_mm_extract_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">uint32_t</span> <span class="title">vgetq_lane_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;<span class="comment">//_mm_extract_epi32</span></span><br><span class="line"><span class="function"><span class="keyword">poly8_t</span> <span class="title">vgetq_lane_p8</span> <span class="params">(<span class="keyword">poly8x16_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;<span class="comment">//_mm_extract_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">poly16_t</span> <span class="title">vgetq_lane_p16</span> <span class="params">(<span class="keyword">poly16x8_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;<span class="comment">//_mm_extract_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">int64_t</span> <span class="title">vgetq_lane_s64</span> <span class="params">(<span class="keyword">int64x2_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;<span class="comment">//_mm_extract_epi64</span></span><br><span class="line"><span class="function"><span class="keyword">uint64_t</span> <span class="title">vgetq_lane_u64</span> <span class="params">(<span class="keyword">uint64x2_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;<span class="comment">//_mm_extract_epi64</span></span><br><span class="line"><span class="comment">/*********************************************Set lanes in a vector********************/</span></span><br><span class="line"><span class="comment">/*--vmov -&gt; ; sets the value of the specified lane of a vector. It returns the vector </span></span><br><span class="line"><span class="comment">with the new value.Load a single lane of a vector from a literal. These intrinsics set </span></span><br><span class="line"><span class="comment">a single lane (element) within a vector.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vset_lane_s8</span> <span class="params">(<span class="keyword">int8_t</span> __a, <span class="keyword">int8x8_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vset_lane_s16</span> <span class="params">(<span class="keyword">int16_t</span> __a, <span class="keyword">int16x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vset_lane_s32</span> <span class="params">(<span class="keyword">int32_t</span> __a, <span class="keyword">int32x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x2_t</span> <span class="title">vset_lane_f32</span> <span class="params">(<span class="keyword">float32_t</span> __a, <span class="keyword">float32x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vset_lane_u8</span> <span class="params">(<span class="keyword">uint8_t</span> __a, <span class="keyword">uint8x8_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vset_lane_u16</span> <span class="params">(<span class="keyword">uint16_t</span> __a, <span class="keyword">uint16x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vset_lane_u32</span> <span class="params">(<span class="keyword">uint32_t</span> __a, <span class="keyword">uint32x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x8_t</span> <span class="title">vset_lane_p8</span> <span class="params">(<span class="keyword">poly8_t</span> __a, <span class="keyword">poly8x8_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x4_t</span> <span class="title">vset_lane_p16</span> <span class="params">(<span class="keyword">poly16_t</span> __a, <span class="keyword">poly16x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x1_t</span> <span class="title">vset_lane_s64</span> <span class="params">(<span class="keyword">int64_t</span> __a, <span class="keyword">int64x1_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x1_t</span> <span class="title">vset_lane_u64</span> <span class="params">(<span class="keyword">uint64_t</span> __a, <span class="keyword">uint64x1_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vsetq_lane_s8</span> <span class="params">(<span class="keyword">int8_t</span> __a, <span class="keyword">int8x16_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vsetq_lane_s16</span> <span class="params">(<span class="keyword">int16_t</span> __a, <span class="keyword">int16x8_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vsetq_lane_s32</span> <span class="params">(<span class="keyword">int32_t</span> __a, <span class="keyword">int32x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x4_t</span> <span class="title">vsetq_lane_f32</span> <span class="params">(<span class="keyword">float32_t</span> __a, <span class="keyword">float32x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vsetq_lane_u8</span> <span class="params">(<span class="keyword">uint8_t</span> __a, <span class="keyword">uint8x16_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vsetq_lane_u16</span> <span class="params">(<span class="keyword">uint16_t</span> __a, <span class="keyword">uint16x8_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vsetq_lane_u32</span> <span class="params">(<span class="keyword">uint32_t</span> __a, <span class="keyword">uint32x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x16_t</span> <span class="title">vsetq_lane_p8</span> <span class="params">(<span class="keyword">poly8_t</span> __a, <span class="keyword">poly8x16_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x8_t</span> <span class="title">vsetq_lane_p16</span> <span class="params">(<span class="keyword">poly16_t</span> __a, <span class="keyword">poly16x8_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vsetq_lane_s64</span> <span class="params">(<span class="keyword">int64_t</span> __a, <span class="keyword">int64x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vsetq_lane_u64</span> <span class="params">(<span class="keyword">uint64_t</span> __a, <span class="keyword">uint64x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="comment">/****************************************Create vector from literal bit pattern*********/</span></span><br><span class="line"><span class="comment">/*--vmov -&gt; ; creates a vector from a 64-bit pattern. </span></span><br><span class="line"><span class="comment">Initialize a vector from a literal bit pattern.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vcreate_s8</span> <span class="params">(<span class="keyword">uint64_t</span> __a)</span></span>;<span class="comment">//_mm_loadl_epi64</span></span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vcreate_s16</span> <span class="params">(<span class="keyword">uint64_t</span> __a)</span></span>;<span class="comment">//_mm_loadl_epi64</span></span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vcreate_s32</span> <span class="params">(<span class="keyword">uint64_t</span> __a)</span></span>;<span class="comment">//_mm_loadl_epi64</span></span><br><span class="line"><span class="function"><span class="keyword">int64x1_t</span> <span class="title">vcreate_s64</span> <span class="params">(<span class="keyword">uint64_t</span> __a)</span></span>;<span class="comment">//_mm_loadl_epi64</span></span><br><span class="line"><span class="function"><span class="keyword">float32x2_t</span> <span class="title">vcreate_f32</span> <span class="params">(<span class="keyword">uint64_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vcreate_u8</span> <span class="params">(<span class="keyword">uint64_t</span> __a)</span></span>;<span class="comment">//_mm_loadl_epi64</span></span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vcreate_u16</span> <span class="params">(<span class="keyword">uint64_t</span> __a)</span></span>;<span class="comment">//_mm_loadl_epi64</span></span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vcreate_u32</span> <span class="params">(<span class="keyword">uint64_t</span> __a)</span></span>;<span class="comment">//_mm_loadl_epi64</span></span><br><span class="line"><span class="function"><span class="keyword">uint64x1_t</span> <span class="title">vcreate_u64</span> <span class="params">(<span class="keyword">uint64_t</span> __a)</span></span>;<span class="comment">//_mm_loadl_epi64</span></span><br><span class="line"><span class="function"><span class="keyword">poly8x8_t</span> <span class="title">vcreate_p8</span> <span class="params">(<span class="keyword">uint64_t</span> __a)</span></span>;<span class="comment">//_mm_loadl_epi64</span></span><br><span class="line"><span class="function"><span class="keyword">poly16x4_t</span> <span class="title">vcreate_p16</span> <span class="params">(<span class="keyword">uint64_t</span> __a)</span></span>;<span class="comment">//_mm_loadl_epi64</span></span><br><span class="line"><span class="comment">/*****************************************Set all lanes to the same value***************/</span></span><br><span class="line"><span class="comment">/*--1、Load all lanes of vector to the same literal value: vdup/vmov -&gt; ri = a; </span></span><br><span class="line"><span class="comment">duplicates a scalar into every element of the destination vector. </span></span><br><span class="line"><span class="comment">Load all lanes of vector to the same literal value--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vdup_n_s8</span> <span class="params">(<span class="keyword">int8_t</span> __a)</span></span>;<span class="comment">//_mm_set1_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vdup_n_s16</span> <span class="params">(<span class="keyword">int16_t</span> __a)</span></span>;<span class="comment">//_mm_set1_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vdup_n_s32</span> <span class="params">(<span class="keyword">int32_t</span> __a)</span></span>;<span class="comment">//_mm_set1_epi32</span></span><br><span class="line"><span class="function"><span class="keyword">float32x2_t</span> <span class="title">vdup_n_f32</span> <span class="params">(<span class="keyword">float32_t</span> __a)</span></span>;<span class="comment">//_mm_set1_ps</span></span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vdup_n_u8</span> <span class="params">(<span class="keyword">uint8_t</span> __a)</span></span>;<span class="comment">//_mm_set1_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vdup_n_u16</span> <span class="params">(<span class="keyword">uint16_t</span> __a)</span></span>;<span class="comment">//_mm_set1_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vdup_n_u32</span> <span class="params">(<span class="keyword">uint32_t</span> __a)</span></span>;<span class="comment">//_mm_set1_epi32</span></span><br><span class="line"><span class="function"><span class="keyword">poly8x8_t</span> <span class="title">vdup_n_p8</span> <span class="params">(<span class="keyword">poly8_t</span> __a)</span></span>;<span class="comment">//_mm_set1_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">poly16x4_t</span> <span class="title">vdup_n_p16</span> <span class="params">(<span class="keyword">poly16_t</span> __a)</span></span>;<span class="comment">//_mm_set1_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">int64x1_t</span> <span class="title">vdup_n_s64</span> <span class="params">(<span class="keyword">int64_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x1_t</span> <span class="title">vdup_n_u64</span> <span class="params">(<span class="keyword">uint64_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vdupq_n_s8</span> <span class="params">(<span class="keyword">int8_t</span> __a)</span></span>;<span class="comment">//_mm_set1_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vdupq_n_s16</span> <span class="params">(<span class="keyword">int16_t</span> __a)</span></span>;<span class="comment">//_mm_set1_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vdupq_n_s32</span> <span class="params">(<span class="keyword">int32_t</span> __a)</span></span>;<span class="comment">//_mm_set1_epi32</span></span><br><span class="line"><span class="function"><span class="keyword">float32x4_t</span> <span class="title">vdupq_n_f32</span> <span class="params">(<span class="keyword">float32_t</span> __a)</span></span>;<span class="comment">//_mm_set1_ps</span></span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vdupq_n_u8</span> <span class="params">(<span class="keyword">uint8_t</span> __a)</span></span>;<span class="comment">//_mm_set1_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vdupq_n_u16</span> <span class="params">(<span class="keyword">uint16_t</span> __a)</span></span>;<span class="comment">//_mm_set1_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vdupq_n_u32</span> <span class="params">(<span class="keyword">uint32_t</span> __a)</span></span>;<span class="comment">//_mm_set1_epi32</span></span><br><span class="line"><span class="function"><span class="keyword">poly8x16_t</span> <span class="title">vdupq_n_p8</span> <span class="params">(<span class="keyword">poly8_t</span> __a)</span></span>;<span class="comment">//_mm_set1_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">poly16x8_t</span> <span class="title">vdupq_n_p16</span> <span class="params">(<span class="keyword">poly16_t</span> __a)</span></span>;<span class="comment">//_mm_set1_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vdupq_n_s64</span> <span class="params">(<span class="keyword">int64_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vdupq_n_u64</span> <span class="params">(<span class="keyword">uint64_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vmov_n_s8</span> <span class="params">(<span class="keyword">int8_t</span> __a)</span></span>;<span class="comment">//_mm_set1_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vmov_n_s16</span> <span class="params">(<span class="keyword">int16_t</span> __a)</span></span>;<span class="comment">//_mm_set1_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vmov_n_s32</span> <span class="params">(<span class="keyword">int32_t</span> __a)</span></span>;<span class="comment">//_mm_set1_epi32</span></span><br><span class="line"><span class="function"><span class="keyword">float32x2_t</span> <span class="title">vmov_n_f32</span> <span class="params">(<span class="keyword">float32_t</span> __a)</span></span>;<span class="comment">//_mm_set1_ps</span></span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vmov_n_u8</span> <span class="params">(<span class="keyword">uint8_t</span> __a)</span></span>;<span class="comment">//_mm_set1_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vmov_n_u16</span> <span class="params">(<span class="keyword">uint16_t</span> __a)</span></span>;<span class="comment">//_mm_set1_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vmov_n_u32</span> <span class="params">(<span class="keyword">uint32_t</span> __a)</span></span>;<span class="comment">//_mm_set1_epi32</span></span><br><span class="line"><span class="function"><span class="keyword">poly8x8_t</span> <span class="title">vmov_n_p8</span> <span class="params">(<span class="keyword">poly8_t</span> __a)</span></span>;<span class="comment">//_mm_set1_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">poly16x4_t</span> <span class="title">vmov_n_p16</span> <span class="params">(<span class="keyword">poly16_t</span> __a)</span></span>;<span class="comment">//_mm_set1_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">int64x1_t</span> <span class="title">vmov_n_s64</span> <span class="params">(<span class="keyword">int64_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x1_t</span> <span class="title">vmov_n_u64</span> <span class="params">(<span class="keyword">uint64_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vmovq_n_s8</span> <span class="params">(<span class="keyword">int8_t</span> __a)</span></span>;<span class="comment">//_mm_set1_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vmovq_n_s16</span> <span class="params">(<span class="keyword">int16_t</span> __a)</span></span>;<span class="comment">//_mm_set1_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vmovq_n_s32</span> <span class="params">(<span class="keyword">int32_t</span> __a)</span></span>;<span class="comment">//_mm_set1_epi32</span></span><br><span class="line"><span class="function"><span class="keyword">float32x4_t</span> <span class="title">vmovq_n_f32</span> <span class="params">(<span class="keyword">float32_t</span> __a)</span></span>;<span class="comment">//_mm_set1_ps</span></span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vmovq_n_u8</span> <span class="params">(<span class="keyword">uint8_t</span> __a)</span></span>;<span class="comment">//_mm_set1_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vmovq_n_u16</span> <span class="params">(<span class="keyword">uint16_t</span> __a)</span></span>;<span class="comment">//_mm_set1_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vmovq_n_u32</span> <span class="params">(<span class="keyword">uint32_t</span> __a)</span></span>;<span class="comment">//_mm_set1_epi32</span></span><br><span class="line"><span class="function"><span class="keyword">poly8x16_t</span> <span class="title">vmovq_n_p8</span> <span class="params">(<span class="keyword">poly8_t</span> __a)</span></span>;<span class="comment">//_mm_set1_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">poly16x8_t</span> <span class="title">vmovq_n_p16</span> <span class="params">(<span class="keyword">poly16_t</span> __a)</span></span>;<span class="comment">//_mm_set1_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vmovq_n_s64</span> <span class="params">(<span class="keyword">int64_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vmovq_n_u64</span> <span class="params">(<span class="keyword">uint64_t</span> __a)</span></span>;</span><br><span class="line"><span class="comment">/*--2、Load all lanes of the vector to the value of a lane of a vector: </span></span><br><span class="line"><span class="comment">vdup/vmov -&gt; ri = a[b];</span></span><br><span class="line"><span class="comment">duplicates a scalar into every element of the destination vector.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vdup_lane_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vdup_lane_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vdup_lane_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x2_t</span> <span class="title">vdup_lane_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vdup_lane_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vdup_lane_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vdup_lane_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x8_t</span> <span class="title">vdup_lane_p8</span> <span class="params">(<span class="keyword">poly8x8_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x4_t</span> <span class="title">vdup_lane_p16</span> <span class="params">(<span class="keyword">poly16x4_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x1_t</span> <span class="title">vdup_lane_s64</span> <span class="params">(<span class="keyword">int64x1_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x1_t</span> <span class="title">vdup_lane_u64</span> <span class="params">(<span class="keyword">uint64x1_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vdupq_lane_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vdupq_lane_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vdupq_lane_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x4_t</span> <span class="title">vdupq_lane_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vdupq_lane_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vdupq_lane_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vdupq_lane_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x16_t</span> <span class="title">vdupq_lane_p8</span> <span class="params">(<span class="keyword">poly8x8_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x8_t</span> <span class="title">vdupq_lane_p16</span> <span class="params">(<span class="keyword">poly16x4_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vdupq_lane_s64</span> <span class="params">(<span class="keyword">int64x1_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;<span class="comment">//_mm_unpacklo_epi64</span></span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vdupq_lane_u64</span> <span class="params">(<span class="keyword">uint64x1_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;<span class="comment">//_mm_unpacklo_epi64</span></span><br><span class="line"><span class="comment">/********************************************Combining vectors**************************/</span></span><br><span class="line"><span class="comment">/*--长指令, -&gt; r0 = a0, ..., r7 = a7, r8 = b0, ..., r15 = b7;</span></span><br><span class="line"><span class="comment">joins two 64-bit vectors into a single 128-bit vector. </span></span><br><span class="line"><span class="comment">The output vector contains twice the number of elements as each input vector. </span></span><br><span class="line"><span class="comment">The lower half of the output vector contains the elements of the first input vector.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vcombine_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a, <span class="keyword">int8x8_t</span> __b)</span></span>;<span class="comment">//_mm_unpacklo_epi64</span></span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vcombine_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b)</span></span>;<span class="comment">//_mm_unpacklo_epi64</span></span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vcombine_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b)</span></span>;<span class="comment">//_mm_unpacklo_epi64</span></span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vcombine_s64</span> <span class="params">(<span class="keyword">int64x1_t</span> __a, <span class="keyword">int64x1_t</span> __b)</span></span>;<span class="comment">//_mm_unpacklo_epi64</span></span><br><span class="line"><span class="function"><span class="keyword">float32x4_t</span> <span class="title">vcombine_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a, <span class="keyword">float32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vcombine_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">uint8x8_t</span> __b)</span></span>;<span class="comment">//_mm_unpacklo_epi64</span></span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vcombine_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">uint16x4_t</span> __b)</span></span>;<span class="comment">//_mm_unpacklo_epi64</span></span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vcombine_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">uint32x2_t</span> __b)</span></span>;<span class="comment">//_mm_unpacklo_epi64</span></span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vcombine_u64</span> <span class="params">(<span class="keyword">uint64x1_t</span> __a, <span class="keyword">uint64x1_t</span> __b)</span></span>;<span class="comment">//_mm_unpacklo_epi64</span></span><br><span class="line"><span class="function"><span class="keyword">poly8x16_t</span> <span class="title">vcombine_p8</span> <span class="params">(<span class="keyword">poly8x8_t</span> __a, <span class="keyword">poly8x8_t</span> __b)</span></span>;<span class="comment">//_mm_unpacklo_epi64</span></span><br><span class="line"><span class="function"><span class="keyword">poly16x8_t</span> <span class="title">vcombine_p16</span> <span class="params">(<span class="keyword">poly16x4_t</span> __a, <span class="keyword">poly16x4_t</span> __b)</span></span>;<span class="comment">//_mm_unpacklo_epi64</span></span><br><span class="line"><span class="comment">/***************************************Splitting vectors*******************************/</span></span><br><span class="line"><span class="comment">/*--1、窄指令, -&gt; ri = a(i+4); returns the higher half of the 128-bit input vector. The</span></span><br><span class="line"><span class="comment">output is a 64-bit vector that has half the number of elements as the input vector.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vget_high_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a)</span></span>;<span class="comment">//_mm_unpackhi_epi64</span></span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vget_high_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a)</span></span>;<span class="comment">//_mm_unpackhi_epi64</span></span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vget_high_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a)</span></span>;<span class="comment">//_mm_unpackhi_epi64</span></span><br><span class="line"><span class="function"><span class="keyword">int64x1_t</span> <span class="title">vget_high_s64</span> <span class="params">(<span class="keyword">int64x2_t</span> __a)</span></span>;<span class="comment">//_mm_unpackhi_epi64</span></span><br><span class="line"><span class="function"><span class="keyword">float32x2_t</span> <span class="title">vget_high_f32</span> <span class="params">(<span class="keyword">float32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vget_high_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a)</span></span>;<span class="comment">//_mm_unpackhi_epi64</span></span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vget_high_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a)</span></span>;<span class="comment">//_mm_unpackhi_epi64</span></span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vget_high_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a)</span></span>;<span class="comment">//_mm_unpackhi_epi64</span></span><br><span class="line"><span class="function"><span class="keyword">uint64x1_t</span> <span class="title">vget_high_u64</span> <span class="params">(<span class="keyword">uint64x2_t</span> __a)</span></span>;<span class="comment">//_mm_unpackhi_epi64</span></span><br><span class="line"><span class="function"><span class="keyword">poly8x8_t</span> <span class="title">vget_high_p8</span> <span class="params">(<span class="keyword">poly8x16_t</span> __a)</span></span>;<span class="comment">//_mm_unpackhi_epi64</span></span><br><span class="line"><span class="function"><span class="keyword">poly16x4_t</span> <span class="title">vget_high_p16</span> <span class="params">(<span class="keyword">poly16x8_t</span> __a)</span></span>;<span class="comment">//_mm_unpackhi_epi64</span></span><br><span class="line"><span class="comment">/*--2、窄指令, -&gt; ri = ai; returns the lower half of the 128-bit input vector. The</span></span><br><span class="line"><span class="comment">output is a 64-bit vector that has half the number of elements as the input vector.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vget_low_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vget_low_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vget_low_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x2_t</span> <span class="title">vget_low_f32</span> <span class="params">(<span class="keyword">float32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vget_low_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vget_low_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vget_low_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x8_t</span> <span class="title">vget_low_p8</span> <span class="params">(<span class="keyword">poly8x16_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x4_t</span> <span class="title">vget_low_p16</span> <span class="params">(<span class="keyword">poly16x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x1_t</span> <span class="title">vget_low_s64</span> <span class="params">(<span class="keyword">int64x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x1_t</span> <span class="title">vget_low_u64</span> <span class="params">(<span class="keyword">uint64x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="comment">/****************************************************Conversions************************/</span></span><br><span class="line"><span class="comment">/*--1、Convert from float: vcvt -&gt;, convert from floating-point to integer.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vcvt_s32_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vcvt_u32_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vcvtq_s32_f32</span> <span class="params">(<span class="keyword">float32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vcvtq_u32_f32</span> <span class="params">(<span class="keyword">float32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vcvt_n_s32_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vcvt_n_u32_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vcvtq_n_s32_f32</span> <span class="params">(<span class="keyword">float32x4_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vcvtq_n_u32_f32</span> <span class="params">(<span class="keyword">float32x4_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/*--2、Convert to float: vcvt -&gt;, convert from integer to floating-point.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">float32x2_t</span> <span class="title">vcvt_f32_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x2_t</span> <span class="title">vcvt_f32_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x4_t</span> <span class="title">vcvtq_f32_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x4_t</span> <span class="title">vcvtq_f32_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x2_t</span> <span class="title">vcvt_n_f32_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x2_t</span> <span class="title">vcvt_n_f32_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x4_t</span> <span class="title">vcvtq_n_f32_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x4_t</span> <span class="title">vcvtq_n_f32_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">const</span> <span class="keyword">int</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/*--3、between single-precision and double-precision numbers: vcvt -&gt;--*/</span></span><br><span class="line"><span class="function"><span class="keyword">float16x4_t</span> <span class="title">vcvt_f16_f32</span><span class="params">(<span class="keyword">float32x4_t</span> a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x4_t</span> <span class="title">vcvt_f32_f16</span><span class="params">(<span class="keyword">float16x4_t</span> a)</span></span>;</span><br><span class="line"><span class="comment">/*************************************************Move**********************************/</span></span><br><span class="line"><span class="comment">/*--1、Vector narrow integer(窄指令): vmovn -&gt; ri = ai[0...8]; copies the least </span></span><br><span class="line"><span class="comment">significant half of each element of a quadword vector into </span></span><br><span class="line"><span class="comment">the corresponding elements of a doubleword vector.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vmovn_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vmovn_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vmovn_s64</span> <span class="params">(<span class="keyword">int64x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vmovn_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vmovn_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vmovn_u64</span> <span class="params">(<span class="keyword">uint64x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="comment">/*--2、Vector long move(长指令): vmovl -&gt; sign extends or zero extends each element</span></span><br><span class="line"><span class="comment">in a doubleword vector to twice its original length,</span></span><br><span class="line"><span class="comment">and places the results in a quadword vector.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vmovl_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a)</span></span>;<span class="comment">//_mm_cvtepi8_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vmovl_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a)</span></span>;<span class="comment">//_mm_cvtepi16_epi32</span></span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vmovl_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a)</span></span>;<span class="comment">//_mm_cvtepi32_epi64</span></span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vmovl_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a)</span></span>;<span class="comment">//_mm_cvtepu8_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vmovl_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a)</span></span>;<span class="comment">//_mm_cvtepu16_epi32</span></span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vmovl_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a)</span></span>;_mm_cvtepu32_epi64</span><br><span class="line"><span class="comment">/*--3、Vector saturating narrow integer(窄指令): vqmovn -&gt; copies each element of the</span></span><br><span class="line"><span class="comment">operand vector to the corresponding element of the destination vector. </span></span><br><span class="line"><span class="comment">The result element is half the width of </span></span><br><span class="line"><span class="comment">the operand element, and values are saturated to the result width.</span></span><br><span class="line"><span class="comment">The results are the same type as the operands.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vqmovn_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a)</span></span>;<span class="comment">//_mm_packs_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vqmovn_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a)</span></span>;<span class="comment">//_mm_packs_epi32</span></span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vqmovn_s64</span> <span class="params">(<span class="keyword">int64x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vqmovn_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vqmovn_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vqmovn_u64</span> <span class="params">(<span class="keyword">uint64x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="comment">/*--4、Vector saturating narrow integer signed-&gt;unsigned(窄指令): copies each element of</span></span><br><span class="line"><span class="comment">the operand vector to the corresponding element of the destination vector.</span></span><br><span class="line"><span class="comment">The result element is half the width of the operand element,</span></span><br><span class="line"><span class="comment">and values are saturated to the result width.</span></span><br><span class="line"><span class="comment">The elements in the operand are signed and the elements in the result are unsigned.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vqmovun_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a)</span></span>;<span class="comment">//_mm_packus_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vqmovun_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a)</span></span>;<span class="comment">//_mm_packus_epi32</span></span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vqmovun_s64</span> <span class="params">(<span class="keyword">int64x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="comment">/******************************************************Table lookup*********************/</span></span><br><span class="line"><span class="comment">/*--1、Table lookup: vtbl -&gt; uses byte indexes in a control vector to look up byte </span></span><br><span class="line"><span class="comment">values in a table and generate a new vector. Indexes out of range return 0. </span></span><br><span class="line"><span class="comment">The table is in Vector1 and uses one(or two or three or four)D registers.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vtbl1_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a, <span class="keyword">int8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vtbl1_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">uint8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x8_t</span> <span class="title">vtbl1_p8</span> <span class="params">(<span class="keyword">poly8x8_t</span> __a, <span class="keyword">uint8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vtbl2_s8</span> <span class="params">(<span class="keyword">int8x8x2_t</span> __a, <span class="keyword">int8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vtbl2_u8</span> <span class="params">(<span class="keyword">uint8x8x2_t</span> __a, <span class="keyword">uint8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x8_t</span> <span class="title">vtbl2_p8</span> <span class="params">(<span class="keyword">poly8x8x2_t</span> __a, <span class="keyword">uint8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vtbl3_s8</span> <span class="params">(<span class="keyword">int8x8x3_t</span> __a, <span class="keyword">int8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vtbl3_u8</span> <span class="params">(<span class="keyword">uint8x8x3_t</span> __a, <span class="keyword">uint8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x8_t</span> <span class="title">vtbl3_p8</span> <span class="params">(<span class="keyword">poly8x8x3_t</span> __a, <span class="keyword">uint8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vtbl4_s8</span> <span class="params">(<span class="keyword">int8x8x4_t</span> __a, <span class="keyword">int8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vtbl4_u8</span> <span class="params">(<span class="keyword">uint8x8x4_t</span> __a, <span class="keyword">uint8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x8_t</span> <span class="title">vtbl4_p8</span> <span class="params">(<span class="keyword">poly8x8x4_t</span> __a, <span class="keyword">uint8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/*--2、Extended table lookup: vtbx -&gt; uses byte indexes in a control vector to look up</span></span><br><span class="line"><span class="comment">byte values in a table and generate a new vector. Indexes out of range leave the </span></span><br><span class="line"><span class="comment">destination element unchanged.The table is in Vector2 and uses one(or two or three or</span></span><br><span class="line"><span class="comment">four) D register. Vector1 contains the elements of the destination vector.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vtbx1_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a, <span class="keyword">int8x8_t</span> __b, <span class="keyword">int8x8_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vtbx1_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">uint8x8_t</span> __b, <span class="keyword">uint8x8_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x8_t</span> <span class="title">vtbx1_p8</span> <span class="params">(<span class="keyword">poly8x8_t</span> __a, <span class="keyword">poly8x8_t</span> __b, <span class="keyword">uint8x8_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vtbx2_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a, <span class="keyword">int8x8x2_t</span> __b, <span class="keyword">int8x8_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vtbx2_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">uint8x8x2_t</span> __b, <span class="keyword">uint8x8_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x8_t</span> <span class="title">vtbx2_p8</span> <span class="params">(<span class="keyword">poly8x8_t</span> __a, <span class="keyword">poly8x8x2_t</span> __b, <span class="keyword">uint8x8_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vtbx3_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a, <span class="keyword">int8x8x3_t</span> __b, <span class="keyword">int8x8_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vtbx3_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">uint8x8x3_t</span> __b, <span class="keyword">uint8x8_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x8_t</span> <span class="title">vtbx3_p8</span> <span class="params">(<span class="keyword">poly8x8_t</span> __a, <span class="keyword">poly8x8x3_t</span> __b, <span class="keyword">uint8x8_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vtbx4_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a, <span class="keyword">int8x8x4_t</span> __b, <span class="keyword">int8x8_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vtbx4_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">uint8x8x4_t</span> __b, <span class="keyword">uint8x8_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x8_t</span> <span class="title">vtbx4_p8</span> <span class="params">(<span class="keyword">poly8x8_t</span> __a, <span class="keyword">poly8x8x4_t</span> __b, <span class="keyword">uint8x8_t</span> __c)</span></span>;</span><br><span class="line"><span class="comment">/***************************************Multiply, scalar, lane**************************/</span></span><br><span class="line"><span class="comment">/*--1、Vector multiply by scalar: vmul -&gt; ri = ai * b; </span></span><br><span class="line"><span class="comment">multiplies each element in a vector by a scalar, </span></span><br><span class="line"><span class="comment">and places the results in the destination vector.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vmul_n_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vmul_n_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x2_t</span> <span class="title">vmul_n_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a, <span class="keyword">float32_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vmul_n_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">uint16_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vmul_n_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">uint32_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vmulq_n_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">int16_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vmulq_n_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int32_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x4_t</span> <span class="title">vmulq_n_f32</span> <span class="params">(<span class="keyword">float32x4_t</span> __a, <span class="keyword">float32_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vmulq_n_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">uint16_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vmulq_n_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">uint32_t</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/*--2、Vector multiply by scalar: -&gt; ri = ai * b[c]; </span></span><br><span class="line"><span class="comment">multiplies the first vector by a scalar. </span></span><br><span class="line"><span class="comment">The scalar is the element in the second vector with index c.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vmul_lane_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vmul_lane_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x2_t</span> <span class="title">vmul_lane_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a, <span class="keyword">float32x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vmul_lane_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">uint16x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vmul_lane_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">uint32x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vmulq_lane_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">int16x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vmulq_lane_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int32x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x4_t</span> <span class="title">vmulq_lane_f32</span> <span class="params">(<span class="keyword">float32x4_t</span> __a, <span class="keyword">float32x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vmulq_lane_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">uint16x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vmulq_lane_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">uint32x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="comment">/*--3、Vector long multiply with scalar: vmull -&gt;  ri = ai * b;</span></span><br><span class="line"><span class="comment">multiplies a vector by a scalar. </span></span><br><span class="line"><span class="comment">Elements in the result are wider than elements in input vector.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vmull_n_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vmull_n_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vmull_n_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">uint16_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vmull_n_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">uint32_t</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/*--4、Vector long multiply by scalar: vmull -&gt; ri = ai * b[c];</span></span><br><span class="line"><span class="comment">multiplies the first vector by a scalar. </span></span><br><span class="line"><span class="comment">The scalar is the element in the second vector with index c. </span></span><br><span class="line"><span class="comment">The elements in the result are wider than the elements in input vector.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vmull_lane_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vmull_lane_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vmull_lane_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">uint16x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vmull_lane_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">uint32x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="comment">/*--5、Vector saturating doubling long multiply with scalar: vqdmull -&gt; ri = sat(ai * b);</span></span><br><span class="line"><span class="comment">multiplies the elements in the vector by a scalar, and doubles the results. </span></span><br><span class="line"><span class="comment">If any of the results overflow, they are saturated and the sticky QC flag is set.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vqdmull_n_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vqdmull_n_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32_t</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/*--6、Vector saturating doubling long multiply by scalar: vqdmull -&gt; ri = sat(ai * b[c]);</span></span><br><span class="line"><span class="comment">multiplies the elements in the first vector by a scalar, and doubles the results. </span></span><br><span class="line"><span class="comment">The scalar has index c in the second vector. If any of the results overflow, </span></span><br><span class="line"><span class="comment">they are saturated and the sticky QC flagis set.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vqdmull_lane_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vqdmull_lane_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="comment">/*--7、Vector saturating doubling multiply high with scalar: vqdmulh -&gt; ri = sat(ai * b)</span></span><br><span class="line"><span class="comment">multiplies the elements of the vector by a scalar, and doubles the results.</span></span><br><span class="line"><span class="comment">It then returns only the high half of the results.</span></span><br><span class="line"><span class="comment">If any of the results overflow, they are saturated and the sticky QC flag is set.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vqdmulh_n_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vqdmulh_n_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vqdmulhq_n_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">int16_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vqdmulhq_n_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int32_t</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/*--8、Vector saturating doubling multiply high by scalar: </span></span><br><span class="line"><span class="comment">vqdmulh -&gt; ri = sat(ai * b[c]);</span></span><br><span class="line"><span class="comment">multiplies the elements of the first vector by a scalar, and doubles the results. It then</span></span><br><span class="line"><span class="comment">returns only the high half of the results. The scalar has index n in the second vector.</span></span><br><span class="line"><span class="comment">If any of the results overflow, they are saturated and the sticky QC flag is set.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vqdmulh_lane_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vqdmulh_lane_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vqdmulhq_lane_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">int16x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vqdmulhq_lane_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int32x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="comment">/*--9、Vector saturating rounding doubling multiply high with scalar: </span></span><br><span class="line"><span class="comment">vqqrdmulh -&gt; ri = sat(ai * b);</span></span><br><span class="line"><span class="comment">multiplies the elements of the vector by a scalar and doubles the results. </span></span><br><span class="line"><span class="comment">It then returns only the high half of the rounded results. </span></span><br><span class="line"><span class="comment">If any of the results overflow, they are saturated and the sticky QC flag is set.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vqrdmulh_n_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vqrdmulh_n_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vqrdmulhq_n_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">int16_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vqrdmulhq_n_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int32_t</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/*--10、Vector rounding saturating doubling multiply high by scalar: </span></span><br><span class="line"><span class="comment">vqrdmulh -&gt; ri = sat(ai * b[c]);</span></span><br><span class="line"><span class="comment">multiplies the elements of the first vector by a scalar and doubles the results.</span></span><br><span class="line"><span class="comment">It then returns only the high half of the rounded results.</span></span><br><span class="line"><span class="comment">The scalar has index n in the second vector. If any of the results overflow, </span></span><br><span class="line"><span class="comment">they are saturated and the sticky QC flag is set.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vqrdmulh_lane_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vqrdmulh_lane_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vqrdmulhq_lane_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">int16x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vqrdmulhq_lane_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int32x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="comment">/*--11、Vector multiply accumulate with scalar: vmla -&gt; ri = ai + bi * c;</span></span><br><span class="line"><span class="comment">multiplies each element in the second vector by a scalar, </span></span><br><span class="line"><span class="comment">and adds the results to the corresponding elements of the first vector.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vmla_n_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b, <span class="keyword">int16_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vmla_n_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b, <span class="keyword">int32_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x2_t</span> <span class="title">vmla_n_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a, <span class="keyword">float32x2_t</span> __b, <span class="keyword">float32_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vmla_n_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">uint16x4_t</span> __b, <span class="keyword">uint16_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vmla_n_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">uint32x2_t</span> __b, <span class="keyword">uint32_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vmlaq_n_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">int16x8_t</span> __b, <span class="keyword">int16_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vmlaq_n_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int32x4_t</span> __b, <span class="keyword">int32_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x4_t</span> <span class="title">vmlaq_n_f32</span> <span class="params">(<span class="keyword">float32x4_t</span> __a, <span class="keyword">float32x4_t</span> __b, <span class="keyword">float32_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vmlaq_n_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">uint16x8_t</span> __b, <span class="keyword">uint16_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vmlaq_n_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">uint32x4_t</span> __b, <span class="keyword">uint32_t</span> __c)</span></span>;</span><br><span class="line"><span class="comment">/*--12、Vector multiply accumulate by scalar: vmla -&gt; ri = ai + bi * c[d];</span></span><br><span class="line"><span class="comment">multiplies each element in the second vector by a scalar, </span></span><br><span class="line"><span class="comment">and adds the results to the corresponding elements of the first vector. </span></span><br><span class="line"><span class="comment">The scalar has index d in the third vector.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vmla_lane_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b, <span class="keyword">int16x4_t</span> __c, <span class="keyword">const</span> <span class="keyword">int</span> __d)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vmla_lane_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b, <span class="keyword">int32x2_t</span> __c, <span class="keyword">const</span> <span class="keyword">int</span> __d)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x2_t</span> <span class="title">vmla_lane_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a, <span class="keyword">float32x2_t</span> __b, <span class="keyword">float32x2_t</span> __c,</span></span></span><br><span class="line"><span class="params"><span class="function">	<span class="keyword">const</span> <span class="keyword">int</span> __d)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vmla_lane_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">uint16x4_t</span> __b, <span class="keyword">uint16x4_t</span> __c, <span class="keyword">const</span> <span class="keyword">int</span> __d)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vmla_lane_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">uint32x2_t</span> __b, <span class="keyword">uint32x2_t</span> __c, <span class="keyword">const</span> <span class="keyword">int</span> __d)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vmlaq_lane_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">int16x8_t</span> __b, <span class="keyword">int16x4_t</span> __c, <span class="keyword">const</span> <span class="keyword">int</span> __d)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vmlaq_lane_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int32x4_t</span> __b, <span class="keyword">int32x2_t</span> __c, <span class="keyword">const</span> <span class="keyword">int</span> __d)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x4_t</span> <span class="title">vmlaq_lane_f32</span> <span class="params">(<span class="keyword">float32x4_t</span> __a, <span class="keyword">float32x4_t</span> __b, <span class="keyword">float32x2_t</span> __c,</span></span></span><br><span class="line"><span class="params"><span class="function">	<span class="keyword">const</span> <span class="keyword">int</span> __d)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vmlaq_lane_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">uint16x8_t</span> __b, <span class="keyword">uint16x4_t</span> __c, <span class="keyword">const</span> <span class="keyword">int</span> __d)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vmlaq_lane_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">uint32x4_t</span> __b, <span class="keyword">uint32x2_t</span> __c, <span class="keyword">const</span> <span class="keyword">int</span> __d)</span></span>;</span><br><span class="line"><span class="comment">/*--13、Vector widening multiply accumulate with scalar: vmlal -&gt; ri = ai + bi * c;</span></span><br><span class="line"><span class="comment">multiplies each element in the second vector by a scalar, and adds the results into the </span></span><br><span class="line"><span class="comment">corresponding elements of the first vector. </span></span><br><span class="line"><span class="comment">The scalar has index n in the third vector. The elements in the result are wider.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vmlal_n_s16</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int16x4_t</span> __b, <span class="keyword">int16_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vmlal_n_s32</span> <span class="params">(<span class="keyword">int64x2_t</span> __a, <span class="keyword">int32x2_t</span> __b, <span class="keyword">int32_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vmlal_n_u16</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">uint16x4_t</span> __b, <span class="keyword">uint16_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vmlal_n_u32</span> <span class="params">(<span class="keyword">uint64x2_t</span> __a, <span class="keyword">uint32x2_t</span> __b, <span class="keyword">uint32_t</span> __c)</span></span>;</span><br><span class="line"><span class="comment">/*--14、Vector widening multiply accumulate by scalar: vmlal -&gt; ri = ai + bi * c[d];</span></span><br><span class="line"><span class="comment">multiplies each element in the second vector by a scalar, and adds the results to the </span></span><br><span class="line"><span class="comment">corresponding elements of the first vector. The scalar has index d in the third vector.</span></span><br><span class="line"><span class="comment">The elements in the result are wider.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vmlal_lane_s16</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int16x4_t</span> __b, <span class="keyword">int16x4_t</span> __c, <span class="keyword">const</span> <span class="keyword">int</span> __d)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vmlal_lane_s32</span> <span class="params">(<span class="keyword">int64x2_t</span> __a, <span class="keyword">int32x2_t</span> __b, <span class="keyword">int32x2_t</span> __c, <span class="keyword">const</span> <span class="keyword">int</span> __d)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vmlal_lane_u16</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">uint16x4_t</span> __b, <span class="keyword">uint16x4_t</span> __c, <span class="keyword">const</span> <span class="keyword">int</span> __d)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vmlal_lane_u32</span> <span class="params">(<span class="keyword">uint64x2_t</span> __a, <span class="keyword">uint32x2_t</span> __b, <span class="keyword">uint32x2_t</span> __c, <span class="keyword">const</span> <span class="keyword">int</span> __d)</span></span>;</span><br><span class="line"><span class="comment">/*--15、Vector widening saturating doubling multiply accumulate with scalar: </span></span><br><span class="line"><span class="comment">vqdmlal -&gt; ri = sat(ai + bi * c);</span></span><br><span class="line"><span class="comment">multiplies the elements in the second vector by a scalar, and doubles the results. </span></span><br><span class="line"><span class="comment">It then adds the results to the elements in the first vector.</span></span><br><span class="line"><span class="comment">If any of the results overflow, they are saturated and the sticky QC flag is set.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vqdmlal_n_s16</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int16x4_t</span> __b, <span class="keyword">int16_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vqdmlal_n_s32</span> <span class="params">(<span class="keyword">int64x2_t</span> __a, <span class="keyword">int32x2_t</span> __b, <span class="keyword">int32_t</span> __c)</span></span>;</span><br><span class="line"><span class="comment">/*--16、Vector widening saturating doubling multiply accumulate by scalar: </span></span><br><span class="line"><span class="comment">vqdmlal -&gt; ri = sat(ai + bi * c[d])</span></span><br><span class="line"><span class="comment">multiplies each element in the second vector by a scalar, doubles the results and adds </span></span><br><span class="line"><span class="comment">them to the corresponding elements of the first vector. The scalar has index d in the </span></span><br><span class="line"><span class="comment">third vector. If any of the results overflow,</span></span><br><span class="line"><span class="comment">they are saturated and the sticky QC flag is set.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vqdmlal_lane_s16</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int16x4_t</span> __b, <span class="keyword">int16x4_t</span> __c, <span class="keyword">const</span> <span class="keyword">int</span> __d)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vqdmlal_lane_s32</span> <span class="params">(<span class="keyword">int64x2_t</span> __a, <span class="keyword">int32x2_t</span> __b, <span class="keyword">int32x2_t</span> __c, <span class="keyword">const</span> <span class="keyword">int</span> __d)</span></span>;</span><br><span class="line"><span class="comment">/*--17、Vector multiply subtract with scalar: vmls -&gt; ri = ai - bi * c;</span></span><br><span class="line"><span class="comment">multiplies each element in a vector by a scalar, subtracts the results from the </span></span><br><span class="line"><span class="comment">corresponding elements of the destination vector, </span></span><br><span class="line"><span class="comment">and places the final results in the destination vector.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vmls_n_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b, <span class="keyword">int16_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vmls_n_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b, <span class="keyword">int32_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x2_t</span> <span class="title">vmls_n_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a, <span class="keyword">float32x2_t</span> __b, <span class="keyword">float32_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vmls_n_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">uint16x4_t</span> __b, <span class="keyword">uint16_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vmls_n_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">uint32x2_t</span> __b, <span class="keyword">uint32_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vmlsq_n_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">int16x8_t</span> __b, <span class="keyword">int16_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vmlsq_n_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int32x4_t</span> __b, <span class="keyword">int32_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x4_t</span> <span class="title">vmlsq_n_f32</span> <span class="params">(<span class="keyword">float32x4_t</span> __a, <span class="keyword">float32x4_t</span> __b, <span class="keyword">float32_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vmlsq_n_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">uint16x8_t</span> __b, <span class="keyword">uint16_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vmlsq_n_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">uint32x4_t</span> __b, <span class="keyword">uint32_t</span> __c)</span></span>;</span><br><span class="line"><span class="comment">/*--18、Vector multiply subtract by scalar: vmls -&gt; ri = ai - bi * c[d];</span></span><br><span class="line"><span class="comment">multiplies each element in the second vector by a scalar, and subtracts them from the</span></span><br><span class="line"><span class="comment">corresponding elements of the first vector.</span></span><br><span class="line"><span class="comment">The scalar has index d in the third vector.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vmls_lane_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b, <span class="keyword">int16x4_t</span> __c, <span class="keyword">const</span> <span class="keyword">int</span> __d)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vmls_lane_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b, <span class="keyword">int32x2_t</span> __c, <span class="keyword">const</span> <span class="keyword">int</span> __d)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x2_t</span> <span class="title">vmls_lane_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a, <span class="keyword">float32x2_t</span> __b, <span class="keyword">float32x2_t</span> __c,</span></span></span><br><span class="line"><span class="params"><span class="function">	<span class="keyword">const</span> <span class="keyword">int</span> __d)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vmls_lane_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">uint16x4_t</span> __b, <span class="keyword">uint16x4_t</span> __c, <span class="keyword">const</span> <span class="keyword">int</span> __d)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vmls_lane_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">uint32x2_t</span> __b, <span class="keyword">uint32x2_t</span> __c, <span class="keyword">const</span> <span class="keyword">int</span> __d)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vmlsq_lane_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">int16x8_t</span> __b, <span class="keyword">int16x4_t</span> __c, <span class="keyword">const</span> <span class="keyword">int</span> __d)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vmlsq_lane_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int32x4_t</span> __b, <span class="keyword">int32x2_t</span> __c, <span class="keyword">const</span> <span class="keyword">int</span> __d)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x4_t</span> <span class="title">vmlsq_lane_f32</span> <span class="params">(<span class="keyword">float32x4_t</span> __a, <span class="keyword">float32x4_t</span> __b, <span class="keyword">float32x2_t</span> __c,</span></span></span><br><span class="line"><span class="params"><span class="function">	<span class="keyword">const</span> <span class="keyword">int</span> __d)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vmlsq_lane_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">uint16x8_t</span> __b, <span class="keyword">uint16x4_t</span> __c, <span class="keyword">const</span> <span class="keyword">int</span> __d)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vmlsq_lane_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">uint32x4_t</span> __b, <span class="keyword">uint32x2_t</span> __c, <span class="keyword">const</span> <span class="keyword">int</span> __d)</span></span>;</span><br><span class="line"><span class="comment">/*--19、Vector widening multiply subtract with scalar: vmlsl -&gt; ri = ai - bi * c;</span></span><br><span class="line"><span class="comment">multiplies the elements in the second vector by a scalar, then subtracts the results from</span></span><br><span class="line"><span class="comment">the elements in the first vector. The elements of the result are wider.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vmlsl_n_s16</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int16x4_t</span> __b, <span class="keyword">int16_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vmlsl_n_s32</span> <span class="params">(<span class="keyword">int64x2_t</span> __a, <span class="keyword">int32x2_t</span> __b, <span class="keyword">int32_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vmlsl_n_u16</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">uint16x4_t</span> __b, <span class="keyword">uint16_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vmlsl_n_u32</span> <span class="params">(<span class="keyword">uint64x2_t</span> __a, <span class="keyword">uint32x2_t</span> __b, <span class="keyword">uint32_t</span> __c)</span></span>;</span><br><span class="line"><span class="comment">/*--20、Vector widening multiply subtract by scalar: vmlsl -&gt; ri = ai - bi * c[d];</span></span><br><span class="line"><span class="comment">multiplies each element in the second vector by a scalar, </span></span><br><span class="line"><span class="comment">and subtracts them from the corresponding elements of the first vector. </span></span><br><span class="line"><span class="comment">The scalar has index d in the third vector. The elements in the result are wider.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vmlsl_lane_s16</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int16x4_t</span> __b, <span class="keyword">int16x4_t</span> __c, <span class="keyword">const</span> <span class="keyword">int</span> __d)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vmlsl_lane_s32</span> <span class="params">(<span class="keyword">int64x2_t</span> __a, <span class="keyword">int32x2_t</span> __b, <span class="keyword">int32x2_t</span> __c, <span class="keyword">const</span> <span class="keyword">int</span> __d)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vmlsl_lane_u16</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">uint16x4_t</span> __b, <span class="keyword">uint16x4_t</span> __c, <span class="keyword">const</span> <span class="keyword">int</span> __d)</span></span></span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vmlsl_lane_u32</span> <span class="params">(<span class="keyword">uint64x2_t</span> __a, <span class="keyword">uint32x2_t</span> __b, <span class="keyword">uint32x2_t</span> __c, <span class="keyword">const</span> <span class="keyword">int</span> __d)</span></span>;</span><br><span class="line"><span class="comment">/*--21、Vector widening saturating doubling multiply subtract with scalar: </span></span><br><span class="line"><span class="comment">vqdmlsl -&gt; ri = sat(ai - bi * c);</span></span><br><span class="line"><span class="comment">multiplies the elements of the second vector with a scalar and doubles the results. </span></span><br><span class="line"><span class="comment">It then subtracts the results from the elements in the first vector.</span></span><br><span class="line"><span class="comment">If any of the results overflow, they are saturated and the sticky QC flag is set.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vqdmlsl_n_s16</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int16x4_t</span> __b, <span class="keyword">int16_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vqdmlsl_n_s32</span> <span class="params">(<span class="keyword">int64x2_t</span> __a, <span class="keyword">int32x2_t</span> __b, <span class="keyword">int32_t</span> __c)</span></span>;</span><br><span class="line"><span class="comment">/*--22、Vector widening saturating doubling multiply subtract by scalar:</span></span><br><span class="line"><span class="comment">vqdmlsl -&gt; ri = sat(ai - bi * c[[d]);</span></span><br><span class="line"><span class="comment">multiplies each element in the second vector by a scalar, doubles the results and subtracts</span></span><br><span class="line"><span class="comment">them from the corresponding elements of the first vector. The scalar has index n in the </span></span><br><span class="line"><span class="comment">third vector.If any of the results overflow, </span></span><br><span class="line"><span class="comment">they are saturated and the sticky QC flag is set.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vqdmlsl_lane_s16</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int16x4_t</span> __b, <span class="keyword">int16x4_t</span> __c, <span class="keyword">const</span> <span class="keyword">int</span> __d)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vqdmlsl_lane_s32</span> <span class="params">(<span class="keyword">int64x2_t</span> __a, <span class="keyword">int32x2_t</span> __b, <span class="keyword">int32x2_t</span> __c, <span class="keyword">const</span> <span class="keyword">int</span> __d)</span></span>;</span><br><span class="line"><span class="comment">/*****************************************************Vector extract********************/</span></span><br><span class="line"><span class="comment">/*--Vector extract: vext -&gt; extracts n elements from the lower end of the second operand</span></span><br><span class="line"><span class="comment">vector and the remaining elements from the higher end of the first, and combines them to</span></span><br><span class="line"><span class="comment">form the result vector. The elements from the second operand are placed in the most </span></span><br><span class="line"><span class="comment">significant part of the result vector.The elements from the first operand are placed in</span></span><br><span class="line"><span class="comment">the least significant part of the result vector.This intrinsic cycles the elements</span></span><br><span class="line"><span class="comment">through the lanes if the two input vectors are the same.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vext_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a, <span class="keyword">int8x8_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vext_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vext_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x1_t</span> <span class="title">vext_s64</span> <span class="params">(<span class="keyword">int64x1_t</span> __a, <span class="keyword">int64x1_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x2_t</span> <span class="title">vext_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a, <span class="keyword">float32x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vext_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">uint8x8_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vext_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">uint16x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vext_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">uint32x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x1_t</span> <span class="title">vext_u64</span> <span class="params">(<span class="keyword">uint64x1_t</span> __a, <span class="keyword">uint64x1_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x8_t</span> <span class="title">vext_p8</span> <span class="params">(<span class="keyword">poly8x8_t</span> __a, <span class="keyword">poly8x8_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x4_t</span> <span class="title">vext_p16</span> <span class="params">(<span class="keyword">poly16x4_t</span> __a, <span class="keyword">poly16x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vextq_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a, <span class="keyword">int8x16_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;<span class="comment">//_mm_alignr_epi8 </span></span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vextq_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">int16x8_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;<span class="comment">//_mm_alignr_epi8 </span></span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vextq_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int32x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;<span class="comment">//_mm_alignr_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vextq_s64</span> <span class="params">(<span class="keyword">int64x2_t</span> __a, <span class="keyword">int64x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;<span class="comment">//_mm_alignr_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">float32x4_t</span> <span class="title">vextq_f32</span> <span class="params">(<span class="keyword">float32x4_t</span> __a, <span class="keyword">float32x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;<span class="comment">//_mm_alignr_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vextq_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a, <span class="keyword">uint8x16_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;<span class="comment">//_mm_alignr_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vextq_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">uint16x8_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;<span class="comment">//_mm_alignr_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vextq_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">uint32x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;<span class="comment">//_mm_alignr_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vextq_u64</span> <span class="params">(<span class="keyword">uint64x2_t</span> __a, <span class="keyword">uint64x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;<span class="comment">//_mm_alignr_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">poly8x16_t</span> <span class="title">vextq_p8</span> <span class="params">(<span class="keyword">poly8x16_t</span> __a, <span class="keyword">poly8x16_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;<span class="comment">//_mm_alignr_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">poly16x8_t</span> <span class="title">vextq_p16</span> <span class="params">(<span class="keyword">poly16x8_t</span> __a, <span class="keyword">poly16x8_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;<span class="comment">//_mm_alignr_epi8</span></span><br><span class="line"><span class="comment">/****************************************************Reverse elements*******************/</span></span><br><span class="line"><span class="comment">/*--1、Reverse vector elements (swap endianness): vrev64 -&gt; reverses the order of 8-bit, </span></span><br><span class="line"><span class="comment">16-bit, or 32-bit elements within each doubleword of the vector, </span></span><br><span class="line"><span class="comment">and places the result in the corresponding destination vector.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vrev64_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vrev64_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vrev64_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x2_t</span> <span class="title">vrev64_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a)</span></span>;<span class="comment">//_mm_shuffle_ps</span></span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vrev64_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vrev64_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vrev64_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x8_t</span> <span class="title">vrev64_p8</span> <span class="params">(<span class="keyword">poly8x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x4_t</span> <span class="title">vrev64_p16</span> <span class="params">(<span class="keyword">poly16x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vrev64q_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vrev64q_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vrev64q_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x4_t</span> <span class="title">vrev64q_f32</span> <span class="params">(<span class="keyword">float32x4_t</span> __a)</span></span>;<span class="comment">//_mm_shuffle_ps</span></span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vrev64q_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vrev64q_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vrev64q_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x16_t</span> <span class="title">vrev64q_p8</span> <span class="params">(<span class="keyword">poly8x16_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x8_t</span> <span class="title">vrev64q_p16</span> <span class="params">(<span class="keyword">poly16x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="comment">/*--2、Reverse vector elements (swap endianness): vrev32 -&gt; reverses the order of 8-bit </span></span><br><span class="line"><span class="comment">or 16-bit elements within each word of the vector, </span></span><br><span class="line"><span class="comment">and places the result in the corresponding destination vector.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vrev32_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vrev32_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vrev32_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vrev32_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x8_t</span> <span class="title">vrev32_p8</span> <span class="params">(<span class="keyword">poly8x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x4_t</span> <span class="title">vrev32_p16</span> <span class="params">(<span class="keyword">poly16x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vrev32q_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vrev32q_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vrev32q_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vrev32q_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x16_t</span> <span class="title">vrev32q_p8</span> <span class="params">(<span class="keyword">poly8x16_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x8_t</span> <span class="title">vrev32q_p16</span> <span class="params">(<span class="keyword">poly16x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="comment">/*--3、Reverse vector elements (swap endianness): vrev16 -&gt; reverses the order </span></span><br><span class="line"><span class="comment">of 8-bit elements within each halfword of the vector, </span></span><br><span class="line"><span class="comment">and places the result in the corresponding destination vector.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vrev16_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vrev16_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x8_t</span> <span class="title">vrev16_p8</span> <span class="params">(<span class="keyword">poly8x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vrev16q_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vrev16q_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x16_t</span> <span class="title">vrev16q_p8</span> <span class="params">(<span class="keyword">poly8x16_t</span> __a)</span></span>;</span><br><span class="line"><span class="comment">/**********************************************************Bitwise Select***************/</span></span><br><span class="line"><span class="comment">/*--Bitwise Select: vbsl -&gt; selects each bit for the destination from the first operand </span></span><br><span class="line"><span class="comment">if the corresponding bit of the destination is 1,          ri = ai != 0 ? bi : ci</span></span><br><span class="line"><span class="comment">or from the second operand if the corresponding bit of the destination is 0.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vbsl_s8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">int8x8_t</span> __b, <span class="keyword">int8x8_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vbsl_s16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b, <span class="keyword">int16x4_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vbsl_s32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b, <span class="keyword">int32x2_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x1_t</span> <span class="title">vbsl_s64</span> <span class="params">(<span class="keyword">uint64x1_t</span> __a, <span class="keyword">int64x1_t</span> __b, <span class="keyword">int64x1_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x2_t</span> <span class="title">vbsl_f32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">float32x2_t</span> __b, <span class="keyword">float32x2_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vbsl_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">uint8x8_t</span> __b, <span class="keyword">uint8x8_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vbsl_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">uint16x4_t</span> __b, <span class="keyword">uint16x4_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vbsl_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">uint32x2_t</span> __b, <span class="keyword">uint32x2_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x1_t</span> <span class="title">vbsl_u64</span> <span class="params">(<span class="keyword">uint64x1_t</span> __a, <span class="keyword">uint64x1_t</span> __b, <span class="keyword">uint64x1_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x8_t</span> <span class="title">vbsl_p8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">poly8x8_t</span> __b, <span class="keyword">poly8x8_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x4_t</span> <span class="title">vbsl_p16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">poly16x4_t</span> __b, <span class="keyword">poly16x4_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vbslq_s8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a, <span class="keyword">int8x16_t</span> __b, <span class="keyword">int8x16_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vbslq_s16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">int16x8_t</span> __b, <span class="keyword">int16x8_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vbslq_s32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">int32x4_t</span> __b, <span class="keyword">int32x4_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vbslq_s64</span> <span class="params">(<span class="keyword">uint64x2_t</span> __a, <span class="keyword">int64x2_t</span> __b, <span class="keyword">int64x2_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x4_t</span> <span class="title">vbslq_f32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">float32x4_t</span> __b, <span class="keyword">float32x4_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vbslq_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a, <span class="keyword">uint8x16_t</span> __b, <span class="keyword">uint8x16_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vbslq_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">uint16x8_t</span> __b, <span class="keyword">uint16x8_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vbslq_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">uint32x4_t</span> __b, <span class="keyword">uint32x4_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vbslq_u64</span> <span class="params">(<span class="keyword">uint64x2_t</span> __a, <span class="keyword">uint64x2_t</span> __b, <span class="keyword">uint64x2_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x16_t</span> <span class="title">vbslq_p8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a, <span class="keyword">poly8x16_t</span> __b, <span class="keyword">poly8x16_t</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x8_t</span> <span class="title">vbslq_p16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">poly16x8_t</span> __b, <span class="keyword">poly16x8_t</span> __c)</span></span>;</span><br><span class="line"><span class="comment">/************************************Transposition operations***************************/</span></span><br><span class="line"><span class="comment">/*--1、Transpose elements: vtrn -&gt; treats the elements of its input vectors as elements</span></span><br><span class="line"><span class="comment">of 2 x 2 matrices, and transposes the matrices. Essentially, it exchanges the elements </span></span><br><span class="line"><span class="comment">with odd indices from Vector1 with the elements with even indices from Vector2.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8x2_t</span> <span class="title">vtrn_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a, <span class="keyword">int8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4x2_t</span> <span class="title">vtrn_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8x2_t</span> <span class="title">vtrn_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">uint8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4x2_t</span> <span class="title">vtrn_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">uint16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x8x2_t</span> <span class="title">vtrn_p8</span> <span class="params">(<span class="keyword">poly8x8_t</span> __a, <span class="keyword">poly8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x4x2_t</span> <span class="title">vtrn_p16</span> <span class="params">(<span class="keyword">poly16x4_t</span> __a, <span class="keyword">poly16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2x2_t</span> <span class="title">vtrn_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b)</span></span></span><br><span class="line"><span class="function"><span class="keyword">float32x2x2_t</span> <span class="title">vtrn_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a, <span class="keyword">float32x2_t</span> __b)</span></span></span><br><span class="line"><span class="function"><span class="keyword">uint32x2x2_t</span> <span class="title">vtrn_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">uint32x2_t</span> __b)</span></span></span><br><span class="line"><span class="function"><span class="keyword">int8x16x2_t</span> <span class="title">vtrnq_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a, <span class="keyword">int8x16_t</span> __b)</span></span></span><br><span class="line"><span class="function"><span class="keyword">int16x8x2_t</span> <span class="title">vtrnq_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">int16x8_t</span> __b)</span></span></span><br><span class="line"><span class="function"><span class="keyword">int32x4x2_t</span> <span class="title">vtrnq_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int32x4_t</span> __b)</span></span></span><br><span class="line"><span class="function"><span class="keyword">float32x4x2_t</span> <span class="title">vtrnq_f32</span> <span class="params">(<span class="keyword">float32x4_t</span> __a, <span class="keyword">float32x4_t</span> __b)</span></span></span><br><span class="line"><span class="function"><span class="keyword">uint8x16x2_t</span> <span class="title">vtrnq_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a, <span class="keyword">uint8x16_t</span> __b)</span></span></span><br><span class="line"><span class="function"><span class="keyword">uint16x8x2_t</span> <span class="title">vtrnq_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">uint16x8_t</span> __b)</span></span></span><br><span class="line"><span class="function"><span class="keyword">uint32x4x2_t</span> <span class="title">vtrnq_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">uint32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x16x2_t</span> <span class="title">vtrnq_p8</span> <span class="params">(<span class="keyword">poly8x16_t</span> __a, <span class="keyword">poly8x16_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x8x2_t</span> <span class="title">vtrnq_p16</span> <span class="params">(<span class="keyword">poly16x8_t</span> __a, <span class="keyword">poly16x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/*--2、Interleave elements(Zip elements): </span></span><br><span class="line"><span class="comment">vzip -&gt;  (Vector Zip) interleaves the elements of two vectors.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8x2_t</span> <span class="title">vzip_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a, <span class="keyword">int8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4x2_t</span> <span class="title">vzip_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8x2_t</span> <span class="title">vzip_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">uint8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4x2_t</span> <span class="title">vzip_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">uint16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x8x2_t</span> <span class="title">vzip_p8</span> <span class="params">(<span class="keyword">poly8x8_t</span> __a, <span class="keyword">poly8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x4x2_t</span> <span class="title">vzip_p16</span> <span class="params">(<span class="keyword">poly16x4_t</span> __a, <span class="keyword">poly16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2x2_t</span> <span class="title">vzip_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x2x2_t</span> <span class="title">vzip_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a, <span class="keyword">float32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2x2_t</span> <span class="title">vzip_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">uint32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x16x2_t</span> <span class="title">vzipq_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a, <span class="keyword">int8x16_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8x2_t</span> <span class="title">vzipq_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">int16x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4x2_t</span> <span class="title">vzipq_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x4x2_t</span> <span class="title">vzipq_f32</span> <span class="params">(<span class="keyword">float32x4_t</span> __a, <span class="keyword">float32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16x2_t</span> <span class="title">vzipq_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a, <span class="keyword">uint8x16_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8x2_t</span> <span class="title">vzipq_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">uint16x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4x2_t</span> <span class="title">vzipq_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">uint32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x16x2_t</span> <span class="title">vzipq_p8</span> <span class="params">(<span class="keyword">poly8x16_t</span> __a, <span class="keyword">poly8x16_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x8x2_t</span> <span class="title">vzipq_p16</span> <span class="params">(<span class="keyword">poly16x8_t</span> __a, <span class="keyword">poly16x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/*--3、De-Interleave elements(Unzip elements): </span></span><br><span class="line"><span class="comment">vuzp -&gt; (Vector Unzip) de-interleaves the elements of two vectors.</span></span><br><span class="line"><span class="comment">De-interleaving is the inverse process of interleaving.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8x2_t</span> <span class="title">vuzp_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a, <span class="keyword">int8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4x2_t</span> <span class="title">vuzp_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a, <span class="keyword">int16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2x2_t</span> <span class="title">vuzp_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a, <span class="keyword">int32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x2x2_t</span> <span class="title">vuzp_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a, <span class="keyword">float32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8x2_t</span> <span class="title">vuzp_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a, <span class="keyword">uint8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4x2_t</span> <span class="title">vuzp_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a, <span class="keyword">uint16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2x2_t</span> <span class="title">vuzp_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a, <span class="keyword">uint32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x8x2_t</span> <span class="title">vuzp_p8</span> <span class="params">(<span class="keyword">poly8x8_t</span> __a, <span class="keyword">poly8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x4x2_t</span> <span class="title">vuzp_p16</span> <span class="params">(<span class="keyword">poly16x4_t</span> __a, <span class="keyword">poly16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x16x2_t</span> <span class="title">vuzpq_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a, <span class="keyword">int8x16_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8x2_t</span> <span class="title">vuzpq_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a, <span class="keyword">int16x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4x2_t</span> <span class="title">vuzpq_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a, <span class="keyword">int32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x4x2_t</span> <span class="title">vuzpq_f32</span> <span class="params">(<span class="keyword">float32x4_t</span> __a, <span class="keyword">float32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16x2_t</span> <span class="title">vuzpq_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a, <span class="keyword">uint8x16_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8x2_t</span> <span class="title">vuzpq_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a, <span class="keyword">uint16x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4x2_t</span> <span class="title">vuzpq_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a, <span class="keyword">uint32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x16x2_t</span> <span class="title">vuzpq_p8</span> <span class="params">(<span class="keyword">poly8x16_t</span> __a, <span class="keyword">poly8x16_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x8x2_t</span> <span class="title">vuzpq_p16</span> <span class="params">(<span class="keyword">poly16x8_t</span> __a, <span class="keyword">poly16x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/*********************************************************Load**************************/</span></span><br><span class="line"><span class="comment">/*--1、Load a single vector from memory: vld1 -&gt; loads a vector from memory.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vld1_s8</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int8_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vld1_s16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int16_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vld1_s32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int32_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x1_t</span> <span class="title">vld1_s64</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int64_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x2_t</span> <span class="title">vld1_f32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">float32_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vld1_u8</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint8_t</span> * __a)</span></span>;<span class="comment">//_mm_loadl_epi64</span></span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vld1_u16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint16_t</span> * __a)</span></span>;<span class="comment">//_mm_loadl_epi64</span></span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vld1_u32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint32_t</span> * __a)</span></span>;<span class="comment">//_mm_loadl_epi64</span></span><br><span class="line"><span class="function"><span class="keyword">uint64x1_t</span> <span class="title">vld1_u64</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint64_t</span> * __a)</span></span>;<span class="comment">//_mm_loadl_epi64</span></span><br><span class="line"><span class="function"><span class="keyword">poly8x8_t</span> <span class="title">vld1_p8</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">poly8_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x4_t</span> <span class="title">vld1_p16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">poly16_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vld1q_s8</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int8_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vld1q_s16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int16_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vld1q_s32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int32_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vld1q_s64</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int64_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x4_t</span> <span class="title">vld1q_f32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">float32_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vld1q_u8</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint8_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vld1q_u16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint16_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vld1q_u32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint32_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vld1q_u64</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint64_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x16_t</span> <span class="title">vld1q_p8</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">poly8_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x8_t</span> <span class="title">vld1q_p16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">poly16_t</span> * __a)</span></span>;</span><br><span class="line"><span class="comment">/*--2、Load a single lane from memory: vld1 -&gt; loads one element of the input vector </span></span><br><span class="line"><span class="comment">from memory and returns this in the result vector. Elements of the vector that are not</span></span><br><span class="line"><span class="comment">loaded are returned in the result vector unaltered. </span></span><br><span class="line"><span class="comment">c is the index of the element to load.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vld1_lane_s8</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int8_t</span> * __a, <span class="keyword">int8x8_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;<span class="comment">//_mm_insert_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vld1_lane_s16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int16_t</span> * __a, <span class="keyword">int16x4_t</span> __b,</span></span></span><br><span class="line"><span class="params"><span class="function">	<span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;<span class="comment">//_mm_insert_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vld1_lane_s32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int32_t</span> * __a, <span class="keyword">int32x2_t</span> __b, </span></span></span><br><span class="line"><span class="params"><span class="function">	<span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;<span class="comment">//_mm_insert_epi32</span></span><br><span class="line"><span class="function"><span class="keyword">float32x2_t</span> <span class="title">vld1_lane_f32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">float32_t</span> * __a, <span class="keyword">float32x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vld1_lane_u8</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint8_t</span> * __a, <span class="keyword">uint8x8_t</span> __b, </span></span></span><br><span class="line"><span class="params"><span class="function">	<span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;<span class="comment">//_mm_insert_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vld1_lane_u16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint16_t</span> * __a, <span class="keyword">uint16x4_t</span> __b, </span></span></span><br><span class="line"><span class="params"><span class="function">	<span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;<span class="comment">//_mm_insert_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vld1_lane_u32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint32_t</span> * __a, <span class="keyword">uint32x2_t</span> __b, </span></span></span><br><span class="line"><span class="params"><span class="function">	<span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;<span class="comment">//_mm_insert_epi32</span></span><br><span class="line"><span class="function"><span class="keyword">poly8x8_t</span> <span class="title">vld1_lane_p8</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">poly8_t</span> * __a, <span class="keyword">poly8x8_t</span> __b, </span></span></span><br><span class="line"><span class="params"><span class="function">	<span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;<span class="comment">//_mm_insert_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">poly16x4_t</span> <span class="title">vld1_lane_p16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">poly16_t</span> * __a, <span class="keyword">poly16x4_t</span> __b, </span></span></span><br><span class="line"><span class="params"><span class="function">	<span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;<span class="comment">//_mm_insert_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">int64x1_t</span> <span class="title">vld1_lane_s64</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int64_t</span> * __a, <span class="keyword">int64x1_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x1_t</span> <span class="title">vld1_lane_u64</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint64_t</span> * __a, <span class="keyword">uint64x1_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vld1q_lane_s8</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int8_t</span> * __a, <span class="keyword">int8x16_t</span> __b, </span></span></span><br><span class="line"><span class="params"><span class="function">	<span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;<span class="comment">//_mm_insert_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vld1q_lane_s16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int16_t</span> * __a, <span class="keyword">int16x8_t</span> __b, </span></span></span><br><span class="line"><span class="params"><span class="function">	<span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;<span class="comment">//_mm_insert_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vld1q_lane_s32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int32_t</span> * __a, <span class="keyword">int32x4_t</span> __b, </span></span></span><br><span class="line"><span class="params"><span class="function">	<span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;<span class="comment">//_mm_insert_epi32</span></span><br><span class="line"><span class="function"><span class="keyword">float32x4_t</span> <span class="title">vld1q_lane_f32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">float32_t</span> * __a, <span class="keyword">float32x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vld1q_lane_u8</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint8_t</span> * __a, <span class="keyword">uint8x16_t</span> __b, </span></span></span><br><span class="line"><span class="params"><span class="function">	<span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;<span class="comment">//_mm_insert_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vld1q_lane_u16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint16_t</span> * __a, <span class="keyword">uint16x8_t</span> __b, </span></span></span><br><span class="line"><span class="params"><span class="function">	<span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;<span class="comment">//_mm_insert_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vld1q_lane_u32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint32_t</span> * __a, <span class="keyword">uint32x4_t</span> __b, </span></span></span><br><span class="line"><span class="params"><span class="function">	<span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;<span class="comment">//_mm_insert_epi32</span></span><br><span class="line"><span class="function"><span class="keyword">poly8x16_t</span> <span class="title">vld1q_lane_p8</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">poly8_t</span> * __a, <span class="keyword">poly8x16_t</span> __b, </span></span></span><br><span class="line"><span class="params"><span class="function">	<span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;<span class="comment">//_mm_insert_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">poly16x8_t</span> <span class="title">vld1q_lane_p16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">poly16_t</span> * __a, <span class="keyword">poly16x8_t</span> __b, </span></span></span><br><span class="line"><span class="params"><span class="function">	<span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;<span class="comment">//_mm_insert_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vld1q_lane_s64</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int64_t</span> * __a, <span class="keyword">int64x2_t</span> __b, </span></span></span><br><span class="line"><span class="params"><span class="function">	<span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;<span class="comment">//_mm_insert_epi64</span></span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vld1q_lane_u64</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint64_t</span> * __a, <span class="keyword">uint64x2_t</span> __b, </span></span></span><br><span class="line"><span class="params"><span class="function">	<span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;<span class="comment">//_mm_insert_epi64</span></span><br><span class="line"><span class="comment">/*--3、Load all lanes of vector with same value from memory: vld1 -&gt; </span></span><br><span class="line"><span class="comment">loads one element in a vector from memory. </span></span><br><span class="line"><span class="comment">The loaded element is copied to all other lanes of the vector.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vld1_dup_s8</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int8_t</span> * __a)</span></span>;<span class="comment">//_mm_set1_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vld1_dup_s16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int16_t</span> * __a)</span></span>;<span class="comment">//_mm_set1_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vld1_dup_s32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int32_t</span> * __a)</span></span>;<span class="comment">//_mm_set1_epi32</span></span><br><span class="line"><span class="function"><span class="keyword">float32x2_t</span> <span class="title">vld1_dup_f32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">float32_t</span> * __a)</span></span>;<span class="comment">//_mm_set1_ps</span></span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vld1_dup_u8</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint8_t</span> * __a)</span></span>;<span class="comment">//_mm_set1_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vld1_dup_u16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint16_t</span> * __a)</span></span>;<span class="comment">//_mm_set1_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vld1_dup_u32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint32_t</span> * __a)</span></span>;<span class="comment">//_mm_set1_epi32</span></span><br><span class="line"><span class="function"><span class="keyword">poly8x8_t</span> <span class="title">vld1_dup_p8</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">poly8_t</span> * __a)</span></span>;<span class="comment">//_mm_set1_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">poly16x4_t</span> <span class="title">vld1_dup_p16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">poly16_t</span> * __a)</span></span>;<span class="comment">//_mm_set1_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">int64x1_t</span> <span class="title">vld1_dup_s64</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int64_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x1_t</span> <span class="title">vld1_dup_u64</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint64_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vld1q_dup_s8</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int8_t</span> * __a)</span></span>;<span class="comment">//_mm_set1_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vld1q_dup_s16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int16_t</span> * __a)</span></span>;<span class="comment">//_mm_set1_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vld1q_dup_s32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int32_t</span> * __a)</span></span>;<span class="comment">//_mm_set1_epi32</span></span><br><span class="line"><span class="function"><span class="keyword">float32x4_t</span> <span class="title">vld1q_dup_f32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">float32_t</span> * __a)</span></span>;<span class="comment">//_mm_set1_ps</span></span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vld1q_dup_u8</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint8_t</span> * __a)</span></span>;<span class="comment">//_mm_set1_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vld1q_dup_u16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint16_t</span> * __a)</span></span>;<span class="comment">//_mm_set1_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vld1q_dup_u32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint32_t</span> * __a)</span></span>;<span class="comment">//_mm_set1_epi32</span></span><br><span class="line"><span class="function"><span class="keyword">poly8x16_t</span> <span class="title">vld1q_dup_p8</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">poly8_t</span> * __a)</span></span>;<span class="comment">//_mm_set1_epi8</span></span><br><span class="line"><span class="function"><span class="keyword">poly16x8_t</span> <span class="title">vld1q_dup_p16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">poly16_t</span> * __a)</span></span>;<span class="comment">//_mm_set1_epi16</span></span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vld1q_dup_s64</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int64_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vld1q_dup_u64</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint64_t</span> * __a)</span></span>;</span><br><span class="line"><span class="comment">/*--4、Load 2-element structure from memory: vld2 -&gt; loads 2 vectors from memory. </span></span><br><span class="line"><span class="comment">It performs a 2-way de-interleave from memory to the vectors.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8x2_t</span> <span class="title">vld2_s8</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int8_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4x2_t</span> <span class="title">vld2_s16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int16_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2x2_t</span> <span class="title">vld2_s32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int32_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x2x2_t</span> <span class="title">vld2_f32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">float32_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8x2_t</span> <span class="title">vld2_u8</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint8_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4x2_t</span> <span class="title">vld2_u16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint16_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2x2_t</span> <span class="title">vld2_u32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint32_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x8x2_t</span> <span class="title">vld2_p8</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">poly8_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x4x2_t</span> <span class="title">vld2_p16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">poly16_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x1x2_t</span> <span class="title">vld2_s64</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int64_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x1x2_t</span> <span class="title">vld2_u64</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint64_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x16x2_t</span> <span class="title">vld2q_s8</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int8_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8x2_t</span> <span class="title">vld2q_s16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int16_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4x2_t</span> <span class="title">vld2q_s32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int32_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x4x2_t</span> <span class="title">vld2q_f32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">float32_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16x2_t</span> <span class="title">vld2q_u8</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint8_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8x2_t</span> <span class="title">vld2q_u16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint16_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4x2_t</span> <span class="title">vld2q_u32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint32_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x16x2_t</span> <span class="title">vld2q_p8</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">poly8_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x8x2_t</span> <span class="title">vld2q_p16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">poly16_t</span> * __a)</span></span>;</span><br><span class="line"><span class="comment">/*--5、Load a single lane of 2-element structure from memory: vld2 -&gt; </span></span><br><span class="line"><span class="comment">loads two elements in a double-vector structure from memory and returns this in </span></span><br><span class="line"><span class="comment">the result. The loaded values are from consecutive memory addresses. </span></span><br><span class="line"><span class="comment">Elements in the structure that are not loaded are returned in the result unaltered. </span></span><br><span class="line"><span class="comment">c is the index of the elements to load.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8x2_t</span> <span class="title">vld2_lane_s8</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int8_t</span> * __a, <span class="keyword">int8x8x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4x2_t</span> <span class="title">vld2_lane_s16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int16_t</span> * __a, <span class="keyword">int16x4x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2x2_t</span> <span class="title">vld2_lane_s32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int32_t</span> * __a, <span class="keyword">int32x2x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x2x2_t</span> <span class="title">vld2_lane_f32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">float32_t</span> * __a, <span class="keyword">float32x2x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8x2_t</span> <span class="title">vld2_lane_u8</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint8_t</span> * __a, <span class="keyword">uint8x8x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4x2_t</span> <span class="title">vld2_lane_u16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint16_t</span> * __a, <span class="keyword">uint16x4x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2x2_t</span> <span class="title">vld2_lane_u32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint32_t</span> * __a, <span class="keyword">uint32x2x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x8x2_t</span> <span class="title">vld2_lane_p8</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">poly8_t</span> * __a, <span class="keyword">poly8x8x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x4x2_t</span> <span class="title">vld2_lane_p16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">poly16_t</span> * __a, <span class="keyword">poly16x4x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8x2_t</span> <span class="title">vld2q_lane_s16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int16_t</span> * __a, <span class="keyword">int16x8x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4x2_t</span> <span class="title">vld2q_lane_s32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int32_t</span> * __a, <span class="keyword">int32x4x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x4x2_t</span> <span class="title">vld2q_lane_f32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">float32_t</span> * __a, <span class="keyword">float32x4x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8x2_t</span> <span class="title">vld2q_lane_u16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint16_t</span> * __a, <span class="keyword">uint16x8x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4x2_t</span> <span class="title">vld2q_lane_u32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint32_t</span> * __a, <span class="keyword">uint32x4x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x8x2_t</span> <span class="title">vld2q_lane_p16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">poly16_t</span> * __a, <span class="keyword">poly16x8x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="comment">/*--6、Load all lanes of 2-element structure with same value from memory: vld2 -&gt; </span></span><br><span class="line"><span class="comment">loads 2 elements from memory and returns a double-vector structure. </span></span><br><span class="line"><span class="comment">The first element is copied to all lanes of the first vector. </span></span><br><span class="line"><span class="comment">The second element is copied to all lanes of the second vector.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8x2_t</span> <span class="title">vld2_dup_s8</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int8_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4x2_t</span> <span class="title">vld2_dup_s16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int16_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2x2_t</span> <span class="title">vld2_dup_s32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int32_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x2x2_t</span> <span class="title">vld2_dup_f32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">float32_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8x2_t</span> <span class="title">vld2_dup_u8</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint8_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4x2_t</span> <span class="title">vld2_dup_u16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint16_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2x2_t</span> <span class="title">vld2_dup_u32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint32_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x8x2_t</span> <span class="title">vld2_dup_p8</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">poly8_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x4x2_t</span> <span class="title">vld2_dup_p16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">poly16_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x1x2_t</span> <span class="title">vld2_dup_s64</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int64_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x1x2_t</span> <span class="title">vld2_dup_u64</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint64_t</span> * __a)</span></span>;</span><br><span class="line"><span class="comment">/*--7、Load 3-element structure from memory: vld3 -&gt; </span></span><br><span class="line"><span class="comment">loads 3 vectors from memory. </span></span><br><span class="line"><span class="comment">It performs a 3-way de-interleave from memory to the vectors.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8x3_t</span> <span class="title">vld3_s8</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int8_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4x3_t</span> <span class="title">vld3_s16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int16_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2x3_t</span> <span class="title">vld3_s32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int32_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x2x3_t</span> <span class="title">vld3_f32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">float32_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8x3_t</span> <span class="title">vld3_u8</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint8_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4x3_t</span> <span class="title">vld3_u16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint16_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2x3_t</span> <span class="title">vld3_u32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint32_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x8x3_t</span> <span class="title">vld3_p8</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">poly8_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x4x3_t</span> <span class="title">vld3_p16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">poly16_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x1x3_t</span> <span class="title">vld3_s64</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int64_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x1x3_t</span> <span class="title">vld3_u64</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint64_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x16x3_t</span> <span class="title">vld3q_s8</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int8_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8x3_t</span> <span class="title">vld3q_s16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int16_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4x3_t</span> <span class="title">vld3q_s32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int32_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x4x3_t</span> <span class="title">vld3q_f32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">float32_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16x3_t</span> <span class="title">vld3q_u8</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint8_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8x3_t</span> <span class="title">vld3q_u16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint16_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4x3_t</span> <span class="title">vld3q_u32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint32_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x16x3_t</span> <span class="title">vld3q_p8</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">poly8_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x8x3_t</span> <span class="title">vld3q_p16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">poly16_t</span> * __a)</span></span>;</span><br><span class="line"><span class="comment">/*--8、Load a single lane of 3-element structure from memory: vld3 -&gt; </span></span><br><span class="line"><span class="comment">loads three elements in a triple-vector structure from memory and returns this in the</span></span><br><span class="line"><span class="comment">result. The loaded values are from consecutive memory addresses. </span></span><br><span class="line"><span class="comment">Elements in the structure that are not loaded are returned in the result unaltered.</span></span><br><span class="line"><span class="comment">c is the index of the element to load.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8x3_t</span> <span class="title">vld3_lane_s8</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int8_t</span> * __a, <span class="keyword">int8x8x3_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4x3_t</span> <span class="title">vld3_lane_s16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int16_t</span> * __a, <span class="keyword">int16x4x3_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2x3_t</span> <span class="title">vld3_lane_s32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int32_t</span> * __a, <span class="keyword">int32x2x3_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x2x3_t</span> <span class="title">vld3_lane_f32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">float32_t</span> * __a, <span class="keyword">float32x2x3_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8x3_t</span> <span class="title">vld3_lane_u8</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint8_t</span> * __a, <span class="keyword">uint8x8x3_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4x3_t</span> <span class="title">vld3_lane_u16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint16_t</span> * __a, <span class="keyword">uint16x4x3_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2x3_t</span> <span class="title">vld3_lane_u32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint32_t</span> * __a, <span class="keyword">uint32x2x3_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x8x3_t</span> <span class="title">vld3_lane_p8</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">poly8_t</span> * __a, <span class="keyword">poly8x8x3_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x4x3_t</span> <span class="title">vld3_lane_p16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">poly16_t</span> * __a, <span class="keyword">poly16x4x3_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8x3_t</span> <span class="title">vld3q_lane_s16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int16_t</span> * __a, <span class="keyword">int16x8x3_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4x3_t</span> <span class="title">vld3q_lane_s32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int32_t</span> * __a, <span class="keyword">int32x4x3_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x4x3_t</span> <span class="title">vld3q_lane_f32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">float32_t</span> * __a, <span class="keyword">float32x4x3_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8x3_t</span> <span class="title">vld3q_lane_u16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint16_t</span> * __a, <span class="keyword">uint16x8x3_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4x3_t</span> <span class="title">vld3q_lane_u32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint32_t</span> * __a, <span class="keyword">uint32x4x3_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x8x3_t</span> <span class="title">vld3q_lane_p16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">poly16_t</span> * __a, <span class="keyword">poly16x8x3_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="comment">/*--9、Load all lanes of 3-element structure with same value from memory: vld3 -&gt;</span></span><br><span class="line"><span class="comment">loads 3 elements from memory and returns a triple-vector structure. The first element</span></span><br><span class="line"><span class="comment">is copied to all lanes of the first vector. And similarly the second and third elements </span></span><br><span class="line"><span class="comment">are copied to the second and third vectors respectively.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8x3_t</span> <span class="title">vld3_dup_s8</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int8_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4x3_t</span> <span class="title">vld3_dup_s16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int16_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2x3_t</span> <span class="title">vld3_dup_s32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int32_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x2x3_t</span> <span class="title">vld3_dup_f32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">float32_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8x3_t</span> <span class="title">vld3_dup_u8</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint8_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4x3_t</span> <span class="title">vld3_dup_u16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint16_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2x3_t</span> <span class="title">vld3_dup_u32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint32_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x8x3_t</span> <span class="title">vld3_dup_p8</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">poly8_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x4x3_t</span> <span class="title">vld3_dup_p16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">poly16_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x1x3_t</span> <span class="title">vld3_dup_s64</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int64_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x1x3_t</span> <span class="title">vld3_dup_u64</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint64_t</span> * __a)</span></span>;</span><br><span class="line"><span class="comment">/*--10、Load 4-element structure from memory: vld4 -&gt; </span></span><br><span class="line"><span class="comment">loads 4 vectors from memory. </span></span><br><span class="line"><span class="comment">It performs a 4-way de-interleave from memory to the vectors.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8x4_t</span> <span class="title">vld4_s8</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int8_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4x4_t</span> <span class="title">vld4_s16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int16_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2x4_t</span> <span class="title">vld4_s32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int32_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x2x4_t</span> <span class="title">vld4_f32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">float32_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8x4_t</span>  <span class="title">vld4_u8</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint8_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4x4_t</span> <span class="title">vld4_u16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint16_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2x4_t</span> <span class="title">vld4_u32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint32_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x8x4_t</span> <span class="title">vld4_p8</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">poly8_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x4x4_t</span> <span class="title">vld4_p16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">poly16_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x1x4_t</span> <span class="title">vld4_s64</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int64_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x1x4_t</span> <span class="title">vld4_u64</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint64_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x16x4_t</span> <span class="title">vld4q_s8</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int8_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8x4_t</span> <span class="title">vld4q_s16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int16_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4x4_t</span> <span class="title">vld4q_s32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int32_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x4x4_t</span> <span class="title">vld4q_f32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">float32_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16x4_t</span> <span class="title">vld4q_u8</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint8_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8x4_t</span> <span class="title">vld4q_u16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint16_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4x4_t</span> <span class="title">vld4q_u32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint32_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x16x4_t</span> <span class="title">vld4q_p8</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">poly8_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x8x4_t</span> <span class="title">vld4q_p16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">poly16_t</span> * __a)</span></span>;</span><br><span class="line"><span class="comment">/*--11、Load a single lane of 4-element structure from memory: vld4 -&gt; </span></span><br><span class="line"><span class="comment">loads four elements in a quad-vector structure from memory and returns this in the result. </span></span><br><span class="line"><span class="comment">The loaded values are from consecutive memory addresses.</span></span><br><span class="line"><span class="comment">Elements in the structure that are not loaded are returned in the result unaltered. </span></span><br><span class="line"><span class="comment">c is the index of the element to load.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8x4_t</span> <span class="title">vld4_lane_s8</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int8_t</span> * __a, <span class="keyword">int8x8x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4x4_t</span> <span class="title">vld4_lane_s16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int16_t</span> * __a, <span class="keyword">int16x4x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2x4_t</span> <span class="title">vld4_lane_s32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int32_t</span> * __a, <span class="keyword">int32x2x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x2x4_t</span> <span class="title">vld4_lane_f32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">float32_t</span> * __a, <span class="keyword">float32x2x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8x4_t</span> <span class="title">vld4_lane_u8</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint8_t</span> * __a, <span class="keyword">uint8x8x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4x4_t</span> <span class="title">vld4_lane_u16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint16_t</span> * __a, <span class="keyword">uint16x4x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2x4_t</span> <span class="title">vld4_lane_u32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint32_t</span> * __a, <span class="keyword">uint32x2x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x8x4_t</span> <span class="title">vld4_lane_p8</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">poly8_t</span> * __a, <span class="keyword">poly8x8x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x4x4_t</span> <span class="title">vld4_lane_p16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">poly16_t</span> * __a, <span class="keyword">poly16x4x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8x4_t</span> <span class="title">vld4q_lane_s16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int16_t</span> * __a, <span class="keyword">int16x8x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4x4_t</span> <span class="title">vld4q_lane_s32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int32_t</span> * __a, <span class="keyword">int32x4x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x4x4_t</span> <span class="title">vld4q_lane_f32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">float32_t</span> * __a, <span class="keyword">float32x4x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8x4_t</span> <span class="title">vld4q_lane_u16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint16_t</span> * __a, <span class="keyword">uint16x8x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4x4_t</span> <span class="title">vld4q_lane_u32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint32_t</span> * __a, <span class="keyword">uint32x4x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x8x4_t</span> <span class="title">vld4q_lane_p16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">poly16_t</span> * __a, <span class="keyword">poly16x8x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="comment">/*--12、Load all lanes of 4-element structure with same value from memory: vld4 -&gt;</span></span><br><span class="line"><span class="comment">loads 4 elements from memory and returns a quad-vector structure. The first element is </span></span><br><span class="line"><span class="comment">copied to all lanes of the first vector. And similarly the second, third, and fourth </span></span><br><span class="line"><span class="comment">elements are copied to the second, third, and fourth vectors respectively.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">int8x8x4_t</span> <span class="title">vld4_dup_s8</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int8_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4x4_t</span> <span class="title">vld4_dup_s16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int16_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2x4_t</span> <span class="title">vld4_dup_s32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int32_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x2x4_t</span> <span class="title">vld4_dup_f32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">float32_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8x4_t</span> <span class="title">vld4_dup_u8</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint8_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4x4_t</span> <span class="title">vld4_dup_u16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint16_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2x4_t</span> <span class="title">vld4_dup_u32</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint32_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x8x4_t</span> <span class="title">vld4_dup_p8</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">poly8_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x4x4_t</span> <span class="title">vld4_dup_p16</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">poly16_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x1x4_t</span> <span class="title">vld4_dup_s64</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">int64_t</span> * __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x1x4_t</span> <span class="title">vld4_dup_u64</span> <span class="params">(<span class="keyword">const</span> <span class="keyword">uint64_t</span> * __a)</span></span>;</span><br><span class="line"><span class="comment">/*****************************************************Store*****************************/</span></span><br><span class="line"><span class="comment">/*--1、Store a single vector into memory: vst1 -&gt; stores a vector into memory.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst1_s8</span> <span class="params">(<span class="keyword">int8_t</span> * __a, <span class="keyword">int8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst1_s16</span> <span class="params">(<span class="keyword">int16_t</span> * __a, <span class="keyword">int16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst1_s32</span> <span class="params">(<span class="keyword">int32_t</span> * __a, <span class="keyword">int32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst1_s64</span> <span class="params">(<span class="keyword">int64_t</span> * __a, <span class="keyword">int64x1_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst1_f32</span> <span class="params">(<span class="keyword">float32_t</span> * __a, <span class="keyword">float32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst1_u8</span> <span class="params">(<span class="keyword">uint8_t</span> * __a, <span class="keyword">uint8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst1_u16</span> <span class="params">(<span class="keyword">uint16_t</span> * __a, <span class="keyword">uint16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst1_u32</span> <span class="params">(<span class="keyword">uint32_t</span> * __a, <span class="keyword">uint32x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst1_u64</span> <span class="params">(<span class="keyword">uint64_t</span> * __a, <span class="keyword">uint64x1_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst1_p8</span> <span class="params">(<span class="keyword">poly8_t</span> * __a, <span class="keyword">poly8x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst1_p16</span> <span class="params">(<span class="keyword">poly16_t</span> * __a, <span class="keyword">poly16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst1q_s8</span> <span class="params">(<span class="keyword">int8_t</span> * __a, <span class="keyword">int8x16_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst1q_s16</span> <span class="params">(<span class="keyword">int16_t</span> * __a, <span class="keyword">int16x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst1q_s32</span> <span class="params">(<span class="keyword">int32_t</span> * __a, <span class="keyword">int32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst1q_s64</span> <span class="params">(<span class="keyword">int64_t</span> * __a, <span class="keyword">int64x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst1q_f32</span> <span class="params">(<span class="keyword">float32_t</span> * __a, <span class="keyword">float32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst1q_u8</span> <span class="params">(<span class="keyword">uint8_t</span> * __a, <span class="keyword">uint8x16_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst1q_u16</span> <span class="params">(<span class="keyword">uint16_t</span> * __a, <span class="keyword">uint16x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst1q_u32</span> <span class="params">(<span class="keyword">uint32_t</span> * __a, <span class="keyword">uint32x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst1q_u64</span> <span class="params">(<span class="keyword">uint64_t</span> * __a, <span class="keyword">uint64x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst1q_p8</span> <span class="params">(<span class="keyword">poly8_t</span> * __a, <span class="keyword">poly8x16_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst1q_p16</span> <span class="params">(<span class="keyword">poly16_t</span> * __a, <span class="keyword">poly16x8_t</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/*--2、Store a single lane into memory: vst1 -&gt; </span></span><br><span class="line"><span class="comment">stores one element of the vector into memory. </span></span><br><span class="line"><span class="comment">c is the index in the vector to be stored.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst1_lane_s8</span> <span class="params">(<span class="keyword">int8_t</span> * __a, <span class="keyword">int8x8_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst1_lane_s16</span> <span class="params">(<span class="keyword">int16_t</span> * __a, <span class="keyword">int16x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst1_lane_s32</span> <span class="params">(<span class="keyword">int32_t</span> * __a, <span class="keyword">int32x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst1_lane_f32</span> <span class="params">(<span class="keyword">float32_t</span> * __a, <span class="keyword">float32x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst1_lane_u8</span> <span class="params">(<span class="keyword">uint8_t</span> * __a, <span class="keyword">uint8x8_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst1_lane_u16</span> <span class="params">(<span class="keyword">uint16_t</span> * __a, <span class="keyword">uint16x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst1_lane_u32</span> <span class="params">(<span class="keyword">uint32_t</span> * __a, <span class="keyword">uint32x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst1_lane_p8</span> <span class="params">(<span class="keyword">poly8_t</span> * __a, <span class="keyword">poly8x8_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst1_lane_p16</span> <span class="params">(<span class="keyword">poly16_t</span> * __a, <span class="keyword">poly16x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst1_lane_s64</span> <span class="params">(<span class="keyword">int64_t</span> * __a, <span class="keyword">int64x1_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst1_lane_u64</span> <span class="params">(<span class="keyword">uint64_t</span> * __a, <span class="keyword">uint64x1_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst1q_lane_s8</span> <span class="params">(<span class="keyword">int8_t</span> * __a, <span class="keyword">int8x16_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst1q_lane_s16</span> <span class="params">(<span class="keyword">int16_t</span> * __a, <span class="keyword">int16x8_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst1q_lane_s32</span> <span class="params">(<span class="keyword">int32_t</span> * __a, <span class="keyword">int32x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst1q_lane_f32</span> <span class="params">(<span class="keyword">float32_t</span> * __a, <span class="keyword">float32x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst1q_lane_u8</span> <span class="params">(<span class="keyword">uint8_t</span> * __a, <span class="keyword">uint8x16_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst1q_lane_u16</span> <span class="params">(<span class="keyword">uint16_t</span> * __a, <span class="keyword">uint16x8_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst1q_lane_u32</span> <span class="params">(<span class="keyword">uint32_t</span> * __a, <span class="keyword">uint32x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst1q_lane_p8</span> <span class="params">(<span class="keyword">poly8_t</span> * __a, <span class="keyword">poly8x16_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst1q_lane_p16</span> <span class="params">(<span class="keyword">poly16_t</span> * __a, <span class="keyword">poly16x8_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst1q_lane_s64</span> <span class="params">(<span class="keyword">int64_t</span> * __a, <span class="keyword">int64x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst1q_lane_u64</span> <span class="params">(<span class="keyword">uint64_t</span> * __a, <span class="keyword">uint64x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="comment">/*--3、Store 2 vectors into memory: vst2 -&gt; </span></span><br><span class="line"><span class="comment">stores 2 vectors into memory. It interleaves the 2 vectors into memory.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst2_s8</span> <span class="params">(<span class="keyword">int8_t</span> * __a, <span class="keyword">int8x8x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst2_s16</span> <span class="params">(<span class="keyword">int16_t</span> * __a, <span class="keyword">int16x4x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst2_s32</span> <span class="params">(<span class="keyword">int32_t</span> * __a, <span class="keyword">int32x2x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst2_f32</span> <span class="params">(<span class="keyword">float32_t</span> * __a, <span class="keyword">float32x2x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst2_u8</span> <span class="params">(<span class="keyword">uint8_t</span> * __a, <span class="keyword">uint8x8x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst2_u16</span> <span class="params">(<span class="keyword">uint16_t</span> * __a, <span class="keyword">uint16x4x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst2_u32</span> <span class="params">(<span class="keyword">uint32_t</span> * __a, <span class="keyword">uint32x2x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst2_p8</span> <span class="params">(<span class="keyword">poly8_t</span> * __a, <span class="keyword">poly8x8x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst2_p16</span> <span class="params">(<span class="keyword">poly16_t</span> * __a, <span class="keyword">poly16x4x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst2_s64</span> <span class="params">(<span class="keyword">int64_t</span> * __a, <span class="keyword">int64x1x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst2_u64</span> <span class="params">(<span class="keyword">uint64_t</span> * __a, <span class="keyword">uint64x1x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst2q_s8</span> <span class="params">(<span class="keyword">int8_t</span> * __a, <span class="keyword">int8x16x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst2q_s16</span> <span class="params">(<span class="keyword">int16_t</span> * __a, <span class="keyword">int16x8x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst2q_s32</span> <span class="params">(<span class="keyword">int32_t</span> * __a, <span class="keyword">int32x4x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst2q_f32</span> <span class="params">(<span class="keyword">float32_t</span> * __a, <span class="keyword">float32x4x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst2q_u8</span> <span class="params">(<span class="keyword">uint8_t</span> * __a, <span class="keyword">uint8x16x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst2q_u16</span> <span class="params">(<span class="keyword">uint16_t</span> * __a, <span class="keyword">uint16x8x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst2q_u32</span> <span class="params">(<span class="keyword">uint32_t</span> * __a, <span class="keyword">uint32x4x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst2q_p8</span> <span class="params">(<span class="keyword">poly8_t</span> * __a, <span class="keyword">poly8x16x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst2q_p16</span> <span class="params">(<span class="keyword">poly16_t</span> * __a, <span class="keyword">poly16x8x2_t</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/*--4、Store a lane of two elements into memory: vst2 -&gt;</span></span><br><span class="line"><span class="comment">stores a lane of two elements from a double-vector structure into memory.</span></span><br><span class="line"><span class="comment">The elements to be stored are from the same lane in the vectors and their index is c.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst2_lane_s8</span> <span class="params">(<span class="keyword">int8_t</span> * __a, <span class="keyword">int8x8x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst2_lane_s16</span> <span class="params">(<span class="keyword">int16_t</span> * __a, <span class="keyword">int16x4x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst2_lane_s32</span> <span class="params">(<span class="keyword">int32_t</span> * __a, <span class="keyword">int32x2x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst2_lane_f32</span> <span class="params">(<span class="keyword">float32_t</span> * __a, <span class="keyword">float32x2x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst2_lane_u8</span> <span class="params">(<span class="keyword">uint8_t</span> * __a, <span class="keyword">uint8x8x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst2_lane_u16</span> <span class="params">(<span class="keyword">uint16_t</span> * __a, <span class="keyword">uint16x4x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst2_lane_u32</span> <span class="params">(<span class="keyword">uint32_t</span> * __a, <span class="keyword">uint32x2x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst2_lane_p8</span> <span class="params">(<span class="keyword">poly8_t</span> * __a, <span class="keyword">poly8x8x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst2_lane_p16</span> <span class="params">(<span class="keyword">poly16_t</span> * __a, <span class="keyword">poly16x4x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst2q_lane_s16</span> <span class="params">(<span class="keyword">int16_t</span> * __a, <span class="keyword">int16x8x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst2q_lane_s32</span> <span class="params">(<span class="keyword">int32_t</span> * __a, <span class="keyword">int32x4x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst2q_lane_f32</span> <span class="params">(<span class="keyword">float32_t</span> * __a, <span class="keyword">float32x4x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst2q_lane_u16</span> <span class="params">(<span class="keyword">uint16_t</span> * __a, <span class="keyword">uint16x8x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst2q_lane_u32</span> <span class="params">(<span class="keyword">uint32_t</span> * __a, <span class="keyword">uint32x4x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst2q_lane_p16</span> <span class="params">(<span class="keyword">poly16_t</span> * __a, <span class="keyword">poly16x8x2_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="comment">/*--5、Store 3 vectors into memory: vst3 -&gt; </span></span><br><span class="line"><span class="comment">stores 3 vectors into memory. It interleaves the 3 vectors into memory.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst3_s8</span> <span class="params">(<span class="keyword">int8_t</span> * __a, <span class="keyword">int8x8x3_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst3_s16</span> <span class="params">(<span class="keyword">int16_t</span> * __a, <span class="keyword">int16x4x3_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst3_s32</span> <span class="params">(<span class="keyword">int32_t</span> * __a, <span class="keyword">int32x2x3_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst3_f32</span> <span class="params">(<span class="keyword">float32_t</span> * __a, <span class="keyword">float32x2x3_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span>  <span class="title">vst3_u8</span> <span class="params">(<span class="keyword">uint8_t</span> * __a, <span class="keyword">uint8x8x3_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst3_u16</span> <span class="params">(<span class="keyword">uint16_t</span> * __a, <span class="keyword">uint16x4x3_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst3_u32</span> <span class="params">(<span class="keyword">uint32_t</span> * __a, <span class="keyword">uint32x2x3_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst3_p8</span> <span class="params">(<span class="keyword">poly8_t</span> * __a, <span class="keyword">poly8x8x3_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst3_p16</span> <span class="params">(<span class="keyword">poly16_t</span> * __a, <span class="keyword">poly16x4x3_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst3_s64</span> <span class="params">(<span class="keyword">int64_t</span> * __a, <span class="keyword">int64x1x3_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst3_u64</span> <span class="params">(<span class="keyword">uint64_t</span> * __a, <span class="keyword">uint64x1x3_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst3q_s8</span> <span class="params">(<span class="keyword">int8_t</span> * __a, <span class="keyword">int8x16x3_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst3q_s16</span> <span class="params">(<span class="keyword">int16_t</span> * __a, <span class="keyword">int16x8x3_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst3q_s32</span> <span class="params">(<span class="keyword">int32_t</span> * __a, <span class="keyword">int32x4x3_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst3q_f32</span> <span class="params">(<span class="keyword">float32_t</span> * __a, <span class="keyword">float32x4x3_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst3q_u8</span> <span class="params">(<span class="keyword">uint8_t</span> * __a, <span class="keyword">uint8x16x3_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst3q_u16</span> <span class="params">(<span class="keyword">uint16_t</span> * __a, <span class="keyword">uint16x8x3_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst3q_u32</span> <span class="params">(<span class="keyword">uint32_t</span> * __a, <span class="keyword">uint32x4x3_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst3q_p8</span> <span class="params">(<span class="keyword">poly8_t</span> * __a, <span class="keyword">poly8x16x3_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst3q_p16</span> <span class="params">(<span class="keyword">poly16_t</span> * __a, <span class="keyword">poly16x8x3_t</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/*--6、Store a lane of three elements into memory: vst3 -&gt;</span></span><br><span class="line"><span class="comment">stores a lane of three elements from a triple-vector structure into memory. </span></span><br><span class="line"><span class="comment">The elements to be stored are from the same lane in the vectors and their index is c.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst3_lane_s8</span> <span class="params">(<span class="keyword">int8_t</span> * __a, <span class="keyword">int8x8x3_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst3_lane_s16</span> <span class="params">(<span class="keyword">int16_t</span> * __a, <span class="keyword">int16x4x3_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst3_lane_s32</span> <span class="params">(<span class="keyword">int32_t</span> * __a, <span class="keyword">int32x2x3_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst3_lane_f32</span> <span class="params">(<span class="keyword">float32_t</span> * __a, <span class="keyword">float32x2x3_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst3_lane_u8</span> <span class="params">(<span class="keyword">uint8_t</span> * __a, <span class="keyword">uint8x8x3_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst3_lane_u16</span> <span class="params">(<span class="keyword">uint16_t</span> * __a, <span class="keyword">uint16x4x3_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst3_lane_u32</span> <span class="params">(<span class="keyword">uint32_t</span> * __a, <span class="keyword">uint32x2x3_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst3_lane_p8</span> <span class="params">(<span class="keyword">poly8_t</span> * __a, <span class="keyword">poly8x8x3_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst3_lane_p16</span> <span class="params">(<span class="keyword">poly16_t</span> * __a, <span class="keyword">poly16x4x3_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst3q_lane_s16</span> <span class="params">(<span class="keyword">int16_t</span> * __a, <span class="keyword">int16x8x3_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst3q_lane_s32</span> <span class="params">(<span class="keyword">int32_t</span> * __a, <span class="keyword">int32x4x3_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst3q_lane_f32</span> <span class="params">(<span class="keyword">float32_t</span> * __a, <span class="keyword">float32x4x3_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst3q_lane_u16</span> <span class="params">(<span class="keyword">uint16_t</span> * __a, <span class="keyword">uint16x8x3_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst3q_lane_u32</span> <span class="params">(<span class="keyword">uint32_t</span> * __a, <span class="keyword">uint32x4x3_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst3q_lane_p16</span> <span class="params">(<span class="keyword">poly16_t</span> * __a, <span class="keyword">poly16x8x3_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="comment">/*--7、Store 4 vectors into memory: vst4 -&gt; </span></span><br><span class="line"><span class="comment">stores 4 vectors into memory. It interleaves the 4 vectors into memory.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst4_s8</span> <span class="params">(<span class="keyword">int8_t</span> * __a, <span class="keyword">int8x8x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst4_s16</span> <span class="params">(<span class="keyword">int16_t</span> * __a, <span class="keyword">int16x4x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst4_s32</span> <span class="params">(<span class="keyword">int32_t</span> * __a, <span class="keyword">int32x2x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst4_f32</span> <span class="params">(<span class="keyword">float32_t</span> * __a, <span class="keyword">float32x2x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst4_u8</span> <span class="params">(<span class="keyword">uint8_t</span> * __a, <span class="keyword">uint8x8x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst4_u16</span> <span class="params">(<span class="keyword">uint16_t</span> * __a, <span class="keyword">uint16x4x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst4_u32</span> <span class="params">(<span class="keyword">uint32_t</span> * __a, <span class="keyword">uint32x2x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst4_p8</span> <span class="params">(<span class="keyword">poly8_t</span> * __a, <span class="keyword">poly8x8x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst4_p16</span> <span class="params">(<span class="keyword">poly16_t</span> * __a, <span class="keyword">poly16x4x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst4_s64</span> <span class="params">(<span class="keyword">int64_t</span> * __a, <span class="keyword">int64x1x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst4_u64</span> <span class="params">(<span class="keyword">uint64_t</span> * __a, <span class="keyword">uint64x1x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst4q_s8</span> <span class="params">(<span class="keyword">int8_t</span> * __a, <span class="keyword">int8x16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst4q_s16</span> <span class="params">(<span class="keyword">int16_t</span> * __a, <span class="keyword">int16x8x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst4q_s32</span> <span class="params">(<span class="keyword">int32_t</span> * __a, <span class="keyword">int32x4x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span>  <span class="title">vst4q_f32</span> <span class="params">(<span class="keyword">float32_t</span> * __a, <span class="keyword">float32x4x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst4q_u8</span> <span class="params">(<span class="keyword">uint8_t</span> * __a, <span class="keyword">uint8x16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst4q_u16</span> <span class="params">(<span class="keyword">uint16_t</span> * __a, <span class="keyword">uint16x8x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst4q_u32</span> <span class="params">(<span class="keyword">uint32_t</span> * __a, <span class="keyword">uint32x4x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst4q_p8</span> <span class="params">(<span class="keyword">poly8_t</span> * __a, <span class="keyword">poly8x16x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst4q_p16</span> <span class="params">(<span class="keyword">poly16_t</span> * __a, <span class="keyword">poly16x8x4_t</span> __b)</span></span>;</span><br><span class="line"><span class="comment">/*--8、Store a lane of four elements into memory: vst4 -&gt;</span></span><br><span class="line"><span class="comment">stores a lane of four elements from a quad-vector structure into memory.</span></span><br><span class="line"><span class="comment">The elements to be stored are from the same lane in the vectors and their index is c.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst4_lane_s8</span> <span class="params">(<span class="keyword">int8_t</span> * __a, <span class="keyword">int8x8x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst4_lane_s16</span> <span class="params">(<span class="keyword">int16_t</span> * __a, <span class="keyword">int16x4x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst4_lane_s32</span> <span class="params">(<span class="keyword">int32_t</span> * __a, <span class="keyword">int32x2x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst4_lane_f32</span> <span class="params">(<span class="keyword">float32_t</span> * __a, <span class="keyword">float32x2x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst4_lane_u8</span> <span class="params">(<span class="keyword">uint8_t</span> * __a, <span class="keyword">uint8x8x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst4_lane_u16</span> <span class="params">(<span class="keyword">uint16_t</span> * __a, <span class="keyword">uint16x4x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst4_lane_u32</span> <span class="params">(<span class="keyword">uint32_t</span> * __a, <span class="keyword">uint32x2x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst4_lane_p8</span> <span class="params">(<span class="keyword">poly8_t</span> * __a, <span class="keyword">poly8x8x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst4_lane_p16</span> <span class="params">(<span class="keyword">poly16_t</span> * __a, <span class="keyword">poly16x4x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst4q_lane_s16</span> <span class="params">(<span class="keyword">int16_t</span> * __a, <span class="keyword">int16x8x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst4q_lane_s32</span> <span class="params">(<span class="keyword">int32_t</span> * __a, <span class="keyword">int32x4x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst4q_lane_f32</span> <span class="params">(<span class="keyword">float32_t</span> * __a, <span class="keyword">float32x4x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst4q_lane_u16</span> <span class="params">(<span class="keyword">uint16_t</span> * __a, <span class="keyword">uint16x8x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst4q_lane_u32</span> <span class="params">(<span class="keyword">uint32_t</span> * __a, <span class="keyword">uint32x4x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">vst4q_lane_p16</span> <span class="params">(<span class="keyword">poly16_t</span> * __a, <span class="keyword">poly16x8x4_t</span> __b, <span class="keyword">const</span> <span class="keyword">int</span> __c)</span></span>;</span><br><span class="line"><span class="comment">/*********************************Reinterpret casts(type conversion)********************/</span></span><br><span class="line"><span class="comment">/*--convert between types: vreinterpret -&gt; treats a vector as having a different </span></span><br><span class="line"><span class="comment">datatype, without changing its value.--*/</span></span><br><span class="line"><span class="function"><span class="keyword">poly8x8_t</span> <span class="title">vreinterpret_p8_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x8_t</span> <span class="title">vreinterpret_p8_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x8_t</span> <span class="title">vreinterpret_p8_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x8_t</span> <span class="title">vreinterpret_p8_s64</span> <span class="params">(<span class="keyword">int64x1_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x8_t</span> <span class="title">vreinterpret_p8_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x8_t</span> <span class="title">vreinterpret_p8_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x8_t</span> <span class="title">vreinterpret_p8_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x8_t</span> <span class="title">vreinterpret_p8_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x8_t</span> <span class="title">vreinterpret_p8_u64</span> <span class="params">(<span class="keyword">uint64x1_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x8_t</span> <span class="title">vreinterpret_p8_p16</span> <span class="params">(<span class="keyword">poly16x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x16_t</span> <span class="title">vreinterpretq_p8_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x16_t</span> <span class="title">vreinterpretq_p8_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x16_t</span> <span class="title">vreinterpretq_p8_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x16_t</span> <span class="title">vreinterpretq_p8_s64</span> <span class="params">(<span class="keyword">int64x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x16_t</span> <span class="title">vreinterpretq_p8_f32</span> <span class="params">(<span class="keyword">float32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x16_t</span> <span class="title">vreinterpretq_p8_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x16_t</span> <span class="title">vreinterpretq_p8_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x16_t</span> <span class="title">vreinterpretq_p8_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x16_t</span> <span class="title">vreinterpretq_p8_u64</span> <span class="params">(<span class="keyword">uint64x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly8x16_t</span> <span class="title">vreinterpretq_p8_p16</span> <span class="params">(<span class="keyword">poly16x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x4_t</span> <span class="title">vreinterpret_p16_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x4_t</span> <span class="title">vreinterpret_p16_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x4_t</span> <span class="title">vreinterpret_p16_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x4_t</span> <span class="title">vreinterpret_p16_s64</span> <span class="params">(<span class="keyword">int64x1_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x4_t</span> <span class="title">vreinterpret_p16_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x4_t</span> <span class="title">vreinterpret_p16_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x4_t</span> <span class="title">vreinterpret_p16_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x4_t</span> <span class="title">vreinterpret_p16_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x4_t</span> <span class="title">vreinterpret_p16_u64</span> <span class="params">(<span class="keyword">uint64x1_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x4_t</span> <span class="title">vreinterpret_p16_p8</span> <span class="params">(<span class="keyword">poly8x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x8_t</span> <span class="title">vreinterpretq_p16_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x8_t</span> <span class="title">vreinterpretq_p16_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x8_t</span> <span class="title">vreinterpretq_p16_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x8_t</span> <span class="title">vreinterpretq_p16_s64</span> <span class="params">(<span class="keyword">int64x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x8_t</span> <span class="title">vreinterpretq_p16_f32</span> <span class="params">(<span class="keyword">float32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x8_t</span> <span class="title">vreinterpretq_p16_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x8_t</span> <span class="title">vreinterpretq_p16_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x8_t</span> <span class="title">vreinterpretq_p16_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x8_t</span> <span class="title">vreinterpretq_p16_u64</span> <span class="params">(<span class="keyword">uint64x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">poly16x8_t</span> <span class="title">vreinterpretq_p16_p8</span> <span class="params">(<span class="keyword">poly8x16_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x2_t</span> <span class="title">vreinterpret_f32_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x2_t</span> <span class="title">vreinterpret_f32_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x2_t</span> <span class="title">vreinterpret_f32_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x2_t</span> <span class="title">vreinterpret_f32_s64</span> <span class="params">(<span class="keyword">int64x1_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x2_t</span> <span class="title">vreinterpret_f32_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x2_t</span> <span class="title">vreinterpret_f32_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x2_t</span> <span class="title">vreinterpret_f32_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x2_t</span> <span class="title">vreinterpret_f32_u64</span> <span class="params">(<span class="keyword">uint64x1_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x2_t</span> <span class="title">vreinterpret_f32_p8</span> <span class="params">(<span class="keyword">poly8x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x2_t</span> <span class="title">vreinterpret_f32_p16</span> <span class="params">(<span class="keyword">poly16x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x4_t</span> <span class="title">vreinterpretq_f32_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x4_t</span> <span class="title">vreinterpretq_f32_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x4_t</span> <span class="title">vreinterpretq_f32_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x4_t</span> <span class="title">vreinterpretq_f32_s64</span> <span class="params">(<span class="keyword">int64x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x4_t</span> <span class="title">vreinterpretq_f32_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x4_t</span> <span class="title">vreinterpretq_f32_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x4_t</span> <span class="title">vreinterpretq_f32_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x4_t</span> <span class="title">vreinterpretq_f32_u64</span> <span class="params">(<span class="keyword">uint64x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x4_t</span> <span class="title">vreinterpretq_f32_p8</span> <span class="params">(<span class="keyword">poly8x16_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">float32x4_t</span> <span class="title">vreinterpretq_f32_p16</span> <span class="params">(<span class="keyword">poly16x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x1_t</span> <span class="title">vreinterpret_s64_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x1_t</span> <span class="title">vreinterpret_s64_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x1_t</span> <span class="title">vreinterpret_s64_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x1_t</span> <span class="title">vreinterpret_s64_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x1_t</span> <span class="title">vreinterpret_s64_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x1_t</span> <span class="title">vreinterpret_s64_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x1_t</span> <span class="title">vreinterpret_s64_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x1_t</span> <span class="title">vreinterpret_s64_u64</span> <span class="params">(<span class="keyword">uint64x1_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x1_t</span> <span class="title">vreinterpret_s64_p8</span> <span class="params">(<span class="keyword">poly8x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x1_t</span> <span class="title">vreinterpret_s64_p16</span> <span class="params">(<span class="keyword">poly16x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vreinterpretq_s64_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vreinterpretq_s64_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vreinterpretq_s64_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vreinterpretq_s64_f32</span> <span class="params">(<span class="keyword">float32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vreinterpretq_s64_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vreinterpretq_s64_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vreinterpretq_s64_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vreinterpretq_s64_u64</span> <span class="params">(<span class="keyword">uint64x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vreinterpretq_s64_p8</span> <span class="params">(<span class="keyword">poly8x16_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int64x2_t</span> <span class="title">vreinterpretq_s64_p16</span> <span class="params">(<span class="keyword">poly16x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x1_t</span> <span class="title">vreinterpret_u64_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x1_t</span> <span class="title">vreinterpret_u64_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x1_t</span> <span class="title">vreinterpret_u64_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x1_t</span> <span class="title">vreinterpret_u64_s64</span> <span class="params">(<span class="keyword">int64x1_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x1_t</span> <span class="title">vreinterpret_u64_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x1_t</span> <span class="title">vreinterpret_u64_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x1_t</span> <span class="title">vreinterpret_u64_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x1_t</span> <span class="title">vreinterpret_u64_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x1_t</span> <span class="title">vreinterpret_u64_p8</span> <span class="params">(<span class="keyword">poly8x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x1_t</span> <span class="title">vreinterpret_u64_p16</span> <span class="params">(<span class="keyword">poly16x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vreinterpretq_u64_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vreinterpretq_u64_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vreinterpretq_u64_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vreinterpretq_u64_s64</span> <span class="params">(<span class="keyword">int64x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vreinterpretq_u64_f32</span> <span class="params">(<span class="keyword">float32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vreinterpretq_u64_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vreinterpretq_u64_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vreinterpretq_u64_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vreinterpretq_u64_p8</span> <span class="params">(<span class="keyword">poly8x16_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint64x2_t</span> <span class="title">vreinterpretq_u64_p16</span> <span class="params">(<span class="keyword">poly16x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vreinterpret_s8_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vreinterpret_s8_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vreinterpret_s8_s64</span> <span class="params">(<span class="keyword">int64x1_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vreinterpret_s8_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vreinterpret_s8_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vreinterpret_s8_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vreinterpret_s8_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vreinterpret_s8_u64</span> <span class="params">(<span class="keyword">uint64x1_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vreinterpret_s8_p8</span> <span class="params">(<span class="keyword">poly8x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x8_t</span> <span class="title">vreinterpret_s8_p16</span> <span class="params">(<span class="keyword">poly16x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vreinterpretq_s8_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vreinterpretq_s8_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vreinterpretq_s8_s64</span> <span class="params">(<span class="keyword">int64x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vreinterpretq_s8_f32</span> <span class="params">(<span class="keyword">float32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vreinterpretq_s8_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vreinterpretq_s8_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vreinterpretq_s8_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vreinterpretq_s8_u64</span> <span class="params">(<span class="keyword">uint64x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vreinterpretq_s8_p8</span> <span class="params">(<span class="keyword">poly8x16_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int8x16_t</span> <span class="title">vreinterpretq_s8_p16</span> <span class="params">(<span class="keyword">poly16x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vreinterpret_s16_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vreinterpret_s16_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vreinterpret_s16_s64</span> <span class="params">(<span class="keyword">int64x1_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vreinterpret_s16_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vreinterpret_s16_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vreinterpret_s16_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vreinterpret_s16_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vreinterpret_s16_u64</span> <span class="params">(<span class="keyword">uint64x1_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vreinterpret_s16_p8</span> <span class="params">(<span class="keyword">poly8x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x4_t</span> <span class="title">vreinterpret_s16_p16</span> <span class="params">(<span class="keyword">poly16x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vreinterpretq_s16_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vreinterpretq_s16_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vreinterpretq_s16_s64</span> <span class="params">(<span class="keyword">int64x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vreinterpretq_s16_f32</span> <span class="params">(<span class="keyword">float32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vreinterpretq_s16_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vreinterpretq_s16_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vreinterpretq_s16_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vreinterpretq_s16_u64</span> <span class="params">(<span class="keyword">uint64x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vreinterpretq_s16_p8</span> <span class="params">(<span class="keyword">poly8x16_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int16x8_t</span> <span class="title">vreinterpretq_s16_p16</span> <span class="params">(<span class="keyword">poly16x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vreinterpret_s32_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vreinterpret_s32_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vreinterpret_s32_s64</span> <span class="params">(<span class="keyword">int64x1_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vreinterpret_s32_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vreinterpret_s32_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vreinterpret_s32_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vreinterpret_s32_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vreinterpret_s32_u64</span> <span class="params">(<span class="keyword">uint64x1_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vreinterpret_s32_p8</span> <span class="params">(<span class="keyword">poly8x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x2_t</span> <span class="title">vreinterpret_s32_p16</span> <span class="params">(<span class="keyword">poly16x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vreinterpretq_s32_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vreinterpretq_s32_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vreinterpretq_s32_s64</span> <span class="params">(<span class="keyword">int64x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vreinterpretq_s32_f32</span> <span class="params">(<span class="keyword">float32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vreinterpretq_s32_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vreinterpretq_s32_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vreinterpretq_s32_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vreinterpretq_s32_u64</span> <span class="params">(<span class="keyword">uint64x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vreinterpretq_s32_p8</span> <span class="params">(<span class="keyword">poly8x16_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int32x4_t</span> <span class="title">vreinterpretq_s32_p16</span> <span class="params">(<span class="keyword">poly16x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vreinterpret_u8_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vreinterpret_u8_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vreinterpret_u8_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vreinterpret_u8_s64</span> <span class="params">(<span class="keyword">int64x1_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vreinterpret_u8_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vreinterpret_u8_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vreinterpret_u8_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vreinterpret_u8_u64</span> <span class="params">(<span class="keyword">uint64x1_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vreinterpret_u8_p8</span> <span class="params">(<span class="keyword">poly8x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x8_t</span> <span class="title">vreinterpret_u8_p16</span> <span class="params">(<span class="keyword">poly16x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vreinterpretq_u8_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vreinterpretq_u8_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vreinterpretq_u8_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vreinterpretq_u8_s64</span> <span class="params">(<span class="keyword">int64x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vreinterpretq_u8_f32</span> <span class="params">(<span class="keyword">float32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vreinterpretq_u8_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vreinterpretq_u8_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vreinterpretq_u8_u64</span> <span class="params">(<span class="keyword">uint64x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vreinterpretq_u8_p8</span> <span class="params">(<span class="keyword">poly8x16_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint8x16_t</span> <span class="title">vreinterpretq_u8_p16</span> <span class="params">(<span class="keyword">poly16x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vreinterpret_u16_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vreinterpret_u16_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vreinterpret_u16_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vreinterpret_u16_s64</span> <span class="params">(<span class="keyword">int64x1_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vreinterpret_u16_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vreinterpret_u16_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vreinterpret_u16_u32</span> <span class="params">(<span class="keyword">uint32x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vreinterpret_u16_u64</span> <span class="params">(<span class="keyword">uint64x1_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vreinterpret_u16_p8</span> <span class="params">(<span class="keyword">poly8x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x4_t</span> <span class="title">vreinterpret_u16_p16</span> <span class="params">(<span class="keyword">poly16x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vreinterpretq_u16_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vreinterpretq_u16_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vreinterpretq_u16_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vreinterpretq_u16_s64</span> <span class="params">(<span class="keyword">int64x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vreinterpretq_u16_f32</span> <span class="params">(<span class="keyword">float32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vreinterpretq_u16_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vreinterpretq_u16_u32</span> <span class="params">(<span class="keyword">uint32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vreinterpretq_u16_u64</span> <span class="params">(<span class="keyword">uint64x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vreinterpretq_u16_p8</span> <span class="params">(<span class="keyword">poly8x16_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint16x8_t</span> <span class="title">vreinterpretq_u16_p16</span> <span class="params">(<span class="keyword">poly16x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vreinterpret_u32_s8</span> <span class="params">(<span class="keyword">int8x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vreinterpret_u32_s16</span> <span class="params">(<span class="keyword">int16x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vreinterpret_u32_s32</span> <span class="params">(<span class="keyword">int32x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vreinterpret_u32_s64</span> <span class="params">(<span class="keyword">int64x1_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vreinterpret_u32_f32</span> <span class="params">(<span class="keyword">float32x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vreinterpret_u32_u8</span> <span class="params">(<span class="keyword">uint8x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vreinterpret_u32_u16</span> <span class="params">(<span class="keyword">uint16x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vreinterpret_u32_u64</span> <span class="params">(<span class="keyword">uint64x1_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vreinterpret_u32_p8</span> <span class="params">(<span class="keyword">poly8x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x2_t</span> <span class="title">vreinterpret_u32_p16</span> <span class="params">(<span class="keyword">poly16x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vreinterpretq_u32_s8</span> <span class="params">(<span class="keyword">int8x16_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vreinterpretq_u32_s16</span> <span class="params">(<span class="keyword">int16x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vreinterpretq_u32_s32</span> <span class="params">(<span class="keyword">int32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vreinterpretq_u32_s64</span> <span class="params">(<span class="keyword">int64x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vreinterpretq_u32_f32</span> <span class="params">(<span class="keyword">float32x4_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vreinterpretq_u32_u8</span> <span class="params">(<span class="keyword">uint8x16_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vreinterpretq_u32_u16</span> <span class="params">(<span class="keyword">uint16x8_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vreinterpretq_u32_u64</span> <span class="params">(<span class="keyword">uint64x2_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vreinterpretq_u32_p8</span> <span class="params">(<span class="keyword">poly8x16_t</span> __a)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">uint32x4_t</span> <span class="title">vreinterpretq_u32_p16</span> <span class="params">(<span class="keyword">poly16x8_t</span> __a)</span></span>;</span><br></pre></td></tr></table></figure>
<h4 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h4><p><a href="https://blog.csdn.net/billbliss/article/details/78488013">neon指令速查</a></p>
]]></content>
      <categories>
        <category>NEON</category>
      </categories>
      <tags>
        <tag>NEON 指令</tag>
        <tag>部分 AVX 指令对照</tag>
      </tags>
  </entry>
  <entry>
    <title>Gallery of Processor Cache Effects</title>
    <url>/2022/07/20/Gallery%20of%20Processor%20Cache%20Effects/</url>
    <content><![CDATA[<h4 id="Gallery-of-Processor-Cache-Effects"><a href="#Gallery-of-Processor-Cache-Effects" class="headerlink" title="Gallery of Processor Cache Effects"></a>Gallery of Processor Cache Effects</h4><blockquote>
<p>本篇博客转载自：<a href="http://igoro.com/archive/gallery-of-processor-cache-effects/">http://igoro.com/archive/gallery-of-processor-cache-effects/</a></p>
</blockquote>
<p>In this blog post, I will use code samples to illustrate various aspects of how caches work, and what is the impact on the performance of real-world programs.</p>
<p>The examples are in C#, but the language choice has little impact on the performance scores and the conclusions they lead to.</p>

<span id="more"></span>
<p></p><h3>Example 1: Memory accesses and performance</h3><p></p>
<p>How much faster do you expect Loop 2 to run, compared Loop 1?</p>
<pre class="code"><span style="color: blue;">int</span>[] arr = <span style="color: blue;">new int</span>[64 * 1024 * 1024];
<span id="more-366"></span>
<span style="color: green;">// Loop 1</span>
<span style="color: blue;">for </span>(<span style="color: blue;">int </span>i = 0; i &lt; arr.Length; i++) arr[i] *= 3;
<span style="color: green;">// Loop 2</span>
<span style="color: blue;">for </span>(<span style="color: blue;">int </span>i = 0; i &lt; arr.Length; i += 16) arr[i] *= 3;
<p><!--More--></p>
<p>The first loop multiplies every value in the array by 3, and the second loop multiplies only every 16-th. The second loop only does about <strong>6% of the work</strong> of the first loop, but on modern machines, the two for-loops take about the same time<strong>:</strong> <strong>80</strong> and <strong>78</strong> <strong>ms</strong> respectively on my machine.</p>
<p>The reason why the loops take the same amount of time has to do with memory. The running time of these loops is dominated by the memory accesses to the array, not by the integer multiplications. And, as I’ll explain on Example 2, the hardware will perform the same main memory accesses for the two loops.</p>
<h3>Example 2: Impact of cache lines</h3>
<p>Let’s explore this example deeper. We will try other step values, not just 1 and 16:</p>
<pre class="code"><span style="color: blue;">for </span>(<span style="color: blue;">int </span>i = 0; i &lt; arr.Length; i += K) arr[i] *= 3;</pre>
<p>Here are the running times of this loop for different step values (K):</p>
<p><img style="display: inline; border-width: 0px;" title="image" src="http://igoro.com/wordpress/wp-content/uploads/2010/01/image6.png" border="0" alt="image" width="483" height="291"></p>
<p>Notice that while step is in the range from 1 to 16, the running time of the for-loop hardly changes. But from 16 onwards, the running time is halved each time we double the step.</p>
<p>The reason behind this is that today’s CPUs do not access memory byte by byte. Instead, they fetch memory in chunks of (typically) 64 bytes, called <em>cache lines</em>. When you read a particular memory location, the entire cache line is fetched from the main memory into the cache. And, accessing other values from the same cache line is cheap!</p>
<p>Since 16 ints take up 64 bytes (one cache line), for-loops with a step between 1 and 16 have to touch the same number of cache lines: all of the cache lines in the array. But once the step is 32, we’ll only touch roughly every other cache line, and once it is 64, only every fourth.</p>
<p>Understanding of cache lines can be important for certain types of program optimizations. For example, alignment of data may determine whether an operation touches one or two cache lines. As we saw in the example above, this can easily mean that in the misaligned case, the operation will be twice slower.</p>
<h3>Example 3: L1 and L2 cache sizes</h3>
<p>Today’s computers come with two or three levels of caches, usually called L1, L2 and possibly L3. If you want to know the sizes of the different caches, you can use the <a href="http://technet.microsoft.com/en-us/sysinternals/cc835722.aspx">CoreInfo</a> SysInternals tool, or use the <a href="http://msdn.microsoft.com/en-us/library/ms683194(VS.85).aspx">GetLogicalProcessorInfo</a> Windows API call. Both methods will also tell you the cache line sizes, in addition to the cache sizes.</p>
<p>On my machine, CoreInfo reports that I have a 32kB L1 data cache, a 32kB L1 instruction cache, and a 4MB L2 data cache. The L1 caches are per-core, and the L2 caches are shared between pairs of cores:</p>
<pre class="code">Logical Processor to Cache Map:
*---  Data Cache          0, Level 1,   32 KB, Assoc   8, LineSize  64
*---  Instruction Cache   0, Level 1,   32 KB, Assoc   8, LineSize  64
-*--  Data Cache          1, Level 1,   32 KB, Assoc   8, LineSize  64
-*--  Instruction Cache   1, Level 1,   32 KB, Assoc   8, LineSize  64
**--  Unified Cache       0, Level 2,    4 MB, Assoc  16, LineSize  64
--*-  Data Cache          2, Level 1,   32 KB, Assoc   8, LineSize  64
--*-  Instruction Cache   2, Level 1,   32 KB, Assoc   8, LineSize  64
---*  Data Cache          3, Level 1,   32 KB, Assoc   8, LineSize  64
---*  Instruction Cache   3, Level 1,   32 KB, Assoc   8, LineSize  64
--**  Unified Cache       1, Level 2,    4 MB, Assoc  16, LineSize  64</pre>
<p>Let’s verify these numbers by an experiment. To do that, we’ll step over an array incrementing every 16th integer – a cheap way to modify every cache line. When we reach the last value, we loop back to the beginning. We’ll experiment with different array sizes, and we should see drops in the performance at the array sizes where the array spills out of one cache level.</p>
<p>Here is the program:</p>
<pre class="code"><span style="color: blue;">int </span>steps = 64 * 1024 * 1024; <span style="color: green;">// Arbitrary number of steps</span>
<span style="color: blue;">int </span>lengthMod = arr.Length - 1;
<span style="color: blue;">for </span>(<span style="color: blue;">int </span>i = 0; i &lt; steps; i++)
{
    arr[(i * 16) &amp; lengthMod]++; <span style="color: green;">// (x &amp; lengthMod) is equal to (x % arr.Length)
</span>}</pre>
<p>And here are the timings:</p>
<p> <img style="display: inline; border-width: 0px;" title="image" src="http://igoro.com/wordpress/wp-content/uploads/2010/02/image.png" border="0" alt="image" width="483" height="291"></p>
<p>You can see distinct drops after 32kB and 4MB – the sizes of L1 and L2 caches on my machine.</p>
<h3>Example 4: Instruction-level parallelism</h3>
<p>Now, let’s take a look at something different. Out of these two loops, which one would you expect to be faster?</p>
<pre class="code"><span style="color: blue;">int </span>steps = 256 * 1024 * 1024;
<span style="color: blue;">int</span>[] a = <span style="color: blue;">new int</span>[2];

<span style="color: green;">// Loop 1
</span><span style="color: blue;">for </span>(<span style="color: blue;">int </span>i=0; i&lt;steps; i++) { a[0]++; a[0]++; }

<span style="color: green;">// Loop 2
</span><span style="color: blue;">for </span>(<span style="color: blue;">int </span>i=0; i&lt;steps; i++) { a[0]++; a[1]++; }

<p>It turns out that the second loop is about twice faster than the first loop, at least on all of the machines I tested. Why? This has to do with the dependencies between operations in the two loop bodies.</p>
<p>In the body of the first loop, operations depend on each other as follows:</p>
<p><img style="display: inline; border-width: 0px;" title="image" src="http://igoro.com/wordpress/wp-content/uploads/2010/01/image.png" border="0" alt="image" width="613" height="25"></p>
<p>But in the second example, we only have these dependencies:</p>
<p><img style="display: inline; border-width: 0px;" title="image" src="http://igoro.com/wordpress/wp-content/uploads/2010/02/image2.png" border="0" alt="image" width="289" height="73"></p>
<p>The modern processor has various parts that have a little bit of parallelism in them: it can access two memory locations in L1 at the same time, or perform two simple arithmetic operations. In the first loop, the processor cannot exploit this instruction-level parallelism, but in the second loop, it can.</p>
<p><strong>[UPDATE]</strong>: Many people on reddit are asking about compiler optimizations, and whether { a[0]++; a[0]++; } would just get optimized to { a[0]+=2; }. In fact, the C# compiler and CLR JIT will not do this optimization – not when array accesses are involved. I built all of the tests in release mode (i.e. with optimizations), but I looked at the JIT-ted assembly to verify that optimizations aren’t skewing the results.</p>
<h3>Example 5: Cache associativity</h3>
<p>One key decision in cache design is whether each chunk of main memory can be stored in any cache slot, or in just some of them.</p>
<p>There are three possible approaches to mapping cache slots to memory chunks:</p>
<ol>
<li><strong>Direct mapped cache</strong>
<p>Each memory chunk can only be stored only in one particular slot in the cache. One simple solution is to map the chunk with index chunk_index to cache slot (chunk_index % cache_slots). Two memory chunks that map to the same slot cannot be stored simultaneously in the cache.</p></li>
<li><strong>N-way set associative cache</strong>
<p>Each memory chunk can be stored in any one of N particular slots in the cache. As an example, in a 16-way cache, each memory chunk can be stored in 16 different cache slots. Commonly, chunks with indices with the same lowest order bits will all share 16 slots.</p></li>
<li><strong>Fully associative cache</strong>
<p>Each memory chunk can be stored in any slot in the cache. Effectively, the cache operates like a hash table.</p></li>
</ol>
<p>Direct mapped caches can suffer from conflicts &#8211; when multiple values compete for the same slot in the cache, they keep evicting each other out, and the hit rate plummets. On the other hand, fully associative caches are complicated and costly to implement in the hardware. N-way set associative caches are the typical solution for processor caches, as they make a good trade off between implementation simplicity and good hit rate.</p>
<p>For example, the 4MB L2 cache on my machine is 16-way associative. All 64-byte memory chunks are partitioned into sets (based on the lowest order bits of the chunk index), and chunks in the same set compete for 16 slots in the L2 cache.</p>
<p>Since the L2 cache has 65,536 slots, and each set will need 16 slots in the cache, we will have 4,096 sets. So, the lowest 12 bits of the chunk index will determine which set the chunk belongs to (2<sup>12</sup> = 4,096). As a result, cache lines at addresses that differ by a multiple of 262,144 bytes (4096 * 64) will compete for the same slot in the cache. The cache on my machine can hold at most 16 such cache lines.</p>
<p>In order for the effects of cache associativity to become apparent, I need to repeatedly access more than  16 elements from the same set. I will demonstrate this using the following method:</p>
<pre class="code"><span style="color: blue;">public static long </span>UpdateEveryKthByte(<span style="color: blue;">byte</span>[] arr, <span style="color: blue;">int </span>K)
{
    <span style="color: #2b91af;">Stopwatch </span>sw = <span style="color: #2b91af;">Stopwatch</span>.StartNew();
    <span style="color: blue;">const int </span>rep = 1024*1024; <span style="color: green;">// Number of iterations – arbitrary</span>

<span style="color: green;">    </span><span style="color: blue;">int </span>p = 0;
    <span style="color: blue;">for </span>(<span style="color: blue;">int </span>i = 0; i &lt; rep; i++)
    {
        arr[p]++;
        p += K;
        <span style="color: blue;">if </span>(p &gt;= arr.Length) p = 0;
    }

    sw.Stop();
    <span style="color: blue;">return </span>sw.ElapsedMilliseconds;
}
<p>This method increments every K-th value in the array. Once the it reaches the end of the array, it starts again from the beginning. After running sufficiently long (2^20 steps), the loop stops.</p>
<p>I ran UpdateEveryKthByte() with different array sizes (in 1MB increments) and different step sizes. Here is a plot of the results, with blue representing long running time, and white representing short:</p>
<p> <a href="http://igoro.com/wordpress/wp-content/uploads/2010/02/image3.png"><img style="display: inline; border-width: 0px;" title="image" src="http://igoro.com/wordpress/wp-content/uploads/2010/02/image_thumb1_opt.png" border="0" alt="image" width="582" height="299"></a></p>
<p>The blue areas (long running times) are cases where the updated values <strong>could not be simultaneously held in the cache</strong> as we repeatedly iterated over them. The bright blue areas correspond to running times of ~80 ms, and the nearly white areas to ~10 ms.</p>
<p>Let’s explain the blue parts of the chart:</p>
<ol>
<li><strong>Why the vertical lines?</strong>The vertical lines show the step values that touch too many memory locations (&gt;16) from the same set. For those steps, we cannot simultaneously hold all touched values in the 16-way associative cache on my machine.
<p>Some bad step values are powers of two: 256 and 512. As an example, consider step 512 on an 8MB array. An 8MB cache line contains 32 values that are spaced by 262,144 bytes apart. All of those values will be updated by each pass of our loop, because 512 divides 262,144.</p>
<p>And since 32 &gt; 16, those 32 values will keep competing for the same 16 slots in the cache.</p>
<p>Some values that are not powers of two are simply unfortunate, and will end up visiting disproportionately many values from the same set. Those step values will also show up as as blue lines.</p></li>
<li><strong>Why do the vertical lines stop at 4MB array length?</strong>On arrays of 4MB or less, a 16-way associative cache is just as good as a fully associative one.
<p>A 16-way associative cache can hold at most 16 cache lines that are a multiple of 262,144 bytes apart. There is <strong>no set</strong> of 17 or more cache lines all aligned on 262,144-byte boundaries within 4MB, because 16 * 262,144 = 4,194,304.</p></li>
<li><strong>Why the blue triangle in upper left?</strong>In the triangle area, we cannot hold all necessary data in cache simultaneously … not due to the associativity, but simply because of the L2 cache size limit.
<p>For example, consider the array length 16MB with step 128. We are repeatedly updating every 128th byte in the array, which means that we touch every other 64-byte memory chunk. To store every other cache line of a 16MB array, we’d need 8MB cache. But, my machine only has 4MB of cache.</p>
<p>Even if the 4MB cache on my machine was fully associative, it still wouldn’t be able to hold 8MB of data.</p></li>
<li><strong>Why does the triangle fade out in the left?</strong>Notice that the gradient goes from 0 to 64 bytes – one cache line! As explained in examples 1 and 2, additional accesses to same cache line are nearly free. For example, when stepping by 16 bytes, it will take 4 steps to get to the next cache line. So, we get four memory accesses for the price of one.
<p>Since the number of steps is the same for all cases, a cheaper step results in a shorter running time.</p></li>
</ol>
<p>These patterns continue to hold as you extend the chart:</p>
<p><a href="http://igoro.com/wordpress/wp-content/uploads/2010/02/assoc_big1.png"><img style="display: inline; border-width: 0px;" title="assoc_big" src="http://igoro.com/wordpress/wp-content/uploads/2010/02/assoc_big_thumb1_opt.png" border="0" alt="assoc_big" width="582" height="299"></a></p>
<p>Cache associativity is interesting to understand and can certainly be demonstrated, but it tends to be less of a problem compared to the other issues discussed in this article. It is certainly not something that should be at the forefront of your mind as you write programs.</p>
<h3>Example 6: False cache line sharing</h3>
<p>On multi-core machines, caches encounter another problem – consistency. Different cores have fully or partly separate caches. On my machine, L1 caches are separate (as is common), and there are two pairs of processors, each pair sharing an L2 cache. While the details vary, a modern multi-core machine will have a multi-level cache hierarchy, where the faster and smaller caches belong to individual processors.</p>
<p>When one processor modifies a value in its cache, other processors cannot use the old value anymore. That memory location will be invalidated in all of the caches. Furthermore, since caches operate on the granularity of cache lines and not individual bytes, the <strong>entire cache line</strong> will be invalidated in all caches!</p>
<p>To demonstrate this issue, consider this example:</p>
<pre class="code"><span style="color: blue;">private static int</span>[] s_counter = <span style="color: blue;">new int</span>[1024];
<span style="color: blue;">private void </span>UpdateCounter(<span style="color: blue;">int </span>position)
{
    <span style="color: blue;">for </span>(<span style="color: blue;">int </span>j = 0; j &lt; 100000000; j++)
    {
        s_counter[position] = s_counter[position] + 3;
    }
}</pre>
<p>On my quad-core machine, if I call UpdateCounter with parameters 0,1,2,3 from four different threads, it will take <strong>4.3 seconds </strong>until all threads are done.</p>
<p>On the other hand, if I call UpdateCounter with parameters 16,32,48,64 the operation will be done in <strong>0.28 seconds</strong>!</p>
<p>Why? In the first case, all four values are very likely to end up on the same cache line. Each time a core increments the counter, it invalidates the cache line that holds all four counters. All other cores will suffer a cache miss the next time they access their own counters. This kind of thread behavior effectively disables caches, <strong>crippling</strong> the program’s performance.</p>
<h3>Example 7: Hardware complexities</h3>
<p>Even when you know the basics of how caches work, the hardware will still sometimes surprise you. Different processors differ in optimizations, heuristics, and subtle details of how they do things.</p>
<p>On some processors, L1 cache can process two accesses in parallel if they access cache lines from different banks, and serially if they belong to the same bank. Also, processors can surprise you with clever optimizations. For example, the false-sharing example that I’ve used on several machines in the past did not work well on my machine without tweaks – my home machine can optimize the execution in the simplest cases to reduce the cache invalidations.</p>
<p>Here is one odd example of “hardware weirdness”:</p>
<pre class="code"><span style="color: blue;">private static int </span>A, B, C, D, E, F, G;
<span style="color: blue;">private static void </span>Weirdness()
{
    <span style="color: blue;">for </span>(<span style="color: blue;">int </span>i = 0; i &lt; 200000000; i++)
    {
        &lt;something&gt;
    }
}</pre>
<p>When I substitute three different blocks for “&lt;something&gt;”, I get these timings:</p>
<table border="0" cellspacing="0" cellpadding="2" width="362">
<tbody>
<tr>
<td width="199" valign="top"><strong>&lt;something&gt;</strong></td>
<td width="161" valign="top"><strong>Time</strong></td>
</tr>
<tr>
<td width="220" valign="top">A++; B++; C++; D++;</td>
<td width="169" valign="top">719 ms</td>
</tr>
<tr>
<td width="225" valign="top">A++; C++; E++; G++;</td>
<td width="172" valign="top">448 ms</td>
</tr>
<tr>
<td width="225" valign="top">A++; C++;</td>
<td width="174" valign="top">518 ms</td>
</tr>
</tbody>
</table>
<p>Incrementing fields A,B,C,D takes longer than incrementing fields A,C,E,G. And what’s even weirder, incrementing just A and C takes <strong>longer </strong>than increment A and C <strong>and</strong> E and G!</p>
<p>I don’t know for sure what is the reason behind these numbers, but I suspect it is related to memory banks. If someone can explain these numbers, I’d be very curious to hear about it.</p>
<p>The lesson of this example is that can be difficult to fully predict hardware performance. There is a lot that you <strong>can</strong> predict, but ultimately, it is very important to measure and verify your assumptions.</p>
</pre></pre></pre>]]></content>
      <categories>
        <category>处理器</category>
      </categories>
      <tags>
        <tag>memory cache</tag>
      </tags>
  </entry>
  <entry>
    <title>玩转树莓派-24小时无人直播</title>
    <url>/2023/09/02/%E7%8E%A9%E8%BD%AC%E6%A0%91%E8%8E%93%E6%B4%BE-24%E5%B0%8F%E6%97%B6%E6%97%A0%E4%BA%BA%E7%9B%B4%E6%92%AD/</url>
    <content><![CDATA[<h1 id="玩转树莓派-24小时无人直播"><a href="#玩转树莓派-24小时无人直播" class="headerlink" title="玩转树莓派 | 24小时无人直播"></a>玩转树莓派 | 24小时无人直播</h1><h3 id="安装-FFMPEG"><a href="#安装-FFMPEG" class="headerlink" title="安装 FFMPEG"></a>安装 FFMPEG</h3><p>在树莓派终端输入如下命令，等待安装完成。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install ffmpeg</span><br></pre></td></tr></table></figure>
<h3 id="设置视频播放路径和直播地址"><a href="#设置视频播放路径和直播地址" class="headerlink" title="设置视频播放路径和直播地址"></a>设置视频播放路径和直播地址</h3><p>设置视频所在顶层路径，递归查找该路径下所有的待直播视频，接着利用 ffmpeg 逐个播放所有视频。</p>
<p>使用方法为：<code>nohup ./run.sh &lt;视频顶层目录&gt; &lt;你的rtmp直播地址&gt; &lt;你的直播码&gt; &amp;</code></p>
<p>这样便可以利用树莓派实现 24 小时无人在线直播了。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义空数组用于保存mp4视频文件路径</span></span><br><span class="line">mp4_files=()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义函数用于递归遍历目录</span></span><br><span class="line"><span class="function"><span class="title">traverse_directory</span></span>() &#123;</span><br><span class="line">    <span class="built_in">local</span> dir=<span class="variable">$1</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 遍历目录下的所有文件和文件夹</span></span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> <span class="string">&quot;<span class="variable">$dir</span>&quot;</span>/*; <span class="keyword">do</span></span><br><span class="line">        <span class="keyword">if</span> [[ -f <span class="string">&quot;<span class="variable">$file</span>&quot;</span> ]]; <span class="keyword">then</span></span><br><span class="line">            <span class="comment"># 获取文件的扩展名</span></span><br><span class="line">            extension=<span class="string">&quot;<span class="variable">$&#123;file##*.&#125;</span>&quot;</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment"># 判断扩展名是否为mp4</span></span><br><span class="line">            <span class="keyword">if</span> [[ <span class="string">&quot;<span class="variable">$extension</span>&quot;</span> == <span class="string">&quot;mp4&quot;</span> ]]; <span class="keyword">then</span></span><br><span class="line">                mp4_files+=(<span class="string">&quot;<span class="variable">$file</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">fi</span></span><br><span class="line">        <span class="keyword">elif</span> [[ -d <span class="string">&quot;<span class="variable">$file</span>&quot;</span> ]]; <span class="keyword">then</span></span><br><span class="line">            <span class="comment"># 递归遍历子目录</span></span><br><span class="line">            traverse_directory <span class="string">&quot;<span class="variable">$file</span>&quot;</span></span><br><span class="line">        <span class="keyword">fi</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入顶层目录</span></span><br><span class="line"><span class="comment"># read -p &quot;请输入顶层目录路径：&quot; top_dir</span></span><br><span class="line"><span class="comment"># 视频所在顶层目录</span></span><br><span class="line">top_dir=<span class="variable">$1</span></span><br><span class="line"><span class="comment">#你的rmtp直播地址</span></span><br><span class="line">rtmp=<span class="variable">$2</span></span><br><span class="line"><span class="comment">#你的直播码</span></span><br><span class="line">code=<span class="variable">$3</span></span><br><span class="line"><span class="comment"># 调用函数遍历目录</span></span><br><span class="line">traverse_directory <span class="string">&quot;<span class="variable">$top_dir</span>&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> True</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">    <span class="comment"># 输出mp4视频文件列表</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;mp4格式的视频文件列表：&quot;</span></span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> <span class="string">&quot;<span class="variable">$&#123;mp4_files[@]&#125;</span>&quot;</span>; <span class="keyword">do</span></span><br><span class="line">        <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$file</span>&quot;</span></span><br><span class="line">        ffmpeg -re -i <span class="string">&quot;<span class="variable">$&#123;file&#125;</span>&quot;</span> -vcodec copy -acodec aac -b:a 192k -f flv <span class="string">&quot;<span class="variable">$&#123;rtmp&#125;</span>/<span class="variable">$&#123;code&#125;</span>&quot;</span></span><br><span class="line">    <span class="keyword">done</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://shumeipai.nxez.com/2017/06/05/use-raspberry-pi-to-send-music-to-the-bilibili-for-24-hours.html">用树莓派在B站24小时直播音乐</a></p>
]]></content>
      <categories>
        <category>树莓派</category>
      </categories>
      <tags>
        <tag>树莓派</tag>
        <tag>无人直播</tag>
      </tags>
  </entry>
  <entry>
    <title>玩转树莓派-自动上报IP</title>
    <url>/2023/09/02/%E7%8E%A9%E8%BD%AC%E6%A0%91%E8%8E%93%E6%B4%BE-%E8%87%AA%E5%8A%A8%E4%B8%8A%E6%8A%A5IP/</url>
    <content><![CDATA[<h1 id="玩转树莓派-自动上报IP"><a href="#玩转树莓派-自动上报IP" class="headerlink" title="玩转树莓派 | 自动上报IP"></a>玩转树莓派 | 自动上报IP</h1><h3 id="安装和配置mutt-和-msmtp"><a href="#安装和配置mutt-和-msmtp" class="headerlink" title="安装和配置mutt 和 msmtp"></a>安装和配置mutt 和 msmtp</h3><p><code>mutt</code> 和 <code>msmtp</code> 是两个常用的邮件客户端和 SMTP（简单邮件传输协议）工具。它们通常被一起使用来发送和接收电子邮件。</p>
<ol>
<li><code>mutt</code>:<ul>
<li>mutt 是一个文本模式的邮件客户端，它提供了一个基于终端的用户界面，可以在 Linux 上以命令行方式使用。</li>
<li>mutt 支持多种邮件协议，包括 POP3 和 IMAP，因此可以使用它来连接到不同的邮件服务器来接收和阅读邮件。</li>
<li>mutt 具有丰富的配置选项和自定义功能，可以通过编辑配置文件进行优化和修改。可以设置邮箱、签名、邮件过滤规则等。</li>
</ul>
</li>
<li><code>msmtp</code>:<ul>
<li><code>msmtp</code> 是一个用于发送邮件的 SMTP 客户端工具，它允许通过外部的 SMTP 服务器发送电子邮件。</li>
<li><code>msmtp</code> 配合 <code>mutt</code> 使用时特别方便，因为 <code>mutt</code> 默认不包含 SMTP 邮件发送功能，而 <code>msmtp</code> 可以作为其外部的 SMTP 发送器。</li>
<li><code>msmtp</code> 配置简单，只需编辑一个配置文件，并在其中指定 SMTP 服务器的详细信息，如服务器地址、端口、用户名和密码等。</li>
</ul>
</li>
</ol>
<p>执行如下命令安装 mutt 和 msmtp：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt install -y mutt msmtp</span><br></pre></td></tr></table></figure>
<p>安装后，先配置 <code>msmtp</code>，在 <code>/etc</code>目录下创建文件 <code>msmtprc</code>（该配置为所有用户生效，如果仅对当前用户生效，仅需创建 <code>~/.msmtprc</code>文件，<strong>不推荐后一种</strong>）。<code>msmtprc</code>配置文件内容为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">account default</span><br><span class="line">host smtp.qq.com</span><br><span class="line">from xxx@foxmail.com</span><br><span class="line">auth plain</span><br><span class="line">user xxx@foxmail.com</span><br><span class="line">password your_password</span><br><span class="line">logfile /var/<span class="built_in">log</span>/msmtp.log</span><br></pre></td></tr></table></figure>
<p>其中，<code>smtp.qq.com</code>是我使用的邮箱的SMTP服务器地址，<code>xxx@foxmail.com</code>是我用于发送邮件的邮箱，<code>your_password</code>是邮箱密码，你要根据你的情况修改。由于 <code>msmtprc</code> 中包含密码，因此需要设置只读：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo chmod 600 /etc/msmtprc</span><br></pre></td></tr></table></figure>
<p>然后配置 <code>mutt</code>。在<code>/etc</code>目录下创建文件<code>muttrc</code>（或者在当前用户的目录下创建文件 <code>.muttrc</code>，仅对当前用户生效），内容如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">set</span> sendmail=<span class="string">&quot;/usr/bin/msmtp&quot;</span></span><br><span class="line"><span class="built_in">set</span> use_from=yes</span><br><span class="line"><span class="built_in">set</span> realname=<span class="string">&quot;Alarm&quot;</span></span><br><span class="line"><span class="built_in">set</span> editor=<span class="string">&quot;vim&quot;</span></span><br></pre></td></tr></table></figure>
<p>其中，<code>realname</code>是发件人的名字，接收到的邮件中会显示出来。</p>
<h3 id="获取-IP-和-SSID"><a href="#获取-IP-和-SSID" class="headerlink" title="获取 IP 和 SSID"></a>获取 IP 和 SSID</h3><p>树莓派开机自动上报的内容包括 <code>IP</code> 和连接的 WIFI 名称，其一般步骤为：</p>
<ol>
<li>开机时执行一个脚本，检测网络可用性</li>
<li>网络通畅后获取自己的IP地址和网络名称</li>
<li>发送邮件到指定的邮箱。</li>
</ol>
<p>根据上述思路，<code>send-ip-mail.sh</code>脚本内容如下：</p>
<figure class="highlight bash"><figcaption><span>&#123;.line-numbers&#125;</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># check network availability</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">true</span></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  TIMEOUT=5</span><br><span class="line">  SITE_TO_CHECK=<span class="string">&quot;www.baidu.com&quot;</span></span><br><span class="line">  RET_CODE=`curl -I -s --connect-timeout <span class="variable">$TIMEOUT</span> <span class="variable">$SITE_TO_CHECK</span> -w %&#123;http_code&#125; | tail -n1`</span><br><span class="line">  <span class="keyword">if</span> [ <span class="string">&quot;x<span class="variable">$RET_CODE</span>&quot;</span> = <span class="string">&quot;x200&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;Network OK, will send mail...&quot;</span></span><br><span class="line">  <span class="built_in">break</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;Network not ready, wait...&quot;</span></span><br><span class="line">  sleep 1s</span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line"><span class="keyword">done</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># get the IP address of wlan1, e.g. &quot;192.168.16.5&quot;</span></span><br><span class="line">ETH0_IP_ADDR=`ifconfig wlan1 | sed -n <span class="string">&quot;2,2p&quot;</span> | awk <span class="string">&#x27;&#123;print substr($2,1)&#125;&#x27;</span>`</span><br><span class="line">ESSID=`sudo iwconfig wlan1 | grep ESSID | awk <span class="string">&#x27;&#123;print substr($4,1)&#125;&#x27;</span>`</span><br><span class="line"><span class="comment"># send the Email</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;Current time: `date &#x27;+%F %T&#x27;`. Enjoy it&quot;</span> | mutt -s <span class="string">&quot;<span class="variable">$&#123;ESSID&#125;</span> IP: <span class="variable">$ETH0_IP_ADDR</span>&quot;</span> xxx@foxmail.com</span><br></pre></td></tr></table></figure>
<p>其中，<code>wlan1</code>为树莓派无线网卡，<code>xxx@foxmail.com</code>为要发送的目的地址。</p>
<h4 id="开机自动上报-IP"><a href="#开机自动上报-IP" class="headerlink" title="开机自动上报 IP"></a>开机自动上报 IP</h4><p>为了实现开机自动 IP，需要将上述 <code>send-ip-mail.sh</code> 脚本放在 <code>/etc/rc.local</code> 中，只需一行即可。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#/etc/rc.local</span></span><br><span class="line">su pi -c <span class="string">&quot;sudo /home/pi/send-ip-mail.sh &gt;&gt; /root/data/source/send-ip-mail.log 2&gt;&amp;1&quot;</span></span><br><span class="line">...</span><br><span class="line"><span class="built_in">exit</span> 0</span><br></pre></td></tr></table></figure>
<p>其中，<code>su</code> 命令是指定在 <code>pi</code> 用户下执行这条命令，<code>-c</code> 表示执行完这条命令之后恢复原来的用户。</p>
<h3 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h3><p><a href="https://shumeipai.nxez.com/2014/03/18/let-raspberry-pi-ip-address-is-automatically-reported-to-the-mailbox.html">让树莓派自动上报IP地址到邮箱</a></p>
]]></content>
      <categories>
        <category>树莓派</category>
      </categories>
      <tags>
        <tag>树莓派</tag>
        <tag>自动上报IP</tag>
      </tags>
  </entry>
</search>
